@startuml

title <b><size:25>Android系统进程间通信Binder机制在应用程序架构层的Java接口源代码分析

fork

start

:<b><size:20>1.获取ServiceManager的java远程接口的过程;

:<b><size:20>2.HelloService的接口定义;

:<b><size:20>3.HelloService的启动过程;

:<b><size:20>4.Client获取HelloService的Java的远程接口的过程;

:<b><size:20>5.Client通过HelloService的Java远程接口来使用HelloService提供的服务的过程;

fork again

start

:<b><size:20>1.获取ServiceManager的Java远程接口;

:1.1.通过ServiceManager的getIServiceManager的方法，来获取IServiceManager;

:1.2.ServiceManagerNative.asInterface的方法中，先通过BinderInternal.
getContextObject()方法来获取BinderProxy对象;

:1.3.BinderInternal.getContextObject()方法中，通过jni的方法，调用到
ProcessState::self()->getContextObject(NULL)来获取0号的BpBinder对象，
并通过javaObjectForIBinder来获取封装了BpBinder对象的BinderProxy对象;

:1.4.javaObjectForIBinder方法中，先删除已经存在的BinderProxy对象，然后在
创建一个新的BinderProxy对象，并将BpBinder(0)对象放到gBinderProxyOffsets
.mObejcts对象中，方便下次使用;

fork again

start

:<b><size:20>2.HelloService接口的定义;

:2.1.定义aidl的文件;

:2.2.编写IHelloService的接口,定义方法setVal和getVal;

:2.3.IHelloService.aidl文件编译后，生成相应的Stub和Proxy类，分别是
IHelloService的Server必须继承与这里的IHelloService.Stub类，和HelloService
的远程接口-IHelloService.Stub.Proxy对象;

fork again

start

:<b><size:20>3.HelloService的启动过程;

:3.1.定义HelloService类作为Server类，并继承实现IHelloService.Stub类;

:3.2.启动一个线程创建HelloService，并将HelloService添加到ServiceManager中去;

:3.3.创建HelloService时，会调用Binder.init方法，将创建一个JavaBBinderHolder
对象，并保存在gBinderOffsets.mObject中;

:3.4.回到ServiceManager.addService的方法中，方法中调用的是ServiceManagerProxy
.addService方法，调用Parcel.writeStrongBinder(service)将service写到Parcel中去，
在JNI层的实现中，调用ibinderForJavaObject间将前面创建的mObject变量强制转换为
JavaBBinderHolder对象，然后调用JavaBBinderHolder->get(env),将JavaBBinderHolder
里面的JavaBBinder类的实体添加到ServiceManager中去，以便有请求过来的时候，能够调用
JavaBBinder->onTransact()来处理;

:3.5.在ServiceManager.addService方法中，调用BinderProxy.transact方法中，
将Parcel对象转成c++Parcel对象，并从gBinderProxyOffsets.mObject去取出
ServiceManager的0号引用BpBinder(0),调用BpBinder->transact和IPCThreadState->transact;

:3.6.在ServiceManager接收到请求之后，调用do_add_service将service加入到svclist列表中;

fork again

start

:<b><size:20>4.Client获取HelloService的Java远程接口的过程;

:4.1.通过IHelloService的接口，调用IHelloService.Stub.asInterface
(ServiceManager.getService("hello"));

:4.2.SericeManager.getSerive("hello")实际上是调用ServiceManager.
getService("hello")的方法，调用BinderProxy.transact()来获取HelloService的客户端代理;

:4.3.通过Parcel.readStrongBinder将HelloService读取，通过
javaObjectForIBinder将客户端的代理BpBinder(handle)读取，并返回;

:4.4.而在Stub.asInterface方法中，先调用BinderProxy.
queryLocalInterface方法查找不到，这里是查找不到的，所以返回new BinderProxy()对象;

fork again

start

:<b><size:20>5.Client通过HelloService的Java远程接口来使用HelloService提供的服务的过程;

:5.1.Client通过调用上面的IHellService.getVal方法，返回对应的结果;

:5.2.IServiceManager.getVal调用的是BinderProxy.transact方法传递请求;

:5.3.HellService会被唤醒，调用JavaBBinder.onTransact方法;

:5.4.JavaBBinder.onTransact方法中，调用的HelloService.execTransact方法，
将调用到HelloService.Stub.onTransact方法;

:5.5.HelloService的onTransact处理完之后，通过_reply.readInt()方法来将结果来读取处理;

@enduml