<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE en-export SYSTEM "http://xml.evernote.com/pub/evernote-export3.dtd">
<en-export export-date="20171124T092000Z" application="Evernote" version="Evernote Mac 6.12.2 (455489)">
<note><title>Android系统进程间通信(IPC)机制Binder中的Server启动过程源代码分析</title><content><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE en-note SYSTEM "http://xml.evernote.com/pub/enml2.dtd">
<en-note><div>    在前面一篇文章<a href="http://blog.csdn.net/luoshengyang/article/details/6627260">浅谈Android系统进程间通信(IPC)机制Binder中的Server和Client获得Service Manager接口之路</a>中，介绍了在Android系统中Binder进程间通信机制中的Server角色是如何获得Service Manager远程接口，即defaultServiceManager函数的实现。Server获得了Service Manager远程接口之后，就要把自己的Service添加到Service Manager中去，然后把自己启动起来，等待Client的请求。本文将通过分析源代码了解Server的启动过程是怎么样的。</div><div>    本文通过一个具体的例子来说明Binder机制中Server的启动过程。我们知道，在Android系统中，提供了多媒体播放的功能，这个功能是以服务的形式来提供的。这里，我们就通过分析MediaPlayerService的实现来了解Media Server的启动过程。</div><div>    首先，看一下MediaPlayerService的类图，以便我们理解下面要描述的内容。</div><div><br/></div><div><en-media hash="587cb292a73d7274badb5a122c11857c" type="image/png"/><br/></div><div><br/></div><div>    我们将要介绍的主角MediaPlayerService继承了BnMediaPlayerService类，熟悉Binder机制的同学应该知道BnMediaPlayerService是一个Binder Native类，用来处理Client请求的。BnMediaPlayerService继承了BnInterface&lt;IMediaPlayerService&gt;类，BnInterface是一个模板类，它定义在frameworks/base/include/binder/IInterface.h文件中:</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">template&lt;typename INTERFACE&gt;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">class BnInterface : public INTERFACE, public BBinder</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">{</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">public:</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    virtual sp&lt;IInterface&gt;      queryLocalInterface(const String16&amp; _descriptor);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    virtual const String16&amp;     getInterfaceDescriptor() const;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">protected:</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    virtual IBinder*            onAsBinder();</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">};</span></div></div><div>    这里可以看出，BnMediaPlayerService实际是继承了IMediaPlayerService和BBinder类。IMediaPlayerService和BBinder类又分别继承了IInterface和IBinder类又同时继承了RefBase类。</div><div>    实际上，BnMediaPlayerService并不是直接接收到Client处发送过来的请求，而是使用了IPCThreadState接收Client处发送过来的请求，而IPCThreadState又借助了ProcessState类来与Binder驱动程序交互。有关IPCThreadState和ProcessState的关系，可以参考上一篇文章<a href="http://blog.csdn.net/luoshengyang/article/details/6627260">浅谈Android系统进程间通信(IPC)机制Binder中的Server和Client获得Service Manager接口之路</a>，接下来也会有相应的描述。IPCThreadState接收到了Client处的请求后，就会调用BBinder类的transact函数，并传入相关参数，BBinder类的transact函数最终调用BnMediaPlayerService类的onTransact函数，于是，就开始真正地处理Client的请求了。</div><div>    了解了MediaPlayerService类结构之后，就要开始进入到本文的主题了。</div><div>    首先，看看MediaPlayerService是如何启动的。启动MediaPlayerService的代码位于frameworks/base/media/mediaserver/main_mediaserver.cpp文件中:</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">int main(int argc, char** argv)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">{</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    sp&lt;ProcessState&gt; proc(ProcessState::self());</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    sp&lt;IServiceManager&gt; sm = defaultServiceManager();</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    LOGI(&quot;ServiceManager: %p&quot;, sm.get());</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    AudioFlinger::instantiate();</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    MediaPlayerService::instantiate();</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    CameraService::instantiate();</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    AudioPolicyService::instantiate();</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    ProcessState::self()-&gt;startThreadPool();</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    IPCThreadState::self()-&gt;joinThreadPool();</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">}</span></div></div><div>    这里我们不关注AudioFlinger和CameraService相关的代码。</div><div>    先看下面的这句代码:</div><div>  </div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;"> sp&lt;ProcessState&gt; proc(ProcessState::self());</span></div></div><div>    </div><div>    这句代码的作用是通过ProcessState::self()调用创建一个ProcessState实例。ProcessState::self()是ProcessState类的一个静态成员变量，定义在frameworks/base/libs/binder/ProcessState.cpp文件中:</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">sp&lt;ProcessState&gt; ProcessState::self()</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">{</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    if (gProcess != NULL) return gProcess;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    </span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    AutoMutex _l(gProcessMutex);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    if (gProcess == NULL) gProcess = new ProcessState;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    return gProcess;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">}</span></div></div><div>    这里可以看出，这个函数作用是返回一个全局唯一的ProcessState实例gProcess。全局唯一变量gProcess定义在frameworks/base/libs/binder/Static.cpp文件中:</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">Mutex gProcessMutex;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">sp&lt;ProcessState&gt; gProcess;</span></div></div><div>    再来看ProcessState的构造函数:</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">ProcessState::ProcessState()</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    : mDriverFD(open_driver())</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    , mVMStart(MAP_FAILED)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    , mManagesContexts(false)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    , mBinderContextCheckFunc(NULL)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    , mBinderContextUserData(NULL)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    , mThreadPoolStarted(false)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    , mThreadPoolSeq(1)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">{</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    if (mDriverFD &gt;= 0) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        // XXX Ideally, there should be a specific define for whether we</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        // have mmap (or whether we could possibly have the kernel module</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        // availabla).</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">#if !defined(HAVE_WIN32_IPC)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        // mmap the binder, providing a chunk of virtual address space to receive transactions.</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        mVMStart = mmap(0, BINDER_VM_SIZE, PROT_READ, MAP_PRIVATE | MAP_NORESERVE, mDriverFD, 0);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        if (mVMStart == MAP_FAILED) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            // *sigh*</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            LOGE(&quot;Using /dev/binder failed: unable to mmap transaction memory.\n&quot;);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            close(mDriverFD);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            mDriverFD = -1;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">#else</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        mDriverFD = -1;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">#endif</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    if (mDriverFD &lt; 0) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        // Need to run without the driver, starting our own thread pool.</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">}</span></div></div><div>    这个函数有两个关键地方，一是通过open_driver函数打开Binder设备文件/dev/binder,并将打开设备文件描述符保存在成员变量mDriverFD中；二是通过mmap来把设备文件/dev/binder映射到内存中。</div><div><span style="background-color: rgb(255, 250, 165);-evernote-highlight:true;"> 问题：Client端和Server端是通过/dev/binder这个设备文件进行的数据交换的，Server端监听着这个设备文件，但是如何保证安全性的呢？</span></div><div><span style="background-color: rgb(255, 250, 165);-evernote-highlight:true;">答:/dev/binder是在内核空间里面的，所以安全性不用考虑，并不能通过猜测法来知道Client和Sever端的数据交互的方式的</span></div><div>    先看open_driver函数的实现，这个函数同样位于frameworks/base/libs/binder/ProcessState.cpp文件中:</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">static int open_driver()</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">{</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    if (gSingleProcess) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        return -1;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    }</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    int fd = open(&quot;/dev/binder&quot;, O_RDWR);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    if (fd &gt;= 0) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        fcntl(fd, F_SETFD, FD_CLOEXEC);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        int vers;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">#if defined(HAVE_ANDROID_OS)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        status_t result = ioctl(fd, BINDER_VERSION, &amp;vers);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">#else</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        status_t result = -1;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        errno = EPERM;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">#endif</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        if (result == -1) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            LOGE(&quot;Binder ioctl to obtain version failed: %s&quot;, strerror(errno));</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            close(fd);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            fd = -1;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        if (result != 0 || vers != BINDER_CURRENT_PROTOCOL_VERSION) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            LOGE(&quot;Binder driver protocol does not match user space protocol!&quot;);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            close(fd);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            fd = -1;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">#if defined(HAVE_ANDROID_OS)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        size_t maxThreads = 15;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        result = ioctl(fd, BINDER_SET_MAX_THREADS, &amp;maxThreads);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        if (result == -1) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            LOGE(&quot;Binder ioctl to set max threads failed: %s&quot;, strerror(errno));</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">#endif</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        </span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    } else {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        LOGW(&quot;Opening '/dev/binder' failed: %s\n&quot;, strerror(errno));</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    return fd;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">}</span></div></div><div>    这个函数的作用主要是通过open文件操作函数来打开/dev/binder设备文件，然后再调用ioctl文件控制函数来分别执行BINDER_VERSION和BINDER_SET_MAX_THREADS两个命令和Binder驱动程序进行交互，前者用于获得当前Binder驱动程序的版本号，后者用于通知Binder驱动程序，MediaPlayerService最多可以启动15个线程来处理Client端的请求。</div><div>    open在Binder驱动程序中的具体事项，请参考前面一篇文章<a href="http://blog.csdn.net/luoshengyang/article/details/6621566">浅谈Service Manager成为Android进程间通信(IPC)机制Binder守护进程之路</a>，这里不再重复描述。打开/dev/binder设备文件后，Binder驱动程序就为MediaPlayerService进程创建了一个struct binder_proc结构体实例来维护MediaPlayerService进程上下文相关信息。</div><div>    我们来看一下ioctl文件操作函数执行BINDER_VERSION命令的过程:</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">status_t result = ioctl(fd, BINDER_VERSION, &amp;vers);</span></div></div><div>    这个函数调用最终进入到Binder驱动程序的binder_ioctl函数中，我们只关注BINDER_VERSION相关的部分逻辑:</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">static long binder_ioctl(struct file *filp, unsigned int cmd, unsigned long arg)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">{</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    int ret;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    struct binder_proc *proc = filp-&gt;private_data;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    struct binder_thread *thread;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    unsigned int size = _IOC_SIZE(cmd);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    void __user *ubuf = (void __user *)arg;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    /*printk(KERN_INFO &quot;binder_ioctl: %d:%d %x %lx\n&quot;, proc-&gt;pid, current-&gt;pid, cmd, arg);*/</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    ret = wait_event_interruptible(binder_user_error_wait, binder_stop_on_user_error &lt; 2);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    if (ret)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        return ret;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    mutex_lock(&amp;binder_lock);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    thread = binder_get_thread(proc);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    if (thread == NULL) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        ret = -ENOMEM;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        goto err;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    }</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    switch (cmd) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    ......</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    case BINDER_VERSION:</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        if (size != sizeof(struct binder_version)) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            ret = -EINVAL;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            goto err;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        if (put_user(BINDER_CURRENT_PROTOCOL_VERSION, &amp;((struct binder_version *)ubuf)-&gt;protocol_version)) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            ret = -EINVAL;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            goto err;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        break;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    ......</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    ret = 0;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">err:</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        ......</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    return ret;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">}</span></div></div><div>    很简单，只是将BINDER_CURRENT_PROTOCOL_VERSION写入到传入的参数arg指向的参数arg指向的用户缓冲区中去就返回了。BINDER_CURRENT_PROTOCOL_VERSION是一个宏，定义在kernel/common/drivers/staging/android/binder.h文件中:</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">/* This is the current protocol version. */</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">#define BINDER_CURRENT_PROTOCOL_VERSION 7</span></div></div><div>    </div><div>    这里为什么要把ubuf转换成struct binder_version之后，再通过其protocol_version成员变量再来写入呢？转了一圈，最终内容还是写入到ubuf中。我们看一下struct binder_version的定义才明白，同样是在kernel/common/drivers/staging/android/binder.h文件中:</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">/* Use with BINDER_VERSION, driver fills in fields. */</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">struct binder_version {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    /* driver protocol version -- increment with incompatible change */</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    signed long    protocol_version;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">};</span></div></div><div>    从注释中可以看出来，这里是考虑到兼容性，因为以后很有可能不是用signed long来表示版本号。</div><div>    这里有个重要的地方要注意的是,由于这里是打开设备文件/dev/binder之后，第一次进入到binder_ioctl函数，因此，这里调用binder_get_thread的时候，就会为当前线程创建一个struct binder_thread结构体变量来维护线程上下文信息，具体可以参考<a href="http://blog.csdn.net/luoshengyang/article/details/6621566">浅谈Service Manager成为Android进程通信(IPC)机制Binder守护进程之路一文</a>。</div><div>    接下来我们再来看一下ioctl文件操作函数执行BINDER_SET_MAX_THREADS命令的过程:</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">result = ioctl(fd, BINDER_SET_MAX_THREADS, &amp;maxThreads);</span></div></div><div>    这个函数调用最终进入到Binder驱动程序的binder_ioctl函数中，我们只关注BINDER_SET_MAX_THREADS相关的部分逻辑:</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">static long binder_ioctl(struct file *filp, unsigned int cmd, unsigned long arg)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">{</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    int ret;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    struct binder_proc *proc = filp-&gt;private_data;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    struct binder_thread *thread;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    unsigned int size = _IOC_SIZE(cmd);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    void __user *ubuf = (void __user *)arg;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    /*printk(KERN_INFO &quot;binder_ioctl: %d:%d %x %lx\n&quot;, proc-&gt;pid, current-&gt;pid, cmd, arg);*/</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    ret = wait_event_interruptible(binder_user_error_wait, binder_stop_on_user_error &lt; 2);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    if (ret)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        return ret;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    mutex_lock(&amp;binder_lock);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    thread = binder_get_thread(proc);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    if (thread == NULL) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        ret = -ENOMEM;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        goto err;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    }</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    switch (cmd) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    ......</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    case BINDER_SET_MAX_THREADS:</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        if (copy_from_user(&amp;proc-&gt;max_threads, ubuf, sizeof(proc-&gt;max_threads))) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            ret = -EINVAL;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            goto err;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        break;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    ......</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    ret = 0;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">err:</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    ......</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    return ret;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">}</span></div></div><div>    这里实现也是非常简单，只是简单地把用户传进来的参数保存在proc-&gt;max_threads中就完毕了。注意，这里再调用binder_get_thread函数的时候，就可以在proc-&gt;threads中找到当前线程对应的struct binder_thread结构了，因为前面已经创建好并保存在proc-&gt;threads红黑树中。</div><div>    回到ProcessState的构造函数中，这里还通过mmap函数来把设备文件/dev/binder映射到内存中，这个函数在<a href="http://blog.csdn.net/luoshengyang/article/details/6621566">浅谈Service Manager成为Android进程间通信(IPC)机制Binder守护进程之路</a>一文也已经有详细介绍，这里不再重复描述。宏BINDER_VM_SIZE就定义在ProcessState.cpp文件中:</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">#define BINDER_VM_SIZE ((1*1024*1024) - (4096 *2))</span></div></div><div><br/></div><div>    mmap函数调用完成之后，Binder驱动程序就为当前进程预留了BINDER_VM_SIZE大小的内存空间了。</div><div>    这样，ProcessState全局唯一变量gProcess就创建完毕了，回到frameworks/base/media/mediaserver/main_server.cpp文件中的main函数，下一步是调用defaultServiceManager函数来获得Service Manager的远程接口，这个已经在上一篇<a href="http://blog.csdn.net/luoshengyang/article/details/6627260">浅谈Android系统进程间通信(IPC)机制Binder中的Server和Client获得Service Manager接口之路</a>有详细描述，读者可以回头去参考一下。</div><div>    再接下来，就进入到MediaPlayerService::instantiate函数把MediaPlayerService添加到Service Manager中去了。这个函数定义在frameworks/base/media/libmediaplayerservice/MediaPlayerService.cpp文件中:</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">void MediaPlayerService::instantiate() {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    defaultServiceManager()-&gt;addService(</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            String16(&quot;media.player&quot;), new MediaPlayerService());</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">}</span></div></div><div>    我们重点看一下IServiceManager::addService的过程，这有助于我们加深对Binder机制的理解。</div><div>    在上一篇文章<a href="http://blog.csdn.net/luoshengyang/article/details/6627260">浅谈Android系统进程间通信(IPC)机制Binder中的Server和Client获得Service Manager接口之路</a>中说到，defaultServiceManager返回的实际是一个BpServiceManager类实例，因此，我们看一下BpServiceManager::addService的实现，这个函数实现在frameworks/base/libs/binder/IServiceManager.cpp文件中:</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">class BpServiceManager : public BpInterface&lt;IServiceManager&gt;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">{</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">public:</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    BpServiceManager(const sp&lt;IBinder&gt;&amp; impl)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        : BpInterface&lt;IServiceManager&gt;(impl)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    }</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    ......</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    virtual status_t addService(const String16&amp; name, const sp&lt;IBinder&gt;&amp; service)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        Parcel data, reply;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        data.writeInterfaceToken(IServiceManager::getInterfaceDescriptor());</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        data.writeString16(name);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        data.writeStrongBinder(service);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        status_t err = remote()-&gt;transact(ADD_SERVICE_TRANSACTION, data, &amp;reply);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        return err == NO_ERROR ? reply.readExceptionCode() </span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    }</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    ......</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">};</span></div></div><div>    这里的Parcel类是用于序列化进程间通信数据用的。</div><div>    先来看这一句的调用:</div><div>    </div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">data.writeInterfaceToken(IServiceManager::getInterfaceDescriptor());</span></div></div><div>    IServiceManager::getInterfaceDescriptor()返回的是一个字符串，即“android.os.IServiceManager”，具体可以参考IServiceManager的实现。我们看一下Parcel::writeInterfaceToken的实现，位于frameworks/base/libs/binder/Parcel.cpp文件中:</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">// Write RPC headers.  (previously just the interface token)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">status_t Parcel::writeInterfaceToken(const String16&amp; interface)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">{</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    writeInt32(IPCThreadState::self()-&gt;getStrictModePolicy() |</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">               STRICT_MODE_PENALTY_GATHER);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    // currently the interface identification token is just its name as a string</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    return writeString16(interface);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">}</span></div></div><div>    它的作用是写入了一个整数和一个字符串到Parcel中去。</div><div>    再来看下面的调用:</div><div>    </div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">data.writeString16(name);</span></div></div><div>     </div><div>    这里定义一个Binder对象到Parcel去。我们重点看一下这个函数的实现，因为它涉及到进程间传输Binder实体的问题，比较复杂，需要重点关注，同时，也是理解Binder机制的一个重点所在。这里的service参数是一个MediaPlayerService对象。</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">status_t Parcel::writeStrongBinder(const sp&lt;IBinder&gt;&amp; val)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">{</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    return flatten_binder(ProcessState::self(), val, this);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">}</span></div></div><div><br/></div><div>    看到flatten_binder函数，是不是似曾相识的感觉?我们在前一篇文章<a href="http://blog.csdn.net/luoshengyang/article/details/6621566">浅谈Service Manager成为Android进程间通信(IPC)机制Binder守护进程之路</a>中，曾经提到在Binder驱动程序中，使用struct flat_binder_object来表示传输中的一个binder对象，它的定义如下所示：</div><div><br/></div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">/*</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;"> * This is the flattened representation of a Binder object for transfer</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;"> * between processes.  The 'offsets' supplied as part of a binder transaction</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;"> * contains offsets into the data where these structures occur.  The Binder</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;"> * driver takes care of re-writing the structure type and data as it moves</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;"> * between processes.</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;"> */</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">struct flat_binder_object {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    /* 8 bytes for large_flat_header. */</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    unsigned long        type;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    unsigned long        flags;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    /* 8 bytes of data. */</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    union {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        void        *binder;    /* local object */</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        signed long    handle;        /* remote object */</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    };</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    /* extra data associated with local object */</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    void            *cookie;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">};</span></div></div><div><br/></div><div>    各个成员变量的含义请参考Android Binder设计与实现</div><div>    我们进入到flatten_binder函数看看:</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">status_t flatten_binder(const sp&lt;ProcessState&gt;&amp; proc,</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    const sp&lt;IBinder&gt;&amp; binder, Parcel* out)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">{</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    flat_binder_object obj;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    </span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    obj.flags = 0x7f | FLAT_BINDER_FLAG_ACCEPTS_FDS;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    if (binder != NULL) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        IBinder *local = binder-&gt;localBinder();</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        if (!local) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            BpBinder *proxy = binder-&gt;remoteBinder();</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            if (proxy == NULL) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                LOGE(&quot;null proxy&quot;);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            const int32_t handle = proxy ? proxy-&gt;handle() : 0;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            obj.type = BINDER_TYPE_HANDLE;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            obj.handle = handle;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            obj.cookie = NULL;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        } else {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            obj.type = BINDER_TYPE_BINDER;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            obj.binder = local-&gt;getWeakRefs();</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            obj.cookie = local;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    } else {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        obj.type = BINDER_TYPE_BINDER;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        obj.binder = NULL;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        obj.cookie = NULL;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    </span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    return finish_flatten_binder(binder, obj, out);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">}</span></div></div><div>    首先是初始化flat_binder_object的flags域:</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">obj.flags = 0x7f | FLAT_BINDER_FLAG_ACCEPTS_FDS;</span></div></div><div>    0x7f表示处理本Binder实体请求数据包的线程的最低优先级，FLAT_BINDER_FLAG_ACCEPTS_FDS表示这个Binder实体可以接受文件描述符时，就会在本进程中打开这个文件。</div><div>    传进来的binder即为MediaPlayerService::instantiate函数中的new出来的MediaPlayerService实例，因此，不为空。又由于MediaPlayerService继承自BBinder类，它是一个本地的Binder实体，因此binder-&gt;localBinder返回的一个BBinder指针，而且肯定不为空，于是执行下面语句:</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">obj.type = BINDER_TYPE_BINDER;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">obj.binder = local-&gt;getWeakRefs();</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">obj.cookie = local;</span></div></div><div>    设置了flat_binder_obj的其他成员变量，注意，指向这个Binder实体地址的指针local保存在flat_binder_obj的成员变量cookie中。</div><div>    函数调用finish_flatten_binder来将这个flat_binder_obj写入到Parcel中去:</div><div><br/></div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">inline static status_t finish_flatten_binder(</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    const sp&lt;IBinder&gt;&amp; binder, const flat_binder_object&amp; flat, Parcel* out)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">{</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    return out-&gt;writeObject(flat, false);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">}</span></div></div><div><br/></div><div>Parcel::writeObject的实现如下:</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">status_t Parcel::writeObject(const flat_binder_object&amp; val, bool nullMetaData)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">{</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    const bool enoughData = (mDataPos+sizeof(val)) &lt;= mDataCapacity;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    const bool enoughObjects = mObjectsSize &lt; mObjectsCapacity;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    if (enoughData &amp;&amp; enoughObjects) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">restart_write:</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        *reinterpret_cast&lt;flat_binder_object*&gt;(mData+mDataPos) = val;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        </span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        // Need to write meta-data?</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        if (nullMetaData || val.binder != NULL) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            mObjects[mObjectsSize] = mDataPos;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            acquire_object(ProcessState::self(), val, this);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            mObjectsSize++;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        </span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        // remember if it's a file descriptor</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        if (val.type == BINDER_TYPE_FD) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            mHasFds = mFdsKnown = true;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        }</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        return finishWrite(sizeof(flat_binder_object));</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    }</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    if (!enoughData) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        const status_t err = growData(sizeof(val));</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        if (err != NO_ERROR) return err;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    if (!enoughObjects) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        size_t newSize = ((mObjectsSize+2)*3)/2;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        size_t* objects = (size_t*)realloc(mObjects, newSize*sizeof(size_t));</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        if (objects == NULL) return NO_MEMORY;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        mObjects = objects;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        mObjectsCapacity = newSize;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    </span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    goto restart_write;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">}</span></div></div><div>    这里除了把flat_binder_obj写入到Parcel里面之内，还要记录这个flat_binder_obj在Parcel里面的偏移位置:</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">mObjects[mObjectsSize] = mDataPos;</span></div></div><div>    这里因为，如果进程间传输的数据带有Binder对象的时候，Binder驱动程序需要作进一步的处理，以维护各Binder实体的一致性，下面我们将会看到Binder驱动程序是怎么处理这些Binder对象的。</div><div>    再回到BpServiceManager::addService函数中，调用下面语句:</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">status_t err = remote()-&gt;transact(ADD_SERVICE_TRANSACTION, data, &amp;reply);</span></div></div><div>    回到<a href="http://blog.csdn.net/luoshengyang/article/details/6627260">浅谈Android系统进程间通信(IPC)机制Binder中的Server和Client获得Service Manager接口之路</a>一文中类图中去看一下，这里的remote成员函数来自BpRefBase类，它返回一个BpBinder指针。因此，我们继续进入到BpBinder::transact函数中去看看:</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">status_t BpBinder::transact(</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    uint32_t code, const Parcel&amp; data, Parcel* reply, uint32_t flags)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">{</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    // Once a binder has died, it will never come back to life.</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    if (mAlive) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        status_t status = IPCThreadState::self()-&gt;transact(</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            mHandle, code, data, reply, flags);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        if (status == DEAD_OBJECT) mAlive = 0;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        return status;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    }</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    return DEAD_OBJECT;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">}</span></div></div><div>    这里又调用了IPCThreadState::transact来进行实际的操作。注意这里的mHandle为0，code为ADD_SERVICE_TRANSACTION。ADD_SERVICE_TRANSACTION是上面以参数形式传进来的，那mHandle为什么是0呢？因为这里表示的是Service Manager远程接口，它的句柄值一定是0，具体请参考上一篇文章获取Service Manager接口之路一文。</div><div>    再进入到IPCThreadState::transact函数，看看做了些什么事情:</div><div><br/></div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">status_t IPCThreadState::transact(int32_t handle,</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                                  uint32_t code, const Parcel&amp; data,</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                                  Parcel* reply, uint32_t flags)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">{</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    status_t err = data.errorCheck();</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    flags |= TF_ACCEPT_FDS;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    IF_LOG_TRANSACTIONS() {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        TextOutput::Bundle _b(alog);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        alog &lt;&lt; &quot;BC_TRANSACTION thr &quot; &lt;&lt; (void*)pthread_self() &lt;&lt; &quot; / hand &quot;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            &lt;&lt; handle &lt;&lt; &quot; / code &quot; &lt;&lt; TypeCode(code) &lt;&lt; &quot;: &quot;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            &lt;&lt; indent &lt;&lt; data &lt;&lt; dedent &lt;&lt; endl;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    </span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    if (err == NO_ERROR) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        LOG_ONEWAY(&quot;&gt;&gt;&gt;&gt; SEND from pid %d uid %d %s&quot;, getpid(), getuid(),</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            (flags &amp; TF_ONE_WAY) == 0 ? &quot;READ REPLY&quot; : &quot;ONE WAY&quot;);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        err = writeTransactionData(BC_TRANSACTION, flags, handle, code, data, NULL);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    </span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    if (err != NO_ERROR) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        if (reply) reply-&gt;setError(err);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        return (mLastError = err);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    </span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    if ((flags &amp; TF_ONE_WAY) == 0) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        #if 0</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        if (code == 4) { // relayout</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            LOGI(&quot;&gt;&gt;&gt;&gt;&gt;&gt; CALLING transaction 4&quot;);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        } else {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            LOGI(&quot;&gt;&gt;&gt;&gt;&gt;&gt; CALLING transaction %d&quot;, code);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        #endif</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        if (reply) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            err = waitForResponse(reply);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        } else {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            Parcel fakeReply;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            err = waitForResponse(&amp;fakeReply);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        #if 0</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        if (code == 4) { // relayout</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            LOGI(&quot;&lt;&lt;&lt;&lt;&lt;&lt; RETURNING transaction 4&quot;);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        } else {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            LOGI(&quot;&lt;&lt;&lt;&lt;&lt;&lt; RETURNING transaction %d&quot;, code);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        #endif</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        </span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        IF_LOG_TRANSACTIONS() {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            TextOutput::Bundle _b(alog);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            alog &lt;&lt; &quot;BR_REPLY thr &quot; &lt;&lt; (void*)pthread_self() &lt;&lt; &quot; / hand &quot;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                &lt;&lt; handle &lt;&lt; &quot;: &quot;;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            if (reply) alog &lt;&lt; indent &lt;&lt; *reply &lt;&lt; dedent &lt;&lt; endl;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            else alog &lt;&lt; &quot;(none requested)&quot; &lt;&lt; endl;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    } else {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        err = waitForResponse(NULL, NULL);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    </span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    return err;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">}</span></div></div><div><br/></div><div>    IPCThreadState::transact函数的参数flags是一个默认值为0的参数，上面没有传相应的实参进来，因此，这里就为0.</div><div>    函数首先调用writeTransactionData函数准备好一个struct binder_transaction_data结构体变量，这个是等一下要传输给Binder驱动程序的。struct binder_transaction_data的定义我们在Serivce Manager作为守护进程之路一文有详细描述，可以回忆一下。这里为了方便描述，将struct binder_transaction_data的定义再次列出来:</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">struct binder_transaction_data {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    /* The first two are only used for bcTRANSACTION and brTRANSACTION,</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">     * identifying the target and contents of the transaction.</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">     */</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    union {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        size_t    handle;    /* target descriptor of command transaction */</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        void    *ptr;    /* target descriptor of return transaction */</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    } target;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    void        *cookie;    /* target object cookie */</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    unsigned int    code;        /* transaction command */</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    /* General information about the transaction. */</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    unsigned int    flags;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    pid_t        sender_pid;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    uid_t        sender_euid;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    size_t        data_size;    /* number of bytes of data */</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    size_t        offsets_size;    /* number of bytes of offsets */</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    /* If this transaction is inline, the data immediately</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">     * follows here; otherwise, it ends with a pointer to</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">     * the data buffer.</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">     */</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    union {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        struct {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            /* transaction data */</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            const void    *buffer;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            /* offsets from buffer to flat_binder_object structs */</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            const void    *offsets;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        } ptr;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        uint8_t    buf[8];</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    } data;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">};</span></div></div><div>writeTransactionData函数的实现如下:</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">status_t IPCThreadState::writeTransactionData(int32_t cmd, uint32_t binderFlags,</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    int32_t handle, uint32_t code, const Parcel&amp; data, status_t* statusBuffer)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">{</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    binder_transaction_data tr;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    tr.target.handle = handle;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    tr.code = code;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    tr.flags = binderFlags;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    </span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    const status_t err = data.errorCheck();</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    if (err == NO_ERROR) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        tr.data_size = data.ipcDataSize();</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        tr.data.ptr.buffer = data.ipcData();</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        tr.offsets_size = data.ipcObjectsCount()*sizeof(size_t);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        tr.data.ptr.offsets = data.ipcObjects();</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    } else if (statusBuffer) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        tr.flags |= TF_STATUS_CODE;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        *statusBuffer = err;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        tr.data_size = sizeof(status_t);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        tr.data.ptr.buffer = statusBuffer;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        tr.offsets_size = 0;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        tr.data.ptr.offsets = NULL;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    } else {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        return (mLastError = err);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    </span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    mOut.writeInt32(cmd);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    mOut.write(&amp;tr, sizeof(tr));</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    </span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    return NO_ERROR;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">}</span></div></div><div>    注意，这里的cmd为BC_TRANSACTION。这个函数很简单，在这个场景下，就是执行下面语句来初始化本地变量tr:</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">tr.data_size = data.ipcDataSize();</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">tr.data.ptr.buffer = data.ipcData();</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">tr.offsets_size = data.ipcObjectsCount()*sizeof(size_t);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">tr.data.ptr.offsets = data.ipcObjects();</span></div></div><div>回忆一下上面的内容，写入到tr.data.ptr.buffer的内容相当于下面的内容:</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">writeInt32(IPCThreadState::self()-&gt;getStrictModePolicy() |</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">               STRICT_MODE_PENALTY_GATHER);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">writeString16(&quot;android.os.IServiceManager&quot;);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">writeString16(&quot;media.player&quot;);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">writeStrongBinder(new MediaPlayerService());</span></div></div><div>    其中包含了一个Binder实体MediaPlayService，因此需要设置tr.offsets_size就为1，tr.data.ptr.offsets就指向了这个MediaPlayerService的地址在tr.data.ptr.buffer中的偏移量。最后，将tr的内容保存在IPCThreadState的成员变量mOut中。</div><div>    回到IPCThreadState::transact函数中，接下来，(flags &amp; TF_ONE_WAY) == 0 为true，并且reply不为空，所以最终进入到waitForResponse(reply)这条路径来。我们看一下waitForResponse函数的实现:</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">status_t IPCThreadState::waitForResponse(Parcel *reply, status_t *acquireResult)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">{</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    int32_t cmd;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    int32_t err;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    while (1) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        if ((err=talkWithDriver()) &lt; NO_ERROR) break;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        err = mIn.errorCheck();</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        if (err &lt; NO_ERROR) break;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        if (mIn.dataAvail() == 0) continue;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        </span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        cmd = mIn.readInt32();</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        </span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        IF_LOG_COMMANDS() {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            alog &lt;&lt; &quot;Processing waitForResponse Command: &quot;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                &lt;&lt; getReturnString(cmd) &lt;&lt; endl;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        }</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        switch (cmd) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        case BR_TRANSACTION_COMPLETE:</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            if (!reply &amp;&amp; !acquireResult) goto finish;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            break;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        </span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        case BR_DEAD_REPLY:</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            err = DEAD_OBJECT;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            goto finish;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        case BR_FAILED_REPLY:</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            err = FAILED_TRANSACTION;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            goto finish;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        </span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        case BR_ACQUIRE_RESULT:</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                LOG_ASSERT(acquireResult != NULL, &quot;Unexpected brACQUIRE_RESULT&quot;);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                const int32_t result = mIn.readInt32();</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                if (!acquireResult) continue;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                *acquireResult = result ? NO_ERROR : INVALID_OPERATION;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            goto finish;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        </span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        case BR_REPLY:</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                binder_transaction_data tr;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                err = mIn.read(&amp;tr, sizeof(tr));</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                LOG_ASSERT(err == NO_ERROR, &quot;Not enough command data for brREPLY&quot;);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                if (err != NO_ERROR) goto finish;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                if (reply) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                    if ((tr.flags &amp; TF_STATUS_CODE) == 0) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                        reply-&gt;ipcSetDataReference(</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                            reinterpret_cast&lt;const uint8_t*&gt;(tr.data.ptr.buffer),</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                            tr.data_size,</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                            reinterpret_cast&lt;const size_t*&gt;(tr.data.ptr.offsets),</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                            tr.offsets_size/sizeof(size_t),</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                            freeBuffer, this);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                    } else {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                        err = *static_cast&lt;const status_t*&gt;(tr.data.ptr.buffer);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                        freeBuffer(NULL,</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                            reinterpret_cast&lt;const uint8_t*&gt;(tr.data.ptr.buffer),</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                            tr.data_size,</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                            reinterpret_cast&lt;const size_t*&gt;(tr.data.ptr.offsets),</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                            tr.offsets_size/sizeof(size_t), this);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                    }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                } else {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                    freeBuffer(NULL,</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                        reinterpret_cast&lt;const uint8_t*&gt;(tr.data.ptr.buffer),</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                        tr.data_size,</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                        reinterpret_cast&lt;const size_t*&gt;(tr.data.ptr.offsets),</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                        tr.offsets_size/sizeof(size_t), this);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                    continue;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            goto finish;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        default:</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            err = executeCommand(cmd);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            if (err != NO_ERROR) goto finish;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            break;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    }</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">finish:</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    if (err != NO_ERROR) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        if (acquireResult) *acquireResult = err;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        if (reply) reply-&gt;setError(err);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        mLastError = err;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    </span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    return err;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">}</span></div></div><div>    这个函数虽然很长，但是主要调用了talkWithDriver函数来与Binder驱动程序进行交互:</div><div><br/></div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">status_t IPCThreadState::talkWithDriver(bool doReceive)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">{</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    LOG_ASSERT(mProcess-&gt;mDriverFD &gt;= 0, &quot;Binder driver is not opened&quot;);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    </span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    binder_write_read bwr;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    </span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    // Is the read buffer empty?</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    const bool needRead = mIn.dataPosition() &gt;= mIn.dataSize();</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    </span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    // We don't want to write anything if we are still reading</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    // from data left in the input buffer and the caller</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    // has requested to read the next data.</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    const size_t outAvail = (!doReceive || needRead) ? mOut.dataSize() : 0;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    </span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    bwr.write_size = outAvail;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    bwr.write_buffer = (long unsigned int)mOut.data();</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    // This is what we'll read.</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    if (doReceive &amp;&amp; needRead) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        bwr.read_size = mIn.dataCapacity();</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        bwr.read_buffer = (long unsigned int)mIn.data();</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    } else {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        bwr.read_size = 0;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    </span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    IF_LOG_COMMANDS() {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        TextOutput::Bundle _b(alog);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        if (outAvail != 0) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            alog &lt;&lt; &quot;Sending commands to driver: &quot; &lt;&lt; indent;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            const void* cmds = (const void*)bwr.write_buffer;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            const void* end = ((const uint8_t*)cmds)+bwr.write_size;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            alog &lt;&lt; HexDump(cmds, bwr.write_size) &lt;&lt; endl;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            while (cmds &lt; end) cmds = printCommand(alog, cmds);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            alog &lt;&lt; dedent;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        alog &lt;&lt; &quot;Size of receive buffer: &quot; &lt;&lt; bwr.read_size</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            &lt;&lt; &quot;, needRead: &quot; &lt;&lt; needRead &lt;&lt; &quot;, doReceive: &quot; &lt;&lt; doReceive &lt;&lt; endl;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    </span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    // Return immediately if there is nothing to do.</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    if ((bwr.write_size == 0) &amp;&amp; (bwr.read_size == 0)) return NO_ERROR;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    </span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    bwr.write_consumed = 0;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    bwr.read_consumed = 0;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    status_t err;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    do {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        IF_LOG_COMMANDS() {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            alog &lt;&lt; &quot;About to read/write, write size = &quot; &lt;&lt; mOut.dataSize() &lt;&lt; endl;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">#if defined(HAVE_ANDROID_OS)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        if (ioctl(mProcess-&gt;mDriverFD, BINDER_WRITE_READ, &amp;bwr) &gt;= 0)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            err = NO_ERROR;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        else</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            err = -errno;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">#else</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        err = INVALID_OPERATION;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">#endif</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        IF_LOG_COMMANDS() {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            alog &lt;&lt; &quot;Finished read/write, write size = &quot; &lt;&lt; mOut.dataSize() &lt;&lt; endl;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    } while (err == -EINTR);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    </span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    IF_LOG_COMMANDS() {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        alog &lt;&lt; &quot;Our err: &quot; &lt;&lt; (void*)err &lt;&lt; &quot;, write consumed: &quot;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            &lt;&lt; bwr.write_consumed &lt;&lt; &quot; (of &quot; &lt;&lt; mOut.dataSize()</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            &lt;&lt; &quot;), read consumed: &quot; &lt;&lt; bwr.read_consumed &lt;&lt; endl;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    }</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    if (err &gt;= NO_ERROR) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        if (bwr.write_consumed &gt; 0) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            if (bwr.write_consumed &lt; (ssize_t)mOut.dataSize())</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                mOut.remove(0, bwr.write_consumed);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            else</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                mOut.setDataSize(0);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        if (bwr.read_consumed &gt; 0) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            mIn.setDataSize(bwr.read_consumed);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            mIn.setDataPosition(0);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        IF_LOG_COMMANDS() {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            TextOutput::Bundle _b(alog);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            alog &lt;&lt; &quot;Remaining data size: &quot; &lt;&lt; mOut.dataSize() &lt;&lt; endl;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            alog &lt;&lt; &quot;Received commands from driver: &quot; &lt;&lt; indent;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            const void* cmds = mIn.data();</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            const void* end = mIn.data() + mIn.dataSize();</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            alog &lt;&lt; HexDump(cmds, mIn.dataSize()) &lt;&lt; endl;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            while (cmds &lt; end) cmds = printReturnCommand(alog, cmds);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            alog &lt;&lt; dedent;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        return NO_ERROR;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    </span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    return err;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">}</span></div></div><div>    这里doReceive和needRead均为1，有兴趣的读者可以分析自己一下。因此，这里告诉Binder驱动程序，先执行write操作，再执行read操作，下面我们将会看到。</div><div>    最后，通过ioctl(mProcess-&gt;mDriverFD, BINDER_WRITE_RREAD, &amp;bwr)进行到Binder驱动程序的binder_ioctl函数，我们只关注cmd为BINDER_WRITE_READ的逻辑:</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">static long binder_ioctl(struct file *filp, unsigned int cmd, unsigned long arg)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">{</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    int ret;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    struct binder_proc *proc = filp-&gt;private_data;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    struct binder_thread *thread;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    unsigned int size = _IOC_SIZE(cmd);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    void __user *ubuf = (void __user *)arg;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    /*printk(KERN_INFO &quot;binder_ioctl: %d:%d %x %lx\n&quot;, proc-&gt;pid, current-&gt;pid, cmd, arg);*/</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    ret = wait_event_interruptible(binder_user_error_wait, binder_stop_on_user_error &lt; 2);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    if (ret)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        return ret;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    mutex_lock(&amp;binder_lock);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    thread = binder_get_thread(proc);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    if (thread == NULL) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        ret = -ENOMEM;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        goto err;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    }</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    switch (cmd) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    case BINDER_WRITE_READ: {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        struct binder_write_read bwr;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        if (size != sizeof(struct binder_write_read)) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            ret = -EINVAL;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            goto err;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        if (copy_from_user(&amp;bwr, ubuf, sizeof(bwr))) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            ret = -EFAULT;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            goto err;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        if (binder_debug_mask &amp; BINDER_DEBUG_READ_WRITE)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            printk(KERN_INFO &quot;binder: %d:%d write %ld at %08lx, read %ld at %08lx\n&quot;,</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            proc-&gt;pid, thread-&gt;pid, bwr.write_size, bwr.write_buffer, bwr.read_size, bwr.read_buffer);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        if (bwr.write_size &gt; 0) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            ret = binder_thread_write(proc, thread, (void __user *)bwr.write_buffer, bwr.write_size, &amp;bwr.write_consumed);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            if (ret &lt; 0) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                bwr.read_consumed = 0;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                if (copy_to_user(ubuf, &amp;bwr, sizeof(bwr)))</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                    ret = -EFAULT;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                goto err;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        if (bwr.read_size &gt; 0) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            ret = binder_thread_read(proc, thread, (void __user *)bwr.read_buffer, bwr.read_size, &amp;bwr.read_consumed, filp-&gt;f_flags &amp; O_NONBLOCK);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            if (!list_empty(&amp;proc-&gt;todo))</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                wake_up_interruptible(&amp;proc-&gt;wait);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            if (ret &lt; 0) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                if (copy_to_user(ubuf, &amp;bwr, sizeof(bwr)))</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                    ret = -EFAULT;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                goto err;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        if (binder_debug_mask &amp; BINDER_DEBUG_READ_WRITE)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            printk(KERN_INFO &quot;binder: %d:%d wrote %ld of %ld, read return %ld of %ld\n&quot;,</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            proc-&gt;pid, thread-&gt;pid, bwr.write_consumed, bwr.write_size, bwr.read_consumed, bwr.read_size);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        if (copy_to_user(ubuf, &amp;bwr, sizeof(bwr))) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            ret = -EFAULT;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            goto err;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        break;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    ......</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    ret = 0;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">err:</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    ......</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    return ret;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">}</span></div></div><div>    函数首先是将用户传进来的参数拷贝到本地变量struct binder_write_read bwr中去。这里bwr.write_size &gt; 0 为true，因此，进入到binder_thread_write函数中，我们只关注BC_TRANSACTION部分的逻辑:</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">binder_thread_write(struct binder_proc *proc, struct binder_thread *thread,</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                    void __user *buffer, int size, signed long *consumed)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">{</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    uint32_t cmd;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    void __user *ptr = buffer + *consumed;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    void __user *end = buffer + size;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    while (ptr &lt; end &amp;&amp; thread-&gt;return_error == BR_OK) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        if (get_user(cmd, (uint32_t __user *)ptr))</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            return -EFAULT;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        ptr += sizeof(uint32_t);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        if (_IOC_NR(cmd) &lt; ARRAY_SIZE(binder_stats.bc)) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            binder_stats.bc[_IOC_NR(cmd)]++;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            proc-&gt;stats.bc[_IOC_NR(cmd)]++;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            thread-&gt;stats.bc[_IOC_NR(cmd)]++;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        switch (cmd) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            .....</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        case BC_TRANSACTION:</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        case BC_REPLY: {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            struct binder_transaction_data tr;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            if (copy_from_user(&amp;tr, ptr, sizeof(tr)))</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                return -EFAULT;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            ptr += sizeof(tr);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            binder_transaction(proc, thread, &amp;tr, cmd == BC_REPLY);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            break;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        ......</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        *consumed = ptr - buffer;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    return 0;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">}</span></div></div><div><br/></div><div>    首先将用户传进来的transact参数拷贝在本地变量struct binder_transaction_data tr中去，接着调用binder_transaction函数进一步处理，这里我们忽略掉无关的代码:</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">static void</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">binder_transaction(struct binder_proc *proc, struct binder_thread *thread,</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">struct binder_transaction_data *tr, int reply)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">{</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    struct binder_transaction *t;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    struct binder_work *tcomplete;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    size_t *offp, *off_end;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    struct binder_proc *target_proc;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    struct binder_thread *target_thread = NULL;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    struct binder_node *target_node = NULL;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    struct list_head *target_list;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    wait_queue_head_t *target_wait;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    struct binder_transaction *in_reply_to = NULL;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    struct binder_transaction_log_entry *e;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    uint32_t return_error;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        ......</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    if (reply) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">         ......</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    } else {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        if (tr-&gt;target.handle) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            ......</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        } else {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            target_node = binder_context_mgr_node;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            if (target_node == NULL) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                return_error = BR_DEAD_REPLY;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                goto err_no_context_mgr_node;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        ......</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        target_proc = target_node-&gt;proc;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        if (target_proc == NULL) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            return_error = BR_DEAD_REPLY;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            goto err_dead_binder;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        ......</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    if (target_thread) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        ......</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    } else {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        target_list = &amp;target_proc-&gt;todo;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        target_wait = &amp;target_proc-&gt;wait;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    </span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    ......</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    /* TODO: reuse incoming transaction for reply */</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    t = kzalloc(sizeof(*t), GFP_KERNEL);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    if (t == NULL) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        return_error = BR_FAILED_REPLY;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        goto err_alloc_t_failed;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    ......</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    tcomplete = kzalloc(sizeof(*tcomplete), GFP_KERNEL);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    if (tcomplete == NULL) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        return_error = BR_FAILED_REPLY;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        goto err_alloc_tcomplete_failed;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    </span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    ......</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    if (!reply &amp;&amp; !(tr-&gt;flags &amp; TF_ONE_WAY))</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        t-&gt;from = thread;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    else</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        t-&gt;from = NULL;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    t-&gt;sender_euid = proc-&gt;tsk-&gt;cred-&gt;euid;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    t-&gt;to_proc = target_proc;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    t-&gt;to_thread = target_thread;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    t-&gt;code = tr-&gt;code;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    t-&gt;flags = tr-&gt;flags;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    t-&gt;priority = task_nice(current);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    t-&gt;buffer = binder_alloc_buf(target_proc, tr-&gt;data_size,</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        tr-&gt;offsets_size, !reply &amp;&amp; (t-&gt;flags &amp; TF_ONE_WAY));</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    if (t-&gt;buffer == NULL) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        return_error = BR_FAILED_REPLY;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        goto err_binder_alloc_buf_failed;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    t-&gt;buffer-&gt;allow_user_free = 0;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    t-&gt;buffer-&gt;debug_id = t-&gt;debug_id;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    t-&gt;buffer-&gt;transaction = t;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    t-&gt;buffer-&gt;target_node = target_node;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    if (target_node)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        binder_inc_node(target_node, 1, 0, NULL);</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    offp = (size_t *)(t-&gt;buffer-&gt;data + ALIGN(tr-&gt;data_size, sizeof(void *)));</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    if (copy_from_user(t-&gt;buffer-&gt;data, tr-&gt;data.ptr.buffer, tr-&gt;data_size)) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        ......</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        return_error = BR_FAILED_REPLY;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        goto err_copy_data_failed;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    if (copy_from_user(offp, tr-&gt;data.ptr.offsets, tr-&gt;offsets_size)) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        ......</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        return_error = BR_FAILED_REPLY;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        goto err_copy_data_failed;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    ......</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    off_end = (void *)offp + tr-&gt;offsets_size;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    for (; offp &lt; off_end; offp++) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        struct flat_binder_object *fp;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        ......</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        fp = (struct flat_binder_object *)(t-&gt;buffer-&gt;data + *offp);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        switch (fp-&gt;type) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        case BINDER_TYPE_BINDER:</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        case BINDER_TYPE_WEAK_BINDER: {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            struct binder_ref *ref;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            struct binder_node *node = binder_get_node(proc, fp-&gt;binder);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            if (node == NULL) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                node = binder_new_node(proc, fp-&gt;binder, fp-&gt;cookie);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                if (node == NULL) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                    return_error = BR_FAILED_REPLY;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                    goto err_binder_new_node_failed;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                node-&gt;min_priority = fp-&gt;flags &amp; FLAT_BINDER_FLAG_PRIORITY_MASK;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                node-&gt;accept_fds = !!(fp-&gt;flags &amp; FLAT_BINDER_FLAG_ACCEPTS_FDS);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            if (fp-&gt;cookie != node-&gt;cookie) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                ......</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                goto err_binder_get_ref_for_node_failed;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            ref = binder_get_ref_for_node(target_proc, node);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            if (ref == NULL) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                return_error = BR_FAILED_REPLY;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                goto err_binder_get_ref_for_node_failed;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            if (fp-&gt;type == BINDER_TYPE_BINDER)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                fp-&gt;type = BINDER_TYPE_HANDLE;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            else</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                fp-&gt;type = BINDER_TYPE_WEAK_HANDLE;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            fp-&gt;handle = ref-&gt;desc;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            binder_inc_ref(ref, fp-&gt;type == BINDER_TYPE_HANDLE, &amp;thread-&gt;todo);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            ......</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                              </span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        } break;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        ......</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    }</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    if (reply) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        ......</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    } else if (!(t-&gt;flags &amp; TF_ONE_WAY)) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        BUG_ON(t-&gt;buffer-&gt;async_transaction != 0);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        t-&gt;need_reply = 1;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        t-&gt;from_parent = thread-&gt;transaction_stack;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        thread-&gt;transaction_stack = t;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    } else {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        ......</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    t-&gt;work.type = BINDER_WORK_TRANSACTION;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    list_add_tail(&amp;t-&gt;work.entry, target_list);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    tcomplete-&gt;type = BINDER_WORK_TRANSACTION_COMPLETE;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    list_add_tail(&amp;tcomplete-&gt;entry, &amp;thread-&gt;todo);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    if (target_wait)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        wake_up_interruptible(target_wait);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    return;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    ......</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">}</span></div></div><div>    接着，分配了一个待处理事务t和一个待完成工作项tcomplete，并执行初始化工作:</div><div>  </div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">  /* TODO: reuse incoming transaction for reply */</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    t = kzalloc(sizeof(*t), GFP_KERNEL);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    if (t == NULL) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        return_error = BR_FAILED_REPLY;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        goto err_alloc_t_failed;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    ......</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    tcomplete = kzalloc(sizeof(*tcomplete), GFP_KERNEL);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    if (tcomplete == NULL) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        return_error = BR_FAILED_REPLY;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        goto err_alloc_tcomplete_failed;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    </span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    ......</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    if (!reply &amp;&amp; !(tr-&gt;flags &amp; TF_ONE_WAY))</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        t-&gt;from = thread;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    else</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        t-&gt;from = NULL;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    t-&gt;sender_euid = proc-&gt;tsk-&gt;cred-&gt;euid;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    t-&gt;to_proc = target_proc;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    t-&gt;to_thread = target_thread;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    t-&gt;code = tr-&gt;code;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    t-&gt;flags = tr-&gt;flags;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    t-&gt;priority = task_nice(current);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    t-&gt;buffer = binder_alloc_buf(target_proc, tr-&gt;data_size,</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        tr-&gt;offsets_size, !reply &amp;&amp; (t-&gt;flags &amp; TF_ONE_WAY));</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    if (t-&gt;buffer == NULL) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        return_error = BR_FAILED_REPLY;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        goto err_binder_alloc_buf_failed;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    t-&gt;buffer-&gt;allow_user_free = 0;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    t-&gt;buffer-&gt;debug_id = t-&gt;debug_id;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    t-&gt;buffer-&gt;transaction = t;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    t-&gt;buffer-&gt;target_node = target_node;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    if (target_node)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        binder_inc_node(target_node, 1, 0, NULL);</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    offp = (size_t *)(t-&gt;buffer-&gt;data + ALIGN(tr-&gt;data_size, sizeof(void *)));</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    if (copy_from_user(t-&gt;buffer-&gt;data, tr-&gt;data.ptr.buffer, tr-&gt;data_size)) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        ......</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        return_error = BR_FAILED_REPLY;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        goto err_copy_data_failed;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    if (copy_from_user(offp, tr-&gt;data.ptr.offsets, tr-&gt;offsets_size)) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        ......</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        return_error = BR_FAILED_REPLY;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        goto err_copy_data_failed;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    }</span></div></div><div><br/></div><div>    注意，这里的事务t是要交给target_proc处理的，在这个场景下，就是Service Manager了。因此，下面的语句:</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">t-&gt;buffer = binder_alloc_buf(target_proc, tr-&gt;data_size,</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        tr-&gt;offsets_size, !reply &amp;&amp; (t-&gt;flags &amp; TF_ONE_WAY));</span></div></div><div><br/></div><div>    就是在Service Manager的进程空间中分配一块内存来保护用户传进入的参数了:</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">  if (copy_from_user(t-&gt;buffer-&gt;data, tr-&gt;data.ptr.buffer, tr-&gt;data_size)) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        ......</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        return_error = BR_FAILED_REPLY;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        goto err_copy_data_failed;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    if (copy_from_user(offp, tr-&gt;data.ptr.offsets, tr-&gt;offsets_size)) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        ......</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        return_error = BR_FAILED_REPLY;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        goto err_copy_data_failed;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    }</span></div></div><div><br/></div><div>    由于现在target_node要被使用了，增加它的引用计数:</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">if (target_node)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        binder_inc_node(target_node, 1, 0, NULL);</span></div></div><div><br/></div><div>    接下去的for循环，就是用来处理传输数据中的Binder对象了。在我们的场景中，有一个类型为BINDER_TYPE_BINDER的Binder实体MediaPlayerService:</div><div> </div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">   switch (fp-&gt;type) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    case BINDER_TYPE_BINDER:</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    case BINDER_TYPE_WEAK_BINDER: {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    struct binder_ref *ref;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    struct binder_node *node = binder_get_node(proc, fp-&gt;binder);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    if (node == NULL) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        node = binder_new_node(proc, fp-&gt;binder, fp-&gt;cookie);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        if (node == NULL) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            return_error = BR_FAILED_REPLY;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            goto err_binder_new_node_failed;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        node-&gt;min_priority = fp-&gt;flags &amp; FLAT_BINDER_FLAG_PRIORITY_MASK;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        node-&gt;accept_fds = !!(fp-&gt;flags &amp; FLAT_BINDER_FLAG_ACCEPTS_FDS);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    if (fp-&gt;cookie != node-&gt;cookie) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        ......</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        goto err_binder_get_ref_for_node_failed;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    ref = binder_get_ref_for_node(target_proc, node);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    if (ref == NULL) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        return_error = BR_FAILED_REPLY;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        goto err_binder_get_ref_for_node_failed;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    if (fp-&gt;type == BINDER_TYPE_BINDER)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        fp-&gt;type = BINDER_TYPE_HANDLE;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    else</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        fp-&gt;type = BINDER_TYPE_WEAK_HANDLE;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    fp-&gt;handle = ref-&gt;desc;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    binder_inc_ref(ref, fp-&gt;type == BINDER_TYPE_HANDLE, &amp;thread-&gt;todo);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    ......</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                              </span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    } break;</span></div></div><div>    由于是第一次在Binder驱动程序中传输这个MediaPlayerService，调用binder_get_node函数查询这个Binder实体，会返回空，于是binder_new_node在proc中新建一个，下次就可以直接使用了。</div><div>    现在，由于要把这个Binder实体MediaPlayerService交给target_proc，也就是Service Manager来管理，也就是说Serivce Manager要引用这个MediaPlayerService了，于是通过binder_get_ref_for_node为MediaPlayerService创建一个引用，并且通过binder_in_ref来增加这个引用计数，防止还在使用过程当中就被销毁。注意，到了这里的时候，t-&gt;buffer中的flat_binder_obj的type已经改为BINDER_TYPE_HANDLE，handle已经改为ref-&gt;desc，跟原来的不一样了，因为这个flat_binder_obj是最终是要传给Service Manager的，而Service Manager只能够通过句柄值来引用这个Binder实体。</div><div>    最后，把待处理事务加到target_list列表中去:</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">list_add_tail(&amp;t-&gt;work.entry, target_list);</span></div></div><div>    并且把待完成工作项加入到本线程的todo等待执行列表中去。</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">list_add_tail(&amp;tcomplete-&gt;entry, &amp;thread-&gt;todo);</span></div></div><div>    现在目标进程有事情可以做了，于是唤醒他:</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">if(target_wait)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    wake_up_interruptible(target_wait);</span></div></div><div>    这里就是要唤醒Service Manager进程了。回忆一下前面浅谈Service Manager成为Android进程间通信(IPC)机制Binder守护进程之路这篇文章，此时，Service Manager正在binder_thread_read函数中调用wait_event_interruptible进入休眠状态。</div><div>    这里我们先忽略一下Service Manager被唤醒之后的场景，继续MediaPlayerService的启动过程，然后再回来。</div><div>    回到binder_ioctl函数，bwr.read_size &gt; 0为true，于是进入binder_thread_read函数:</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">static int</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">binder_thread_read(struct binder_proc *proc, struct binder_thread *thread,</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                   void  __user *buffer, int size, signed long *consumed, int non_block)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">{</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    void __user *ptr = buffer + *consumed;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    void __user *end = buffer + size;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    int ret = 0;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    int wait_for_proc_work;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    if (*consumed == 0) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        if (put_user(BR_NOOP, (uint32_t __user *)ptr))</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            return -EFAULT;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        ptr += sizeof(uint32_t);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    }</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">retry:</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    wait_for_proc_work = thread-&gt;transaction_stack == NULL &amp;&amp; list_empty(&amp;thread-&gt;todo);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    </span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    .......</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    if (wait_for_proc_work) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        .......</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    } else {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        if (non_block) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            if (!binder_has_thread_work(thread))</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                ret = -EAGAIN;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        } else</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            ret = wait_event_interruptible(thread-&gt;wait, binder_has_thread_work(thread));</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    </span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    ......</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    while (1) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        uint32_t cmd;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        struct binder_transaction_data tr;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        struct binder_work *w;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        struct binder_transaction *t = NULL;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        if (!list_empty(&amp;thread-&gt;todo))</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            w = list_first_entry(&amp;thread-&gt;todo, struct binder_work, entry);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        else if (!list_empty(&amp;proc-&gt;todo) &amp;&amp; wait_for_proc_work)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            w = list_first_entry(&amp;proc-&gt;todo, struct binder_work, entry);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        else {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            if (ptr - buffer == 4 &amp;&amp; !(thread-&gt;looper &amp; BINDER_LOOPER_STATE_NEED_RETURN)) /* no data added */</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                goto retry;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            break;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        }</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        if (end - ptr &lt; sizeof(tr) + 4)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            break;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        switch (w-&gt;type) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        ......</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        case BINDER_WORK_TRANSACTION_COMPLETE: {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            cmd = BR_TRANSACTION_COMPLETE;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            if (put_user(cmd, (uint32_t __user *)ptr))</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                return -EFAULT;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            ptr += sizeof(uint32_t);</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            binder_stat_br(proc, thread, cmd);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            if (binder_debug_mask &amp; BINDER_DEBUG_TRANSACTION_COMPLETE)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                printk(KERN_INFO &quot;binder: %d:%d BR_TRANSACTION_COMPLETE\n&quot;,</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                proc-&gt;pid, thread-&gt;pid);</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            list_del(&amp;w-&gt;entry);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            kfree(w);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            binder_stats.obj_deleted[BINDER_STAT_TRANSACTION_COMPLETE]++;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                                               } break;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        ......</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        }</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        if (!t)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            continue;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        ......</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    }</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">done:</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    ......</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    return 0;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">}</span></div></div><div>    </div><div>   这里，thread-&gt;transaction_stack和thread-&gt;todo均不为空，于是wait_for_proc_work为false，由于binder_has_thread_work的时候，返回true，这里因为thread-&gt;todo不为空，因此，线程虽然调用wait_event_interruptible，但是不会睡眠，于是继续往下执行。</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">if (!list_empty(&amp;thread-&gt;todo))</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">     w = list_first_entry(&amp;thread-&gt;todo, struct binder_work, entry);</span></div></div><div>    w-&gt;type为BINDER_WORK_TRANSACTION_COMPLETE，这是在上面的binder_transaction函数设置的，于是执行:</div><div>  </div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">  switch (w-&gt;type) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    ......</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    case BINDER_WORK_TRANSACTION_COMPLETE: {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    cmd = BR_TRANSACTION_COMPLETE;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    if (put_user(cmd, (uint32_t __user *)ptr))</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        return -EFAULT;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    ptr += sizeof(uint32_t);</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        ......</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    list_del(&amp;w-&gt;entry);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    kfree(w);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            </span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    } break;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    ......</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    }</span></div></div><div>    这里就将w从thread-&gt;todo删除了。由于这里t为空，重新执行while循环，这时由于已经没有事情可以做了，最后就返回到binder_ioctl函数中。注意，这里一共往用户传进来的缓冲区buffer写入了两个整数，分别是BR_NOOP和BR_TRANSACTION_COMPLETE。</div><div>    binder_ioctl函数返回到用户空间之前，把数据消耗情况拷贝回用户空间中:</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">if (copy_to_user(ubuf, &amp;bwr, sizeof(bwr))) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    ret = -EFAULT;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    goto err;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">}</span></div></div><div>    最后返回到IPCThreadState::talkWithDriver函数中，执行下面语句:</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco;">   if (err &gt;= NO_ERROR) {</span></div><div><span style="font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;">        if (bwr.write_consumed &gt; 0) {</span></div><div><span style="font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;">            if (bwr.write_consumed &lt; mOut.dataSize())</span></div><div><span style="font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;">                mOut.remove(0, bwr.write_consumed);</span></div><div><span style="font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;">            else</span></div><div><span style="font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;">                mOut.setDataSize(0);</span></div><div><span style="font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;">        }</span></div><div><span style="font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;">        if (bwr.read_consumed &gt; 0) {</span></div><div><span style="font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;">            mIn.setDataSize(bwr.read_consumed);</span></div><div><span style="font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;">            mIn.setDataPosition(0);</span></div><div><span style="font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;">        }</span></div><div><span style="font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;">        IF_LOG_COMMANDS() {</span></div><div><span style="font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;">            TextOutput::Bundle _b(alog);</span></div><div><span style="font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;">            alog &lt;&lt; &quot;Remaining data size: &quot; &lt;&lt; mOut.dataSize() &lt;&lt; endl;</span></div><div><span style="font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;">            alog &lt;&lt; &quot;Received commands from driver: &quot; &lt;&lt; indent;</span></div><div><span style="font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;">            const void* cmds = mIn.data();</span></div><div><span style="font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;">            const void* end = mIn.data() + mIn.dataSize();</span></div><div><span style="font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;">            alog &lt;&lt; HexDump(cmds, mIn.dataSize()) &lt;&lt; endl;</span></div><div><span style="font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;">            while (cmds &lt; end) cmds = printReturnCommand(alog, cmds);</span></div><div><span style="font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;">            alog &lt;&lt; dedent;</span></div><div><span style="font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;">        }</span></div><div><span style="font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;">        return NO_ERROR;</span></div><div><span style="font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;">    }</span></div></div><div><br/></div><div>    首先是把mOut的数据清空</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">mOut.setDataSize(0);</span></div></div><div>    然后设置已经读取的内容的大小:</div><div> </div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    mIn.setDataSize(bwr.read_consumed);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    mIn.setDataPosition(0);</span></div></div><div>    然后返回到IPCThreadState::waitForResponse函数中。在IPCThreadState::waitForResponse函数，先是从mIn读出一个整数，这个便是BR_NOOP了，这是一个空操作，什么也不做。然后继续进入IPCThreadState::talkWithDriver函数中。</div><div>    这时候，下面语句执行后:</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">const bool needRead = mIn.dataPosition() &gt;= mIn.dataSize();</span></div></div><div>    needRead为false，因为在mIn中，尚有一个整数BR_TRANSACTION_COMPLETE未读出。</div><div>    这时候，下面语句执行后:</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">const size_t outAvail = (!doReceive || needRead)? mOut.dataSize():0;</span></div></div><div>    outAvail等于0。因此，最后bwr.write_size和bwr.read_size均为0，IPCThreadState::talkWithDriver函数什么也不做，直接返回IPCThreadState::waitForResponse函数中。在IPCThreadState::waitForResponse函数，又继续从mIn读出一个整数，这个便是BR_TRANSACTION_COMPLETE:</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">switch (cmd) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">case BR_TRANSACTION_COMPLETE:</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">       if (!reply &amp;&amp; !acquireResult) goto finish;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">       break;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">......</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">}</span></div></div><div>    reply不为NULL，因此，IPCThreadState::waitForResponse的循环没有结束，继续执行，又进入到IPCThreadState::talkWithDriver中。</div><div>    这次，needRead就为true了，而outAvail仍为0，所以bwr.read_size不为0，bwr.write_size为0.于是通过:</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">ioctl(mProcess-&gt;mDriverFD, BINDER_WRITE_READ, &amp;bwr);</span></div></div><div>    进入到Binder驱动程序中的binder_ioctl函数中。由于bwr.write_size为0，bwr.read_size不为0，这次直接就进入到binder_thread_read函数中。这时候，thread-&gt;transaction_stack不等于0，但是thread-&gt;todo为空，于是线程就通过:</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">wait_event_interruptible(thread-&gt;wait, binder_has_thread_work(thread));</span></div></div><div>    进入睡眠状态，等待Service Manager来唤醒了。</div><div><span style="background-color: rgb(255, 250, 165);-evernote-highlight:true;">问题：IPCThreadState的成员变量mIn是如何读入数据的？</span></div><div><span style="background-color: rgb(255, 250, 165);-evernote-highlight:true;">答:IPCThreadState将mIn.data()这个方法，将放到bwr的readBuff中，用来承载binder_transaction_data数据，传递到binder驱动层，binder驱动层会将底层的binder_transaction_data数据给返回来。</span></div><div>    现在，我们可以回到Service Manager被唤醒的过程了。我们接着前面浅谈Service Manager成为Android进程间通信(IPC)机制Binder守护进程之路这篇文章最后，继续描述，Service Manager正在binder_thread_read函数中调用wait_event_interruptible_exclusive进入休眠状态。上面被MediaPlayerService启动后进程唤醒后，继续执行binder_thread_read函数:</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">static int</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">binder_thread_read(struct binder_proc *proc, struct binder_thread *thread,</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                   void  __user *buffer, int size, signed long *consumed, int non_block)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">{</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    void __user *ptr = buffer + *consumed;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    void __user *end = buffer + size;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    int ret = 0;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    int wait_for_proc_work;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    if (*consumed == 0) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        if (put_user(BR_NOOP, (uint32_t __user *)ptr))</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            return -EFAULT;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        ptr += sizeof(uint32_t);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    }</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">retry:</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    wait_for_proc_work = thread-&gt;transaction_stack == NULL &amp;&amp; list_empty(&amp;thread-&gt;todo);</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    ......</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    if (wait_for_proc_work) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        ......</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        if (non_block) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            if (!binder_has_proc_work(proc, thread))</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                ret = -EAGAIN;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        } else</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            ret = wait_event_interruptible_exclusive(proc-&gt;wait, binder_has_proc_work(proc, thread));</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    } else {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        ......</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    </span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    ......</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    while (1) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        uint32_t cmd;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        struct binder_transaction_data tr;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        struct binder_work *w;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        struct binder_transaction *t = NULL;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        if (!list_empty(&amp;thread-&gt;todo))</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            w = list_first_entry(&amp;thread-&gt;todo, struct binder_work, entry);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        else if (!list_empty(&amp;proc-&gt;todo) &amp;&amp; wait_for_proc_work)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            w = list_first_entry(&amp;proc-&gt;todo, struct binder_work, entry);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        else {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            if (ptr - buffer == 4 &amp;&amp; !(thread-&gt;looper &amp; BINDER_LOOPER_STATE_NEED_RETURN)) /* no data added */</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                goto retry;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            break;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        }</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        if (end - ptr &lt; sizeof(tr) + 4)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            break;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        switch (w-&gt;type) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        case BINDER_WORK_TRANSACTION: {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            t = container_of(w, struct binder_transaction, work);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                                      } break;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        ......</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        }</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        if (!t)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            continue;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        BUG_ON(t-&gt;buffer == NULL);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        if (t-&gt;buffer-&gt;target_node) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            struct binder_node *target_node = t-&gt;buffer-&gt;target_node;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            tr.target.ptr = target_node-&gt;ptr;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            tr.cookie =  target_node-&gt;cookie;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            ......</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            cmd = BR_TRANSACTION;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        } else {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            ......</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        tr.code = t-&gt;code;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        tr.flags = t-&gt;flags;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        tr.sender_euid = t-&gt;sender_euid;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        if (t-&gt;from) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            struct task_struct *sender = t-&gt;from-&gt;proc-&gt;tsk;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            tr.sender_pid = task_tgid_nr_ns(sender, current-&gt;nsproxy-&gt;pid_ns);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        } else {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            tr.sender_pid = 0;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        }</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        tr.data_size = t-&gt;buffer-&gt;data_size;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        tr.offsets_size = t-&gt;buffer-&gt;offsets_size;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        tr.data.ptr.buffer = (void *)t-&gt;buffer-&gt;data + proc-&gt;user_buffer_offset;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        tr.data.ptr.offsets = tr.data.ptr.buffer + ALIGN(t-&gt;buffer-&gt;data_size, sizeof(void *));</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        if (put_user(cmd, (uint32_t __user *)ptr))</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            return -EFAULT;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        ptr += sizeof(uint32_t);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        if (copy_to_user(ptr, &amp;tr, sizeof(tr)))</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            return -EFAULT;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        ptr += sizeof(tr);</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        ......</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        list_del(&amp;t-&gt;work.entry);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        t-&gt;buffer-&gt;allow_user_free = 1;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        if (cmd == BR_TRANSACTION &amp;&amp; !(t-&gt;flags &amp; TF_ONE_WAY)) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            t-&gt;to_parent = thread-&gt;transaction_stack;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            t-&gt;to_thread = thread;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            thread-&gt;transaction_stack = t;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        } else {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            t-&gt;buffer-&gt;transaction = NULL;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            kfree(t);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            binder_stats.obj_deleted[BINDER_STAT_TRANSACTION]++;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        break;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    }</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">done:</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    ......</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    return 0;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">}</span></div></div><div>    Service Manager被唤醒之后，就进入while循环开始处理事务了。这里wait_for_proc_work等于1，并且proc-&gt;todo不为空，所以从proc-&gt;todo列表中得到第一个工作项:</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">w = list_first_entry(&amp;proc-&gt;todo, struct binder_work, entry);</span></div></div><div>    从上面的描述中，我们知道，这个工作项的类型为BINDER_WORK_TRANSACTION，于是通过下面语句得到事务项:</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">t = container_of(w, struct binder_transaction, work);</span></div></div><div>    接着就是把事务项t中的数据拷贝到本地局部变量struct binder_transaction_data tr中去了:</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">if (t-&gt;buffer-&gt;target_node) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    struct binder_node *target_node = t-&gt;buffer-&gt;target_node;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    tr.target.ptr = target_node-&gt;ptr;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    tr.cookie =  target_node-&gt;cookie;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    ......</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    cmd = BR_TRANSACTION;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">} else {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    ......</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">}</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">tr.code = t-&gt;code;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">tr.flags = t-&gt;flags;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">tr.sender_euid = t-&gt;sender_euid;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">if (t-&gt;from) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    struct task_struct *sender = t-&gt;from-&gt;proc-&gt;tsk;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    tr.sender_pid = task_tgid_nr_ns(sender, current-&gt;nsproxy-&gt;pid_ns);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">} else {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    tr.sender_pid = 0;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">}</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">tr.data_size = t-&gt;buffer-&gt;data_size;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">tr.offsets_size = t-&gt;buffer-&gt;offsets_size;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">tr.data.ptr.buffer = (void *)t-&gt;buffer-&gt;data + proc-&gt;user_buffer_offset;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">tr.data.ptr.offsets = tr.data.ptr.buffer + ALIGN(t-&gt;buffer-&gt;data_size, sizeof(void *));</span></div></div><div>    这里有一个非常重要的地方，是Binder进程间通信机制的精髓所在:</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">tr.data.ptr.buffer = (void *)t-&gt;buffer-&gt;data + proc-&gt;user_buffer_offset;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">tr.data.ptr.offsets = tr.data.ptr.buffer + ALIGN(t-&gt;buffer-&gt;data_size, sizeof(void *));</span></div></div><div>    t-&gt;buffer-&gt;data所指向的地址是内核空间的，现在要把数据返回给Service Manager进程的用户空间，而Service Manager进程的用户空间是不能返回内核空间的数据的，所以这里要做一下处理。怎么处理呢？我们在学面向对象的内容搬出去，对象的拷贝有深拷贝和浅拷贝之分，深拷贝是把另外分配一块新内存，然后把原始对象的内容搬过去，浅拷贝是并没有为新对象分配一块新空间，而只是分配一个引用，而这个引用指向原始对象。Binder机制用的类似浅拷贝的方法，通过在用户空间分配一个虚拟地址，然后让这个用户空间虚拟地址与t-&gt;buffer-&gt;data这个内核空间虚拟地址指向同一个物理地址，这样就可以实现浅拷贝了。怎么样用户空间和内核空间的虚拟地址同时指向同一个物理地址呢？请参考前面一篇文章浅谈Service Manager成为Android进程间通信(IPC)机制Binder守护进程之路，那里有详细的描述。这里只要将t-&gt;buffer-&gt;data加上偏移值proc-&gt;user_buffer_offset就可以得到t-&gt;buffer-&gt;data对应的用户空间虚拟地址了。调整了tr.data.ptr.buffer的值之后，不要忘记也要一起调整tr.data.ptr.offsets的值。</div><div>    接着就是把tr的内容拷贝到用户传进来的缓冲区中去了，指针ptr指向这个用户缓冲区的地址:</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">if (put_user(cmd, (uint32_t __user *)ptr))</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    return -EFAULT;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">ptr += sizeof(uint32_t);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">if (copy_to_user(ptr, &amp;tr, sizeof(tr)))</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    return -EFAULT;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">ptr += sizeof(tr);</span></div></div><div>    这里可以看出，这里只对作tr.data.ptr.buffer和tr.data.ptr.offsets的内容作了浅拷贝。</div><div>    最后，由于已经处理了这个事务，要把它从todo列表中删除:</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">list_del(&amp;t-&gt;work.entry);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">t-&gt;buffer-&gt;allow_user_free = 1;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">if (cmd == BR_TRANSACTION &amp;&amp; !(t-&gt;flags &amp; TF_ONE_WAY)) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    t-&gt;to_parent = thread-&gt;transaction_stack;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    t-&gt;to_thread = thread;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    thread-&gt;transaction_stack = t;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">} else {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    t-&gt;buffer-&gt;transaction = NULL;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    kfree(t);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    binder_stats.obj_deleted[BINDER_STAT_TRANSACTION]++;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">}</span></div></div><div>    注意，这里的cmd==BR_TRANSACTION&amp;&amp;!(t-&gt;flags &amp;&amp; TF_ONE_WAY)为true，表明这个事务虽然在驱动程序中已经处理完了，但是它仍然要等待Service Manager完成之后，给驱动程序一个确认，也就是需要等待回复，于是把当前事务t放在<span style="font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">thread-&gt;transaction_stack队列的头部:</span></div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;">t-&gt;to_parent = thread-&gt;transaction_stack;</span></div><div><span style="font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;">t-&gt;to_thread = thread;</span></div><div><span style="font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;">thread-&gt;transaction_stack = t; </span></div></div><div>   如果cmd==BR_TRANSACTION&amp;&amp;!(t-&gt;flags &amp;&amp; TF_ONE_WAY)为false，那么就不需要等待回复了，直接把事务t删掉。</div><div>    这个while最后通过一个break跳了出来，最后返回到binder_ioctl函数中:</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">static long binder_ioctl(struct file *filp, unsigned int cmd, unsigned long arg)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">{</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    int ret;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    struct binder_proc *proc = filp-&gt;private_data;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    struct binder_thread *thread;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    unsigned int size = _IOC_SIZE(cmd);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    void __user *ubuf = (void __user *)arg;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    ......</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    switch (cmd) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    case BINDER_WRITE_READ: {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        struct binder_write_read bwr;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        if (size != sizeof(struct binder_write_read)) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            ret = -EINVAL;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            goto err;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        if (copy_from_user(&amp;bwr, ubuf, sizeof(bwr))) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            ret = -EFAULT;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            goto err;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        ......</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        if (bwr.read_size &gt; 0) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            ret = binder_thread_read(proc, thread, (void __user *)bwr.read_buffer, bwr.read_size, &amp;bwr.read_consumed, filp-&gt;f_flags &amp; O_NONBLOCK);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            if (!list_empty(&amp;proc-&gt;todo))</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                wake_up_interruptible(&amp;proc-&gt;wait);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            if (ret &lt; 0) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                if (copy_to_user(ubuf, &amp;bwr, sizeof(bwr)))</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                    ret = -EFAULT;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                goto err;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        ......</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        if (copy_to_user(ubuf, &amp;bwr, sizeof(bwr))) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            ret = -EFAULT;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            goto err;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        break;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    ......</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    default:</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        ret = -EINVAL;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        goto err;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    ret = 0;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">err:</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    ......</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    return ret;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">}</span></div></div><div>    从binder_thread_read返回来后，再看看proc-&gt;todo是否还有事务等待处理，如果是，就把睡眠在proc-&gt;wait队列的线程唤醒来处理。最后，把本地变量struct binder_write_read bwr的内容拷贝回到用户传进来的缓冲区中，就返回了。</div><div>    这里就是返回到frameworks/base/cmds/servicemanager/binder.c文件中的binder_loop函数了:</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">void binder_loop(struct binder_state *bs, binder_handler func)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">{</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    int res;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    struct binder_write_read bwr;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    unsigned readbuf[32];</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    bwr.write_size = 0;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    bwr.write_consumed = 0;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    bwr.write_buffer = 0;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    </span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    readbuf[0] = BC_ENTER_LOOPER;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    binder_write(bs, readbuf, sizeof(unsigned));</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    for (;;) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        bwr.read_size = sizeof(readbuf);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        bwr.read_consumed = 0;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        bwr.read_buffer = (unsigned) readbuf;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        res = ioctl(bs-&gt;fd, BINDER_WRITE_READ, &amp;bwr);</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        if (res &lt; 0) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            LOGE(&quot;binder_loop: ioctl failed (%s)\n&quot;, strerror(errno));</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            break;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        }</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        res = binder_parse(bs, 0, readbuf, bwr.read_consumed, func);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        if (res == 0) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            LOGE(&quot;binder_loop: unexpected reply?!\n&quot;);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            break;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        if (res &lt; 0) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            LOGE(&quot;binder_loop: io error %d %s\n&quot;, res, strerror(errno));</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            break;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">}</span></div></div><div>    返回的数据都放在readbuf中，接着调用binder_parse进行解析:</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">int binder_parse(struct binder_state *bs, struct binder_io *bio,</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                 uint32_t *ptr, uint32_t size, binder_handler func)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">{</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    int r = 1;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    uint32_t *end = ptr + (size / 4);</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    while (ptr &lt; end) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        uint32_t cmd = *ptr++;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        ......</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        case BR_TRANSACTION: {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            struct binder_txn *txn = (void *) ptr;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            if ((end - ptr) * sizeof(uint32_t) &lt; sizeof(struct binder_txn)) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                LOGE(&quot;parse: txn too small!\n&quot;);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                return -1;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            binder_dump_txn(txn);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            if (func) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                unsigned rdata[256/4];</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                struct binder_io msg;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                struct binder_io reply;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                int res;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                bio_init(&amp;reply, rdata, sizeof(rdata), 4);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                bio_init_from_txn(&amp;msg, txn);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                res = func(bs, txn, &amp;msg, &amp;reply);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                binder_send_reply(bs, &amp;reply, txn-&gt;data, res);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            ptr += sizeof(*txn) / sizeof(uint32_t);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            break;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                             }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        ......</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        default:</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            LOGE(&quot;parse: OOPS %d\n&quot;, cmd);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            return -1;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    }</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    return r;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">}</span></div></div><div>    首先把Binder驱动程序读出来的数据转换为一个struct binder_txn结构体，保存在txn本地变量中，struct binder_txn定义在frameworks/base/cmds/servicemanager/binder.h文件中：</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">struct binder_txn</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">{</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    void *target;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    void *cookie;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    uint32_t code;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    uint32_t flags;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    uint32_t sender_pid;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    uint32_t sender_euid;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    uint32_t data_size;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    uint32_t offs_size;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    void *data;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    void *offs;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">};</span></div></div><div>    函数中还用到了另一个数据结构体struct binder_io，也是定义在frameworks/base/cmds/servicemanager/binder.h文件中:</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">struct binder_io</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">{</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    char *data;            /* pointer to read/write from */</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    uint32_t *offs;        /* array of offsets */</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    uint32_t data_avail;   /* bytes available in data buffer */</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    uint32_t offs_avail;   /* entries available in offsets array */</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    char *data0;           /* start of data buffer */</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    uint32_t *offs0;       /* start of offsets buffer */</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    uint32_t flags;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    uint32_t unused;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">};</span></div></div><div>    接着往下看，函数调bio_init来初始化reply变量:</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">void bio_init(struct binder_io *bio, void *data,</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">              uint32_t maxdata, uint32_t maxoffs)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">{</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    uint32_t n = maxoffs * sizeof(uint32_t);</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    if (n &gt; maxdata) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        bio-&gt;flags = BIO_F_OVERFLOW;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        bio-&gt;data_avail = 0;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        bio-&gt;offs_avail = 0;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        return;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    }</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    bio-&gt;data = bio-&gt;data0 = data + n;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    bio-&gt;offs = bio-&gt;offs0 = data;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    bio-&gt;data_avail = maxdata - n;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    bio-&gt;offs_avail = maxoffs;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    bio-&gt;flags = 0;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">}</span></div></div><div>    接着又调用bio_init_from_txn来初始化msg变量:</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">void bio_init_from_txn(struct binder_io *bio, struct binder_txn *txn)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">{</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    bio-&gt;data = bio-&gt;data0 = txn-&gt;data;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    bio-&gt;offs = bio-&gt;offs0 = txn-&gt;offs;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    bio-&gt;data_avail = txn-&gt;data_size;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    bio-&gt;offs_avail = txn-&gt;offs_size / 4;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    bio-&gt;flags = BIO_F_SHARED;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">}</span></div></div><div>    最后，真正进行处理的函数是从参数中传进来的函数指针func，这里就是定义在framworks/base/cmds/servicemanager/service_manager.c文件中的svcmgr_handler函数:</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">int svcmgr_handler(struct binder_state *bs,</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                   struct binder_txn *txn,</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                   struct binder_io *msg,</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                   struct binder_io *reply)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">{</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    struct svcinfo *si;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    uint16_t *s;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    unsigned len;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    void *ptr;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    uint32_t strict_policy;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    if (txn-&gt;target != svcmgr_handle)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        return -1;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    // Equivalent to Parcel::enforceInterface(), reading the RPC</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    // header with the strict mode policy mask and the interface name.</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    // Note that we ignore the strict_policy and don't propagate it</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    // further (since we do no outbound RPCs anyway).</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    strict_policy = bio_get_uint32(msg);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    s = bio_get_string16(msg, &amp;len);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    if ((len != (sizeof(svcmgr_id) / 2)) ||</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        memcmp(svcmgr_id, s, sizeof(svcmgr_id))) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            fprintf(stderr,&quot;invalid id %s\n&quot;, str8(s));</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            return -1;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    }</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    switch(txn-&gt;code) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    ......</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    case SVC_MGR_ADD_SERVICE:</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        s = bio_get_string16(msg, &amp;len);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        ptr = bio_get_ref(msg);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        if (do_add_service(bs, s, len, ptr, txn-&gt;sender_euid))</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            return -1;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        break;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    ......</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    }</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    bio_put_uint32(reply, 0);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    return 0;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">}</span></div></div><div>    回忆一下，在BpServiceManager::addService时，传给Binder驱动程序的参数为:</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">writeInt32(IPCThreadState::self()-&gt;getStrictModePolicy() | STRICT_MODE_PENALTY_GATHER);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">writeString16(&quot;android.os.IServiceManager&quot;);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">writeString16(&quot;media.player&quot;);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">writeStrongBinder(new MediaPlayerService());</span></div></div><div>这里的语句：</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">strict_policy = bio_get_uint32(msg);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">s = bio_get_string16(msg, &amp;len);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">s = bio_get_string16(msg, &amp;len);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">ptr = bio_get_ref(msg);</span></div></div><div>    就是依次把它们读取出来了，这里，我们只要看一下bio_get_ref的实现。先看一个数据结构struct binder_obj的定义:</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">struct binder_object</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">{</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    uint32_t type;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    uint32_t flags;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    void *pointer;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    void *cookie;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">};</span></div></div><div>    这个结构体其实就是对于struct flat_binder_obj的。</div><div>    接着看bio_get_ref实现:</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">void *bio_get_ref(struct binder_io *bio)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">{</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    struct binder_object *obj;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    obj = _bio_get_obj(bio);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    if (!obj)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        return 0;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    if (obj-&gt;type == BINDER_TYPE_HANDLE)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        return obj-&gt;pointer;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    return 0;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">}</span></div></div><div>    _bio_get_obj这个函数就不跟进去看了，它的作用就是从binder_io中取得第一个还没有取获取过得binder_object。在这个场景下，就是我们最开始传进来代表MediaPlayerService的flat_binder_obj了，这个原始的flat_binder_obj的type为BINDER_TYPE_BINDER，binder为指向MediaPlayerService的弱引用的地址。在前面我们说过，在Binder驱动程序里面，会把这个flat_binder_obj的type改为BINDER_TYPE_HANDLE，handle改为一个句柄值。这里的handle值就等于obj-&gt;pointer的值。</div><div>    回到svcmgr_handle函数，调用do_add_service进一步处理:</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">int do_add_service(struct binder_state *bs,</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                   uint16_t *s, unsigned len,</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                   void *ptr, unsigned uid)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">{</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    struct svcinfo *si;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">//    LOGI(&quot;add_service('%s',%p) uid=%d\n&quot;, str8(s), ptr, uid);</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    if (!ptr || (len == 0) || (len &gt; 127))</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        return -1;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    if (!svc_can_register(uid, s)) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        LOGE(&quot;add_service('%s',%p) uid=%d - PERMISSION DENIED\n&quot;,</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">             str8(s), ptr, uid);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        return -1;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    }</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    si = find_svc(s, len);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    if (si) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        if (si-&gt;ptr) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            LOGE(&quot;add_service('%s',%p) uid=%d - ALREADY REGISTERED\n&quot;,</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                 str8(s), ptr, uid);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            return -1;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        si-&gt;ptr = ptr;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    } else {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        si = malloc(sizeof(*si) + (len + 1) * sizeof(uint16_t));</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        if (!si) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            LOGE(&quot;add_service('%s',%p) uid=%d - OUT OF MEMORY\n&quot;,</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                 str8(s), ptr, uid);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            return -1;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        si-&gt;ptr = ptr;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        si-&gt;len = len;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        memcpy(si-&gt;name, s, (len + 1) * sizeof(uint16_t));</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        si-&gt;name[len] = '\0';</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        si-&gt;death.func = svcinfo_death;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        si-&gt;death.ptr = si;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        si-&gt;next = svclist;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        svclist = si;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    }</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    binder_acquire(bs, ptr);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    binder_link_to_death(bs, ptr, &amp;si-&gt;death);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    return 0;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">}</span></div></div><div>    这个函数的实现很简单，就是把MediaPlayerService这个Binder实体的引用写到一个struct svcinfo结构体中，主要是它的名称和句柄值，然后插入到链接svclist的头部去。这样，Client来向Service Manager查询服务接口时，只要给定服务名称，Service Manager就可以返回相应的句柄值了。</div><div>    这个函数执行完成后，返回到svmgr_handle函数，函数的最后，将一个错误码0写到reply变量中去，表示一切正常:</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">bio_put_uint32(reply, 0);</span></div></div><div>    svcmgr_handler函数执行后，返回到binder_parse函数，执行下面语句:</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">binder_send_reply(bs, &amp;reply, txn-&gt;data, res);</span></div></div><div>    我们看一下binder_send_reply的实现，从函数名就可以猜到它要做什么了，告诉Binder驱动程序，它完成了Binder驱动程序交给他的任务了。</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">void binder_send_reply(struct binder_state *bs,</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                       struct binder_io *reply,</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                       void *buffer_to_free,</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                       int status)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">{</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    struct {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        uint32_t cmd_free;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        void *buffer;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        uint32_t cmd_reply;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        struct binder_txn txn;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    } __attribute__((packed)) data;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    data.cmd_free = BC_FREE_BUFFER;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    data.buffer = buffer_to_free;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    data.cmd_reply = BC_REPLY;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    data.txn.target = 0;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    data.txn.cookie = 0;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    data.txn.code = 0;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    if (status) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        data.txn.flags = TF_STATUS_CODE;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        data.txn.data_size = sizeof(int);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        data.txn.offs_size = 0;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        data.txn.data = &amp;status;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        data.txn.offs = 0;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    } else {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        data.txn.flags = 0;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        data.txn.data_size = reply-&gt;data - reply-&gt;data0;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        data.txn.offs_size = ((char*) reply-&gt;offs) - ((char*) reply-&gt;offs0);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        data.txn.data = reply-&gt;data0;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        data.txn.offs = reply-&gt;offs0;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    binder_write(bs, &amp;data, sizeof(data));</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">}</span></div></div><div>    从这里可以看出，binder_send_reply告诉Binder驱动程序执行BC_FREE_BUFFER和BC_REPLY命令，前者释放之前在binder_transaction分配的空间，地址为buffer_to_free，buffer_to_free这个地址是Binder驱动程序把自己在内核空间用的地址转换成用户空间地址再传给Service Manager的，所以Binder驱动程序拿到这个地址后，知道怎么样释放这个空间:后者告诉MediaPlayerService，它的addService操作已经完成了，错误码是0，保存在data.txn.data中。</div><div>    再来看binder_write函数:</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">int binder_write(struct binder_state *bs, void *data, unsigned len)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">{</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    struct binder_write_read bwr;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    int res;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    bwr.write_size = len;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    bwr.write_consumed = 0;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    bwr.write_buffer = (unsigned) data;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    bwr.read_size = 0;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    bwr.read_consumed = 0;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    bwr.read_buffer = 0;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    res = ioctl(bs-&gt;fd, BINDER_WRITE_READ, &amp;bwr);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    if (res &lt; 0) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        fprintf(stderr,&quot;binder_write: ioctl failed (%s)\n&quot;,</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                strerror(errno));</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    return res;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">}</span></div></div><div>    这里可以看出，只要写操作，没有读操作，即read_size为0。</div><div>    这里又是一个ioctl的BINDER_WRITE_READ操作。直入到驱动程序的binder_ioctl函数后，执行BINDER_WRITE_READ命令，这里就不累赘了。</div><div>    最后，从binder_ioctl执行到binder_thread_write函数，我们首先第一个命令BC_FREE_BUFFER:</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">int</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">binder_thread_write(struct binder_proc *proc, struct binder_thread *thread,</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                    void __user *buffer, int size, signed long *consumed)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">{</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    uint32_t cmd;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    void __user *ptr = buffer + *consumed;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    void __user *end = buffer + size;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    while (ptr &lt; end &amp;&amp; thread-&gt;return_error == BR_OK) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        if (get_user(cmd, (uint32_t __user *)ptr))</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            return -EFAULT;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        ptr += sizeof(uint32_t);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        if (_IOC_NR(cmd) &lt; ARRAY_SIZE(binder_stats.bc)) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            binder_stats.bc[_IOC_NR(cmd)]++;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            proc-&gt;stats.bc[_IOC_NR(cmd)]++;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            thread-&gt;stats.bc[_IOC_NR(cmd)]++;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        switch (cmd) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        ......</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        case BC_FREE_BUFFER: {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            void __user *data_ptr;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            struct binder_buffer *buffer;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            if (get_user(data_ptr, (void * __user *)ptr))</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                return -EFAULT;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            ptr += sizeof(void *);</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            buffer = binder_buffer_lookup(proc, data_ptr);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            if (buffer == NULL) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                binder_user_error(&quot;binder: %d:%d &quot;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                    &quot;BC_FREE_BUFFER u%p no match\n&quot;,</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                    proc-&gt;pid, thread-&gt;pid, data_ptr);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                break;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            if (!buffer-&gt;allow_user_free) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                binder_user_error(&quot;binder: %d:%d &quot;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                    &quot;BC_FREE_BUFFER u%p matched &quot;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                    &quot;unreturned buffer\n&quot;,</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                    proc-&gt;pid, thread-&gt;pid, data_ptr);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                break;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            if (binder_debug_mask &amp; BINDER_DEBUG_FREE_BUFFER)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                printk(KERN_INFO &quot;binder: %d:%d BC_FREE_BUFFER u%p found buffer %d for %s transaction\n&quot;,</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                proc-&gt;pid, thread-&gt;pid, data_ptr, buffer-&gt;debug_id,</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                buffer-&gt;transaction ? &quot;active&quot; : &quot;finished&quot;);</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            if (buffer-&gt;transaction) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                buffer-&gt;transaction-&gt;buffer = NULL;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                buffer-&gt;transaction = NULL;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            if (buffer-&gt;async_transaction &amp;&amp; buffer-&gt;target_node) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                BUG_ON(!buffer-&gt;target_node-&gt;has_async_transaction);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                if (list_empty(&amp;buffer-&gt;target_node-&gt;async_todo))</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                    buffer-&gt;target_node-&gt;has_async_transaction = 0;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                else</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                    list_move_tail(buffer-&gt;target_node-&gt;async_todo.next, &amp;thread-&gt;todo);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            binder_transaction_buffer_release(proc, buffer, NULL);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            binder_free_buf(proc, buffer);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            break;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                             }</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        ......</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        *consumed = ptr - buffer;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    return 0;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">}</span></div></div><div>    首先通过看这个语句:</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">get_user(data_ptr, (void * __user *) ptr)</span></div></div><div>    这个是获得要删除的Buffer的用户空间地址，接着通过下面这个语句来找到这个地址对应的struct binder_buffer信息:</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">buffer = binder_buffer_lookup(proc, data_ptr);</span></div></div><div>    因为这个空间是前面在binder_transaction里面分配的，所以这里一定能找到。</div><div>    最后，就可以释放这块内存了:</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">binder_transaction_buffer_release(proc, buffer, NULL);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">binder_free_buf(proc, buffer);</span></div></div><div>    再来看另一个命令BC_REPLY:</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">int</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">binder_thread_write(struct binder_proc *proc, struct binder_thread *thread,</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                    void __user *buffer, int size, signed long *consumed)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">{</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    uint32_t cmd;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    void __user *ptr = buffer + *consumed;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    void __user *end = buffer + size;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    while (ptr &lt; end &amp;&amp; thread-&gt;return_error == BR_OK) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        if (get_user(cmd, (uint32_t __user *)ptr))</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            return -EFAULT;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        ptr += sizeof(uint32_t);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        if (_IOC_NR(cmd) &lt; ARRAY_SIZE(binder_stats.bc)) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            binder_stats.bc[_IOC_NR(cmd)]++;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            proc-&gt;stats.bc[_IOC_NR(cmd)]++;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            thread-&gt;stats.bc[_IOC_NR(cmd)]++;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        switch (cmd) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        ......</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        case BC_TRANSACTION:</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        case BC_REPLY: {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            struct binder_transaction_data tr;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            if (copy_from_user(&amp;tr, ptr, sizeof(tr)))</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                return -EFAULT;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            ptr += sizeof(tr);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            binder_transaction(proc, thread, &amp;tr, cmd == BC_REPLY);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            break;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                       }</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        ......</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        *consumed = ptr - buffer;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    return 0;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">}</span></div></div><div>    又再次进入到binder_transaction函数：</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">static void</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">binder_transaction(struct binder_proc *proc, struct binder_thread *thread,</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">struct binder_transaction_data *tr, int reply)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">{</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    struct binder_transaction *t;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    struct binder_work *tcomplete;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    size_t *offp, *off_end;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    struct binder_proc *target_proc;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    struct binder_thread *target_thread = NULL;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    struct binder_node *target_node = NULL;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    struct list_head *target_list;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    wait_queue_head_t *target_wait;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    struct binder_transaction *in_reply_to = NULL;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    struct binder_transaction_log_entry *e;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    uint32_t return_error;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    ......</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    if (reply) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        in_reply_to = thread-&gt;transaction_stack;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        if (in_reply_to == NULL) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            ......</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            return_error = BR_FAILED_REPLY;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            goto err_empty_call_stack;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        binder_set_nice(in_reply_to-&gt;saved_priority);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        if (in_reply_to-&gt;to_thread != thread) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            .......</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            goto err_bad_call_stack;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        thread-&gt;transaction_stack = in_reply_to-&gt;to_parent;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        target_thread = in_reply_to-&gt;from;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        if (target_thread == NULL) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            return_error = BR_DEAD_REPLY;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            goto err_dead_binder;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        if (target_thread-&gt;transaction_stack != in_reply_to) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            ......</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            return_error = BR_FAILED_REPLY;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            in_reply_to = NULL;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            target_thread = NULL;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            goto err_dead_binder;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        target_proc = target_thread-&gt;proc;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    } else {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        ......</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    if (target_thread) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        e-&gt;to_thread = target_thread-&gt;pid;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        target_list = &amp;target_thread-&gt;todo;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        target_wait = &amp;target_thread-&gt;wait;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    } else {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        ......</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    }</span></div><div><br/></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    /* TODO: reuse incoming transaction for reply */</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    t = kzalloc(sizeof(*t), GFP_KERNEL);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    if (t == NULL) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        return_error = BR_FAILED_REPLY;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        goto err_alloc_t_failed;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    </span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    tcomplete = kzalloc(sizeof(*tcomplete), GFP_KERNEL);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    if (tcomplete == NULL) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        return_error = BR_FAILED_REPLY;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        goto err_alloc_tcomplete_failed;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    }</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    if (!reply &amp;&amp; !(tr-&gt;flags &amp; TF_ONE_WAY))</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        t-&gt;from = thread;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    else</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        t-&gt;from = NULL;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    t-&gt;sender_euid = proc-&gt;tsk-&gt;cred-&gt;euid;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    t-&gt;to_proc = target_proc;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    t-&gt;to_thread = target_thread;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    t-&gt;code = tr-&gt;code;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    t-&gt;flags = tr-&gt;flags;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    t-&gt;priority = task_nice(current);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    t-&gt;buffer = binder_alloc_buf(target_proc, tr-&gt;data_size,</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        tr-&gt;offsets_size, !reply &amp;&amp; (t-&gt;flags &amp; TF_ONE_WAY));</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    if (t-&gt;buffer == NULL) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        return_error = BR_FAILED_REPLY;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        goto err_binder_alloc_buf_failed;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    t-&gt;buffer-&gt;allow_user_free = 0;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    t-&gt;buffer-&gt;debug_id = t-&gt;debug_id;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    t-&gt;buffer-&gt;transaction = t;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    t-&gt;buffer-&gt;target_node = target_node;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    if (target_node)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        binder_inc_node(target_node, 1, 0, NULL);</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    offp = (size_t *)(t-&gt;buffer-&gt;data + ALIGN(tr-&gt;data_size, sizeof(void *)));</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    if (copy_from_user(t-&gt;buffer-&gt;data, tr-&gt;data.ptr.buffer, tr-&gt;data_size)) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        binder_user_error(&quot;binder: %d:%d got transaction with invalid &quot;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            &quot;data ptr\n&quot;, proc-&gt;pid, thread-&gt;pid);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        return_error = BR_FAILED_REPLY;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        goto err_copy_data_failed;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    if (copy_from_user(offp, tr-&gt;data.ptr.offsets, tr-&gt;offsets_size)) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        binder_user_error(&quot;binder: %d:%d got transaction with invalid &quot;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            &quot;offsets ptr\n&quot;, proc-&gt;pid, thread-&gt;pid);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        return_error = BR_FAILED_REPLY;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        goto err_copy_data_failed;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    </span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    ......</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    if (reply) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        BUG_ON(t-&gt;buffer-&gt;async_transaction != 0);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        binder_pop_transaction(target_thread, in_reply_to);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    } else if (!(t-&gt;flags &amp; TF_ONE_WAY)) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        ......</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    } else {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        ......</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    t-&gt;work.type = BINDER_WORK_TRANSACTION;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    list_add_tail(&amp;t-&gt;work.entry, target_list);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    tcomplete-&gt;type = BINDER_WORK_TRANSACTION_COMPLETE;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    list_add_tail(&amp;tcomplete-&gt;entry, &amp;thread-&gt;todo);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    if (target_wait)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        wake_up_interruptible(target_wait);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    return;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    ......</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">}</span></div></div><div>    注意，这里的reply为1，我们忽略掉其他无关代码。</div><div>    前面Service Manager正在binder_thread_read函数中被MediaPlayerService启动后进程唤醒后，在最后会把当前处理完的事物放在thread-&gt;transaction_stack中:</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">if (cmd == BR_TRANSACTION &amp;&amp; !(t-&gt;flags &amp; TF_ONE_WAY)) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    t-&gt;to_parent = thread-&gt;transaction_stack;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    t-&gt;to_thread = thread;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    thread-&gt;transaction_stack = t;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">}</span></div></div><div>    所以，这里，首先是把它这个binder_transaction取回来，并且放在本地变量in_reply_to中:</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">in_reply_to = thread-&gt;transaction_stack;</span></div></div><div>    接着就可以通过in_reply_to得到最终发出这个事务请求的线程和进程：</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;"> target_thread = in_reply_to-&gt;from;  </span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;"> target_proc = target_thread-&gt;proc;  </span></div></div><div>    然后得到target_list和target_wait：</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">target_list = &amp;target_thread-&gt;todo;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">target_wait = &amp;target_thread-&gt;wait;</span></div></div><div>    下面这一段代码:</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">/* TODO: reuse incoming transaction for reply */</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    t = kzalloc(sizeof(*t), GFP_KERNEL);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    if (t == NULL) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        return_error = BR_FAILED_REPLY;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        goto err_alloc_t_failed;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    </span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    tcomplete = kzalloc(sizeof(*tcomplete), GFP_KERNEL);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    if (tcomplete == NULL) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        return_error = BR_FAILED_REPLY;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        goto err_alloc_tcomplete_failed;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    }</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    if (!reply &amp;&amp; !(tr-&gt;flags &amp; TF_ONE_WAY))</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        t-&gt;from = thread;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    else</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        t-&gt;from = NULL;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    t-&gt;sender_euid = proc-&gt;tsk-&gt;cred-&gt;euid;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    t-&gt;to_proc = target_proc;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    t-&gt;to_thread = target_thread;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    t-&gt;code = tr-&gt;code;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    t-&gt;flags = tr-&gt;flags;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    t-&gt;priority = task_nice(current);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    t-&gt;buffer = binder_alloc_buf(target_proc, tr-&gt;data_size,</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        tr-&gt;offsets_size, !reply &amp;&amp; (t-&gt;flags &amp; TF_ONE_WAY));</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    if (t-&gt;buffer == NULL) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        return_error = BR_FAILED_REPLY;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        goto err_binder_alloc_buf_failed;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    t-&gt;buffer-&gt;allow_user_free = 0;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    t-&gt;buffer-&gt;debug_id = t-&gt;debug_id;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    t-&gt;buffer-&gt;transaction = t;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    t-&gt;buffer-&gt;target_node = target_node;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    if (target_node)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        binder_inc_node(target_node, 1, 0, NULL);</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    offp = (size_t *)(t-&gt;buffer-&gt;data + ALIGN(tr-&gt;data_size, sizeof(void *)));</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    if (copy_from_user(t-&gt;buffer-&gt;data, tr-&gt;data.ptr.buffer, tr-&gt;data_size)) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        binder_user_error(&quot;binder: %d:%d got transaction with invalid &quot;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            &quot;data ptr\n&quot;, proc-&gt;pid, thread-&gt;pid);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        return_error = BR_FAILED_REPLY;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        goto err_copy_data_failed;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    if (copy_from_user(offp, tr-&gt;data.ptr.offsets, tr-&gt;offsets_size)) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        binder_user_error(&quot;binder: %d:%d got transaction with invalid &quot;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            &quot;offsets ptr\n&quot;, proc-&gt;pid, thread-&gt;pid);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        return_error = BR_FAILED_REPLY;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        goto err_copy_data_failed;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    }</span></div></div><div>    我们在前面已经分析过了，这里不再重复。但是有一点要注意的是，这里target_node为NULL，因此，t-&gt;buffer-&gt;target_node也为NULL。</div><div>    函数本来有一个for循环，用来处理数据中的Binder对象，这里由于没有Binder对象，所以就略过了。到了下面这句代码:</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">binder_pop_transaction(target_thread, in_reply_to);</span></div></div><div>    我们看看做了什么事情:</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">static void</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">binder_pop_transaction(</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    struct binder_thread *target_thread, struct binder_transaction *t)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">{</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    if (target_thread) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        BUG_ON(target_thread-&gt;transaction_stack != t);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        BUG_ON(target_thread-&gt;transaction_stack-&gt;from != target_thread);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        target_thread-&gt;transaction_stack =</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            target_thread-&gt;transaction_stack-&gt;from_parent;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        t-&gt;from = NULL;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    t-&gt;need_reply = 0;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    if (t-&gt;buffer)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        t-&gt;buffer-&gt;transaction = NULL;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    kfree(t);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    binder_stats.obj_deleted[BINDER_STAT_TRANSACTION]++;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">}</span></div></div><div>    由于到了这里，已经不需要in_reply_to这个transaction了，就把它删除掉。</div><div>    回到binder_transaction函数:</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">t-&gt;work.type = BINDER_WORK_TRANSACTION;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">list_add_tail(&amp;t-&gt;work.entry, target_list);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">tcomplete-&gt;type = BINDER_WORK_TRANSACTION_COMPLETE;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">list_add_tail(&amp;tcomplete-&gt;entry, &amp;thread-&gt;todo);</span></div></div><div>    和前面一样，分别把t和tcomplete分别放在target_list和thread-&gt;todo队列中，这里的target_list指的就是最初调用IServiceManager::addService的MediaPlayerService的Server主线程的thread-&gt;todo队列了，而thread-&gt;todo指的是Service Manager中用来恢复IServiceManager::addService请求的线程。</div><div>    最后，唤醒等待在target_wait队列上的线程了，就是最初调用IServiceManager::addService的MediaPlayerService的Server主线程了，它最后在binder_thread_read函数中睡眠在thread-&gt;wait上，就是这里的target_wait了:</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">if (target_wait)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    wake_up_interruptible(target_wait);</span></div></div><div>    这样，Service Manager回复调用IServiceManager::addService请求就算完成了，重新回到frameworks/base/cmds/servicemanager/binder.c文件中的binder_loop函数等待下一个Client请求的到来。事实上，Service Manager回到binder_loop函数再次执行ioctl函数时候，又会再次进入到binder_thread_read函数。这时个会发现thread-&gt;todo不为空，这是因为刚才我们调用了:</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">list_add_tail(&amp;tcomplete-&gt;entry, &amp;thread-&gt;todo);</span></div></div><div>    把一个工作项tcomplete放在了在thread-&gt;todo中，这个tcompelete的type为BINDER_WORK_TRANSACTION_COMPLETE，因此，Binder驱动程序会执行下面操作:</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">switch (w-&gt;type) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">case BINDER_WORK_TRANSACTION_COMPLETE: {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    cmd = BR_TRANSACTION_COMPLETE;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    if (put_user(cmd, (uint32_t __user *)ptr))</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        return -EFAULT;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    ptr += sizeof(uint32_t);</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    list_del(&amp;w-&gt;entry);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    kfree(w);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    </span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    } break;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    ......</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">}</span></div></div><div>    binder_loop函数执行完这个ioctl调用后，才会在下一次调用ioctl进入到Binder驱动程序进入休眠状态，等待下一次Client的请求.</div><div>    上面讲到调用IServiceManager::addService的MediaPlayerService的Server主线程被唤醒了，于是，重新执行binder_thread_read函数:</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">static int</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">binder_thread_read(struct binder_proc *proc, struct binder_thread *thread,</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                   void  __user *buffer, int size, signed long *consumed, int non_block)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">{</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    void __user *ptr = buffer + *consumed;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    void __user *end = buffer + size;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    int ret = 0;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    int wait_for_proc_work;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    if (*consumed == 0) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        if (put_user(BR_NOOP, (uint32_t __user *)ptr))</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            return -EFAULT;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        ptr += sizeof(uint32_t);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    }</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">retry:</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    wait_for_proc_work = thread-&gt;transaction_stack == NULL &amp;&amp; list_empty(&amp;thread-&gt;todo);</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    ......</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    if (wait_for_proc_work) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        ......</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    } else {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        if (non_block) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            if (!binder_has_thread_work(thread))</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                ret = -EAGAIN;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        } else</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            ret = wait_event_interruptible(thread-&gt;wait, binder_has_thread_work(thread));</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    </span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    ......</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    while (1) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        uint32_t cmd;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        struct binder_transaction_data tr;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        struct binder_work *w;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        struct binder_transaction *t = NULL;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        if (!list_empty(&amp;thread-&gt;todo))</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            w = list_first_entry(&amp;thread-&gt;todo, struct binder_work, entry);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        else if (!list_empty(&amp;proc-&gt;todo) &amp;&amp; wait_for_proc_work)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            w = list_first_entry(&amp;proc-&gt;todo, struct binder_work, entry);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        else {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            if (ptr - buffer == 4 &amp;&amp; !(thread-&gt;looper &amp; BINDER_LOOPER_STATE_NEED_RETURN)) /* no data added */</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                goto retry;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            break;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        }</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        ......</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        switch (w-&gt;type) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        case BINDER_WORK_TRANSACTION: {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            t = container_of(w, struct binder_transaction, work);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                                      } break;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        ......</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        }</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        if (!t)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            continue;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        BUG_ON(t-&gt;buffer == NULL);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        if (t-&gt;buffer-&gt;target_node) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            ......</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        } else {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            tr.target.ptr = NULL;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            tr.cookie = NULL;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            cmd = BR_REPLY;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        tr.code = t-&gt;code;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        tr.flags = t-&gt;flags;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        tr.sender_euid = t-&gt;sender_euid;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        if (t-&gt;from) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            ......</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        } else {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            tr.sender_pid = 0;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        }</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        tr.data_size = t-&gt;buffer-&gt;data_size;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        tr.offsets_size = t-&gt;buffer-&gt;offsets_size;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        tr.data.ptr.buffer = (void *)t-&gt;buffer-&gt;data + proc-&gt;user_buffer_offset;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        tr.data.ptr.offsets = tr.data.ptr.buffer + ALIGN(t-&gt;buffer-&gt;data_size, sizeof(void *));</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        if (put_user(cmd, (uint32_t __user *)ptr))</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            return -EFAULT;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        ptr += sizeof(uint32_t);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        if (copy_to_user(ptr, &amp;tr, sizeof(tr)))</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            return -EFAULT;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        ptr += sizeof(tr);</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        ......</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        list_del(&amp;t-&gt;work.entry);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        t-&gt;buffer-&gt;allow_user_free = 1;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        if (cmd == BR_TRANSACTION &amp;&amp; !(t-&gt;flags &amp; TF_ONE_WAY)) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            ......</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        } else {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            t-&gt;buffer-&gt;transaction = NULL;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            kfree(t);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            binder_stats.obj_deleted[BINDER_STAT_TRANSACTION]++;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        break;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    }</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">done:</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    ......</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    return 0;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">}</span></div></div><div>    在while循环中，从thread-&gt;todo得到w，w-&gt;type为BINDER_WORK_TRANSACTION，于是，得到t。从上面可以直到，Service Manager返回了一个0回来，写在t-&gt;buffer-&gt;data里面，现在把t-&gt;buffer-&gt;data加上proc-&gt;user_buffer_offset，得到用户空间地址，保存在tr.data.ptr.buffer里面，这样用户空间就可以访问这个返回码了。由于cmd不等于BR_TRANSACTION，这时就可以把t删除掉了，因为以后都不需要用了。</div><div>    执行完这个函数后，就会到binder_ioctl函数，执行下面语句，把数据返回给用户空间:</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">if (copy_to_user(ubuf, &amp;bwr, sizeof(bwr))) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    ret = -EFAULT;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    goto err;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">}</span></div></div><div>    接着返回到用户空间IPCThreadState::talkWithDriver函数，最后返回到IPCThreadState::waitForResponse函数，最终执行到下面语句:</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">status_t IPCThreadState::waitForResponse(Parcel *reply, status_t *acquireResult)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">{</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    int32_t cmd;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    int32_t err;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    while (1) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        if ((err=talkWithDriver()) &lt; NO_ERROR) break;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        </span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        ......</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        cmd = mIn.readInt32();</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        ......</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        switch (cmd) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        ......</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        case BR_REPLY:</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                binder_transaction_data tr;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                err = mIn.read(&amp;tr, sizeof(tr));</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                LOG_ASSERT(err == NO_ERROR, &quot;Not enough command data for brREPLY&quot;);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                if (err != NO_ERROR) goto finish;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                if (reply) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                    if ((tr.flags &amp; TF_STATUS_CODE) == 0) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                        reply-&gt;ipcSetDataReference(</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                            reinterpret_cast&lt;const uint8_t*&gt;(tr.data.ptr.buffer),</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                            tr.data_size,</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                            reinterpret_cast&lt;const size_t*&gt;(tr.data.ptr.offsets),</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                            tr.offsets_size/sizeof(size_t),</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                            freeBuffer, this);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                    } else {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                        ......</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                    }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                } else {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                    ......</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            goto finish;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        ......</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    }</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">finish:</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    ......</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    return err;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">}</span></div></div><div>    注意，这里的tr.flags等于0，这个是在上面的binder_send_reply函数里设置的。最终把结果保存在reply了：</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">reply-&gt;ipcSetDataReference(</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">       reinterpret_cast&lt;const uint8_t*&gt;(tr.data.ptr.buffer),</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">       tr.data_size,</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">       reinterpret_cast&lt;const size_t*&gt;(tr.data.ptr.offsets),</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">       tr.offsets_size/sizeof(size_t),</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">       freeBuffer, this);</span></div></div><div>    这个函数我们就不看了，有兴趣的读者可以研究一下。</div><div>    从这里层层返回，最后回到MediaPlayerService::instantiate函数中。</div><div>    至此，IServiceManager::addService终于执行完毕了。这个过程非常复杂，但是如果我们能够深刻地理解这个过程，将能很好地理解Binder机制的设计思想和实现过程。这里，对IServiceManager::addService过程中的MediaPlayerService，SerivceManager和BinderDriver之间的交互做一个小结:</div><div><en-media hash="29549c56dc2c8afbab0b9c50bdad7ca0" type="image/png"/><br/></div><div>    回到framworks/base/media/mediaserver/main_mediaserver.cpp文件中的main函数，接下去还要执行下面两个函数:</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    ProcessState::self()-&gt;startThreadPool();</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    IPCThreadState::self()-&gt;joinThreadPool();</span></div></div><div><br/></div><div>首先看ProcessState::startThreadPool函数的实现:</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">void ProcessState::startThreadPool()</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">{</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    AutoMutex _l(mLock);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    if (!mThreadPoolStarted) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        mThreadPoolStarted = true;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        spawnPooledThread(true);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">}</span></div></div><div><br/></div><div>这里调用spwanPooledThread</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">void ProcessState::spawnPooledThread(bool isMain)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">{</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    if (mThreadPoolStarted) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        int32_t s = android_atomic_add(1, &amp;mThreadPoolSeq);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        char buf[32];</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        sprintf(buf, &quot;Binder Thread #%d&quot;, s);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        LOGV(&quot;Spawning new pooled thread, name=%s\n&quot;, buf);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        sp&lt;Thread&gt; t = new PoolThread(isMain);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        t-&gt;run(buf);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">}</span></div></div><div>    这里主要是创建一个线程，PoolThread继承Thread类，Thread类定义在frameworks/base/libs/utils/Threads.cpp文件中，其run函数最终调用子类的threadLoop函数，这里即为PoolThread::threadLoop函数:</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    virtual bool threadLoop()</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        IPCThreadState::self()-&gt;joinThreadPool(mIsMain);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        return false;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    }</span></div></div><div>    这里和frameworks/base/media/mediaserver/main_mediaserver.cpp文件中的main函数一样，最终都是调用了IPCThreadState::joinThreadPool函数，它们的区别是，一个参数是true，一个默认值是false。我们来看一下这个函数的实现:</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">void IPCThreadState::joinThreadPool(bool isMain)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">{</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    LOG_THREADPOOL(&quot;**** THREAD %p (PID %d) IS JOINING THE THREAD POOL\n&quot;, (void*)pthread_self(), getpid());</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    mOut.writeInt32(isMain ? BC_ENTER_LOOPER : BC_REGISTER_LOOPER);</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    ......</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    status_t result;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    do {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        int32_t cmd;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        .......</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        // now get the next command to be processed, waiting if necessary</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        result = talkWithDriver();</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        if (result &gt;= NO_ERROR) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            size_t IN = mIn.dataAvail();</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            if (IN &lt; sizeof(int32_t)) continue;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            cmd = mIn.readInt32();</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            ......</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            }</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            result = executeCommand(cmd);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        }</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        ......</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    } while (result != -ECONNREFUSED &amp;&amp; result != -EBADF);</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    .......</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    mOut.writeInt32(BC_EXIT_LOOPER);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    talkWithDriver(false);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">}</span></div></div><div>    这个函数最终是在一个无穷循环中，通过调用talkWithDriver函数来和Binder驱动程序进行交互，实际上就是调用talkWithDriver来等待Client的请求，然后再调用executeCommand来处理请求，而在executeCommand函数中，最终会调用BBinder::transact来真正处理Client的请求:</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">status_t IPCThreadState::executeCommand(int32_t cmd)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">{</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    BBinder* obj;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    RefBase::weakref_type* refs;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    status_t result = NO_ERROR;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    switch (cmd) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    ......</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    case BR_TRANSACTION:</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            binder_transaction_data tr;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            result = mIn.read(&amp;tr, sizeof(tr));</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            </span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            ......</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            Parcel reply;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            </span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            ......</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            if (tr.target.ptr) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                sp&lt;BBinder&gt; b((BBinder*)tr.cookie);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                const status_t error = b-&gt;transact(tr.code, buffer, &amp;reply, tr.flags);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                if (error &lt; NO_ERROR) reply.setError(error);</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            } else {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                const status_t error = the_context_object-&gt;transact(tr.code, buffer, &amp;reply, tr.flags);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                if (error &lt; NO_ERROR) reply.setError(error);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            }</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            ......</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        break;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    .......</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    }</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    if (result != NO_ERROR) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        mLastError = result;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    }</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    return result;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">}</span></div></div><div>    接下来再看一下BBinder::transact的实现:</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">status_t BBinder::transact(</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    uint32_t code, const Parcel&amp; data, Parcel* reply, uint32_t flags)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">{</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    data.setDataPosition(0);</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    status_t err = NO_ERROR;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    switch (code) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        case PING_TRANSACTION:</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            reply-&gt;writeInt32(pingBinder());</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            break;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        default:</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            err = onTransact(code, data, reply, flags);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            break;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    }</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    if (reply != NULL) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        reply-&gt;setDataPosition(0);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    }</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    return err;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">}</span></div></div><div>    最终会调用onTransact函数来处理。在这个场景中，BnMediaPlayerService继承了BBinder类，并且重载了onTransact函数，因此，这里实际上是调用了BnMediaPlayerService::onTransact函数，这个函数定义在frameworks/base/libs/media/libmedia/IMediaPlayerService.cpp文件中:</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">status_t BnMediaPlayerService::onTransact(</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    uint32_t code, const Parcel&amp; data, Parcel* reply, uint32_t flags)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">{</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    switch(code) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        case CREATE_URL: {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            ......</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                         } break;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        case CREATE_FD: {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            ......</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                        } break;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        case DECODE_URL: {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            ......</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                         } break;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        case DECODE_FD: {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            ......</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                        } break;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        case CREATE_MEDIA_RECORDER: {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            ......</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                                    } break;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        case CREATE_METADATA_RETRIEVER: {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            ......</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                                        } break;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        case GET_OMX: {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            ......</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">                      } break;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">        default:</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">            return BBinder::onTransact(code, data, reply, flags);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">    }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, 'Courier New', monospace;">}</span></div></div><div>    至此，我们就以MediaPlayerService为例，完整地介绍了Android系统进程间通信Binder机制中的Server启动过程。Server启动起来之后，就会在一个无穷循环中等待Client的请求。在下一篇文章中，我们将介绍Client如何通过Server Manager远程接口来获得Server远程接口，进而调用Server远程接口来使用Server提供的服务，敬请关注。</div><div><br/></div><div><br/></div><div>参考资料</div><div><en-media style="cursor:pointer;" hash="df56a62009efcf3b6442cf324ee008ab" type="application/octet-stream"/></div><div><en-media style="cursor:pointer;" hash="445a5aedca7ce4be7259a3d070d07aa1" type="application/octet-stream"/></div><div><en-media style="cursor:pointer;" hash="353a74293d3946280fd50acd782a0fd9" type="application/octet-stream"/></div><div><en-media style="cursor:pointer;" hash="1a260b942c0e1644aa109d57364d415d" type="application/octet-stream"/></div><div><en-media style="cursor:pointer;" hash="30d9d9aa04c1e8cf17ac4d0c2bf65357" type="application/octet-stream"/></div><div><en-media style="cursor:pointer;" hash="3e14bd8f04faf9dafe79b6f86991cb2b" type="application/octet-stream"/></div><div><en-media style="cursor:pointer;" hash="c55f2349db0fd5fc0f91152a9e2c3dde" type="application/octet-stream"/></div><div><en-media style="cursor:pointer;" hash="9320120a631dc7a6d3bfa5d0aa448186" type="application/octet-stream"/></div><div><en-media style="cursor:pointer;" hash="a3ed486823760326142d8eeee2a16707" type="application/octet-stream"/></div><div><en-media style="cursor:pointer;" hash="7d1c0604fee87236548a8ceb1806834f" type="application/octet-stream"/></div><div><br/></div></en-note>
]]></content><created>20171113T060637Z</created><updated>20171121T124916Z</updated><note-attributes><latitude>22.53660080223185</latitude><longitude>114.0505359137578</longitude><altitude>12.62650489807129</altitude><author>雅字杀手</author><source>desktop.mac</source><reminder-order>0</reminder-order></note-attributes><resource><data encoding="base64">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
8P91AnVkfQ4P7gAAAABJRU5ErkJggg==</data><mime>image/png</mime><width>609</width><height>433</height><duration>0</duration><resource-attributes><file-name>379AC5D5-E716-427C-AEA5-7D2C3CC2A149.png</file-name></resource-attributes></resource><resource><data encoding="base64">LyoKICogQ29weXJpZ2h0IChDKSAyMDA1IFRoZSBBbmRyb2lkIE9wZW4gU291cmNlIFByb2plY3QKICoK
ICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNl
bnNlIik7CiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0
aCB0aGUgTGljZW5zZS4KICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0CiAq
CiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wCiAqCiAqIFVu
bGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29m
dHdhcmUKICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4g
IkFTIElTIiBCQVNJUywKICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJ
TkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuCiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNw
ZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQKICogbGltaXRhdGlvbnMgdW5k
ZXIgdGhlIExpY2Vuc2UuCiAqLwoKI2lmbmRlZiBBTkRST0lEX0lQQ19USFJFQURfU1RBVEVfSAojZGVm
aW5lIEFORFJPSURfSVBDX1RIUkVBRF9TVEFURV9ICgojaW5jbHVkZSA8dXRpbHMvRXJyb3JzLmg+CiNp
bmNsdWRlIDxiaW5kZXIvUGFyY2VsLmg+CiNpbmNsdWRlIDxiaW5kZXIvUHJvY2Vzc1N0YXRlLmg+CiNp
bmNsdWRlIDx1dGlscy9WZWN0b3IuaD4KCiNpZiBkZWZpbmVkKF9XSU4zMikKdHlwZWRlZiAgaW50ICB1
aWRfdDsKI2VuZGlmCgovLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KbmFtZXNwYWNlIGFuZHJvaWQgewoKY2xhc3Mg
SVBDVGhyZWFkU3RhdGUKewpwdWJsaWM6CiAgICBzdGF0aWMgIElQQ1RocmVhZFN0YXRlKiAgICAgc2Vs
ZigpOwogICAgc3RhdGljICBJUENUaHJlYWRTdGF0ZSogICAgIHNlbGZPck51bGwoKTsgIC8vIHNlbGYo
KSwgYnV0IHdvbid0IGluc3RhbnRpYXRlCiAgICAKICAgICAgICAgICAgc3A8UHJvY2Vzc1N0YXRlPiAg
ICBwcm9jZXNzKCk7CiAgICAgICAgICAgIAogICAgICAgICAgICBzdGF0dXNfdCAgICAgICAgICAgIGNs
ZWFyTGFzdEVycm9yKCk7CgogICAgICAgICAgICBwaWRfdCAgICAgICAgICAgICAgIGdldENhbGxpbmdQ
aWQoKSBjb25zdDsKICAgICAgICAgICAgdWlkX3QgICAgICAgICAgICAgICBnZXRDYWxsaW5nVWlkKCkg
Y29uc3Q7CgogICAgICAgICAgICB2b2lkICAgICAgICAgICAgICAgIHNldFN0cmljdE1vZGVQb2xpY3ko
aW50MzJfdCBwb2xpY3kpOwogICAgICAgICAgICBpbnQzMl90ICAgICAgICAgICAgIGdldFN0cmljdE1v
ZGVQb2xpY3koKSBjb25zdDsKCiAgICAgICAgICAgIHZvaWQgICAgICAgICAgICAgICAgc2V0TGFzdFRy
YW5zYWN0aW9uQmluZGVyRmxhZ3MoaW50MzJfdCBmbGFncyk7CiAgICAgICAgICAgIGludDMyX3QgICAg
ICAgICAgICAgZ2V0TGFzdFRyYW5zYWN0aW9uQmluZGVyRmxhZ3MoKSBjb25zdDsKCiAgICAgICAgICAg
IGludDY0X3QgICAgICAgICAgICAgY2xlYXJDYWxsaW5nSWRlbnRpdHkoKTsKICAgICAgICAgICAgdm9p
ZCAgICAgICAgICAgICAgICByZXN0b3JlQ2FsbGluZ0lkZW50aXR5KGludDY0X3QgdG9rZW4pOwogICAg
ICAgICAgICAKICAgICAgICAgICAgaW50ICAgICAgICAgICAgICAgICBzZXR1cFBvbGxpbmcoaW50KiBm
ZCk7CiAgICAgICAgICAgIHN0YXR1c190ICAgICAgICAgICAgaGFuZGxlUG9sbGVkQ29tbWFuZHMoKTsK
ICAgICAgICAgICAgdm9pZCAgICAgICAgICAgICAgICBmbHVzaENvbW1hbmRzKCk7CgogICAgICAgICAg
ICB2b2lkICAgICAgICAgICAgICAgIGpvaW5UaHJlYWRQb29sKGJvb2wgaXNNYWluID0gdHJ1ZSk7CiAg
ICAgICAgICAgIAogICAgICAgICAgICAvLyBTdG9wIHRoZSBsb2NhbCBwcm9jZXNzLgogICAgICAgICAg
ICB2b2lkICAgICAgICAgICAgICAgIHN0b3BQcm9jZXNzKGJvb2wgaW1tZWRpYXRlID0gdHJ1ZSk7CiAg
ICAgICAgICAgIAogICAgICAgICAgICBzdGF0dXNfdCAgICAgICAgICAgIHRyYW5zYWN0KGludDMyX3Qg
aGFuZGxlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVpbnQzMl90IGNv
ZGUsIGNvbnN0IFBhcmNlbCYgZGF0YSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICBQYXJjZWwqIHJlcGx5LCB1aW50MzJfdCBmbGFncyk7CgogICAgICAgICAgICB2b2lkICAgICAg
ICAgICAgICAgIGluY1N0cm9uZ0hhbmRsZShpbnQzMl90IGhhbmRsZSk7CiAgICAgICAgICAgIHZvaWQg
ICAgICAgICAgICAgICAgZGVjU3Ryb25nSGFuZGxlKGludDMyX3QgaGFuZGxlKTsKICAgICAgICAgICAg
dm9pZCAgICAgICAgICAgICAgICBpbmNXZWFrSGFuZGxlKGludDMyX3QgaGFuZGxlKTsKICAgICAgICAg
ICAgdm9pZCAgICAgICAgICAgICAgICBkZWNXZWFrSGFuZGxlKGludDMyX3QgaGFuZGxlKTsKICAgICAg
ICAgICAgc3RhdHVzX3QgICAgICAgICAgICBhdHRlbXB0SW5jU3Ryb25nSGFuZGxlKGludDMyX3QgaGFu
ZGxlKTsKICAgIHN0YXRpYyAgdm9pZCAgICAgICAgICAgICAgICBleHB1bmdlSGFuZGxlKGludDMyX3Qg
aGFuZGxlLCBJQmluZGVyKiBiaW5kZXIpOwogICAgICAgICAgICBzdGF0dXNfdCAgICAgICAgICAgIHJl
cXVlc3REZWF0aE5vdGlmaWNhdGlvbiggICBpbnQzMl90IGhhbmRsZSwKICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQnBCaW5kZXIqIHByb3h5KTsg
CiAgICAgICAgICAgIHN0YXR1c190ICAgICAgICAgICAgY2xlYXJEZWF0aE5vdGlmaWNhdGlvbiggaW50
MzJfdCBoYW5kbGUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgQnBCaW5kZXIqIHByb3h5KTsgCgogICAgc3RhdGljICB2b2lkICAgICAgICAgICAgICAg
IHNodXRkb3duKCk7CgogICAgLy8gQ2FsbCB0aGlzIHRvIGRpc2FibGUgc3dpdGNoaW5nIHRocmVhZHMg
dG8gYmFja2dyb3VuZCBzY2hlZHVsaW5nIHdoZW4KICAgIC8vIHJlY2VpdmluZyBpbmNvbWluZyBJUEMg
Y2FsbHMuICBUaGlzIGlzIHNwZWNpZmljYWxseSBoZXJlIGZvciB0aGUKICAgIC8vIEFuZHJvaWQgc3lz
dGVtIHByb2Nlc3MsIHNpbmNlIGl0IGV4cGVjdHMgdG8gaGF2ZSBiYWNrZ3JvdW5kIGFwcHMgY2FsbGlu
ZwogICAgLy8gaW4gdG8gaXQgYnV0IGRvZXNuJ3Qgd2FudCB0byBhY3F1aXJlIGxvY2tzIGluIGl0cyBz
ZXJ2aWNlcyB3aGlsZSBpbgogICAgLy8gdGhlIGJhY2tncm91bmQuCiAgICBzdGF0aWMgIHZvaWQgICAg
ICAgICAgICAgICAgZGlzYWJsZUJhY2tncm91bmRTY2hlZHVsaW5nKGJvb2wgZGlzYWJsZSk7CiAgICAg
ICAgICAgIGJvb2wgICAgICAgICAgICAgICAgYmFja2dyb3VuZFNjaGVkdWxpbmdEaXNhYmxlZCgpOwoK
ICAgICAgICAgICAgLy8gQ2FsbCBibG9ja3MgdW50aWwgdGhlIG51bWJlciBvZiBleGVjdXRpbmcgYmlu
ZGVyIHRocmVhZHMgaXMgbGVzcyB0aGFuCiAgICAgICAgICAgIC8vIHRoZSBtYXhpbXVtIG51bWJlciBv
ZiBiaW5kZXIgdGhyZWFkcyB0aHJlYWRzIGFsbG93ZWQgZm9yIHRoaXMgcHJvY2Vzcy4KICAgICAgICAg
ICAgdm9pZCAgICAgICAgICAgICAgICBibG9ja1VudGlsVGhyZWFkQXZhaWxhYmxlKCk7Cgpwcml2YXRl
OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIElQQ1RocmVhZFN0YXRlKCk7CiAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgfklQQ1RocmVhZFN0YXRlKCk7CgogICAgICAgICAgICBzdGF0
dXNfdCAgICAgICAgICAgIHNlbmRSZXBseShjb25zdCBQYXJjZWwmIHJlcGx5LCB1aW50MzJfdCBmbGFn
cyk7CiAgICAgICAgICAgIHN0YXR1c190ICAgICAgICAgICAgd2FpdEZvclJlc3BvbnNlKFBhcmNlbCAq
cmVwbHksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1
c190ICphY3F1aXJlUmVzdWx0PU5VTEwpOwogICAgICAgICAgICBzdGF0dXNfdCAgICAgICAgICAgIHRh
bGtXaXRoRHJpdmVyKGJvb2wgZG9SZWNlaXZlPXRydWUpOwogICAgICAgICAgICBzdGF0dXNfdCAgICAg
ICAgICAgIHdyaXRlVHJhbnNhY3Rpb25EYXRhKGludDMyX3QgY21kLAogICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVpbnQzMl90IGJpbmRlckZsYWdzLAogICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludDMyX3QgaGFu
ZGxlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVp
bnQzMl90IGNvZGUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgY29uc3QgUGFyY2VsJiBkYXRhLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgIHN0YXR1c190KiBzdGF0dXNCdWZmZXIpOwogICAgICAgICAgICBzdGF0
dXNfdCAgICAgICAgICAgIGdldEFuZEV4ZWN1dGVDb21tYW5kKCk7CiAgICAgICAgICAgIHN0YXR1c190
ICAgICAgICAgICAgZXhlY3V0ZUNvbW1hbmQoaW50MzJfdCBjb21tYW5kKTsKICAgICAgICAgICAgdm9p
ZCAgICAgICAgICAgICAgICBwcm9jZXNzUGVuZGluZ0RlcmVmcygpOwoKICAgICAgICAgICAgdm9pZCAg
ICAgICAgICAgICAgICBjbGVhckNhbGxlcigpOwoKICAgIHN0YXRpYyAgdm9pZCAgICAgICAgICAgICAg
ICB0aHJlYWREZXN0cnVjdG9yKHZvaWQgKnN0KTsKICAgIHN0YXRpYyAgdm9pZCAgICAgICAgICAgICAg
ICBmcmVlQnVmZmVyKFBhcmNlbCogcGFyY2VsLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgY29uc3QgdWludDhfdCogZGF0YSwgc2l6ZV90IGRhdGFTaXplLAogICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYmluZGVyX3NpemVfdCogb2JqZWN0
cywgc2l6ZV90IG9iamVjdHNTaXplLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgdm9pZCogY29va2llKTsKICAgIAogICAgY29uc3QgICBzcDxQcm9jZXNzU3RhdGU+ICAgIG1Q
cm9jZXNzOwogICAgICAgICAgICBWZWN0b3I8QkJpbmRlcio+ICAgIG1QZW5kaW5nU3Ryb25nRGVyZWZz
OwogICAgICAgICAgICBWZWN0b3I8UmVmQmFzZTo6d2Vha3JlZl90eXBlKj4gbVBlbmRpbmdXZWFrRGVy
ZWZzOwoKICAgICAgICAgICAgUGFyY2VsICAgICAgICAgICAgICBtSW47CiAgICAgICAgICAgIFBhcmNl
bCAgICAgICAgICAgICAgbU91dDsKICAgICAgICAgICAgc3RhdHVzX3QgICAgICAgICAgICBtTGFzdEVy
cm9yOwogICAgICAgICAgICBwaWRfdCAgICAgICAgICAgICAgIG1DYWxsaW5nUGlkOwogICAgICAgICAg
ICB1aWRfdCAgICAgICAgICAgICAgIG1DYWxsaW5nVWlkOwogICAgICAgICAgICBpbnQzMl90ICAgICAg
ICAgICAgIG1TdHJpY3RNb2RlUG9saWN5OwogICAgICAgICAgICBpbnQzMl90ICAgICAgICAgICAgIG1M
YXN0VHJhbnNhY3Rpb25CaW5kZXJGbGFnczsKfTsKCn07IC8vIG5hbWVzcGFjZSBhbmRyb2lkCgovLyAt
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0KCiNlbmRpZiAvLyBBTkRST0lEX0lQQ19USFJFQURfU1RBVEVfSAo=</data><mime>application/octet-stream</mime><width>0</width><height>0</height><duration>0</duration><resource-attributes><file-name>IPCThreadState.h</file-name></resource-attributes></resource><resource><data encoding="base64">LyoKICogQ29weXJpZ2h0IChDKSAyMDA1IFRoZSBBbmRyb2lkIE9wZW4gU291cmNlIFByb2plY3QKICoK
ICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNl
bnNlIik7CiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0
aCB0aGUgTGljZW5zZS4KICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0CiAq
CiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wCiAqCiAqIFVu
bGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29m
dHdhcmUKICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4g
IkFTIElTIiBCQVNJUywKICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJ
TkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuCiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNw
ZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQKICogbGltaXRhdGlvbnMgdW5k
ZXIgdGhlIExpY2Vuc2UuCiAqLwoKI2lmbmRlZiBBTkRST0lEX1BST0NFU1NfU1RBVEVfSAojZGVmaW5l
IEFORFJPSURfUFJPQ0VTU19TVEFURV9ICgojaW5jbHVkZSA8YmluZGVyL0lCaW5kZXIuaD4KI2luY2x1
ZGUgPHV0aWxzL0tleWVkVmVjdG9yLmg+CiNpbmNsdWRlIDx1dGlscy9TdHJpbmc4Lmg+CiNpbmNsdWRl
IDx1dGlscy9TdHJpbmcxNi5oPgoKI2luY2x1ZGUgPHV0aWxzL3RocmVhZHMuaD4KCiNpbmNsdWRlIDxw
dGhyZWFkLmg+CgovLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KbmFtZXNwYWNlIGFuZHJvaWQgewoKY2xhc3MgSVBD
VGhyZWFkU3RhdGU7CgpjbGFzcyBQcm9jZXNzU3RhdGUgOiBwdWJsaWMgdmlydHVhbCBSZWZCYXNlCnsK
cHVibGljOgogICAgc3RhdGljICBzcDxQcm9jZXNzU3RhdGU+ICAgIHNlbGYoKTsKICAgIC8qIGluaXRX
aXRoRHJpdmVyKCkgY2FuIGJlIHVzZWQgdG8gY29uZmlndXJlIGxpYmJpbmRlciB0byB1c2UKICAgICAq
IGEgZGlmZmVyZW50IGJpbmRlciBkcml2ZXIgZGV2IG5vZGUuIEl0IG11c3QgYmUgY2FsbGVkICpiZWZv
cmUqCiAgICAgKiBhbnkgY2FsbCB0byBQcm9jZXNzU3RhdGU6OnNlbGYoKS4gL2Rldi9iaW5kZXIgcmVt
YWlucyB0aGUgZGVmYXVsdC4KICAgICAqLwogICAgc3RhdGljICBzcDxQcm9jZXNzU3RhdGU+ICAgIGlu
aXRXaXRoRHJpdmVyKGNvbnN0IGNoYXIgKmRyaXZlcik7CgogICAgICAgICAgICB2b2lkICAgICAgICAg
ICAgICAgIHNldENvbnRleHRPYmplY3QoY29uc3Qgc3A8SUJpbmRlcj4mIG9iamVjdCk7CiAgICAgICAg
ICAgIHNwPElCaW5kZXI+ICAgICAgICAgZ2V0Q29udGV4dE9iamVjdChjb25zdCBzcDxJQmluZGVyPiYg
Y2FsbGVyKTsKICAgICAgICAKICAgICAgICAgICAgdm9pZCAgICAgICAgICAgICAgICBzZXRDb250ZXh0
T2JqZWN0KGNvbnN0IHNwPElCaW5kZXI+JiBvYmplY3QsCiAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBTdHJpbmcxNiYgbmFtZSk7CiAgICAgICAgICAgIHNw
PElCaW5kZXI+ICAgICAgICAgZ2V0Q29udGV4dE9iamVjdChjb25zdCBTdHJpbmcxNiYgbmFtZSwKICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNwPElCaW5k
ZXI+JiBjYWxsZXIpOwoKICAgICAgICAgICAgdm9pZCAgICAgICAgICAgICAgICBzdGFydFRocmVhZFBv
b2woKTsKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICB0eXBlZGVmIGJvb2wgKCpjb250ZXh0X2No
ZWNrX2Z1bmMpKGNvbnN0IFN0cmluZzE2JiBuYW1lLAogICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICBjb25zdCBzcDxJQmluZGVyPiYgY2FsbGVyLAogICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICB2b2lkKiB1c2VyRGF0YSk7CiAgICAgICAgCiAgICAgICAgICAgIGJvb2wg
ICAgICAgICAgICAgICAgaXNDb250ZXh0TWFuYWdlcih2b2lkKSBjb25zdDsKICAgICAgICAgICAgYm9v
bCAgICAgICAgICAgICAgICBiZWNvbWVDb250ZXh0TWFuYWdlcigKICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgY29udGV4dF9jaGVja19mdW5jIGNoZWNrRnVuYywKICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgdm9pZCogdXNlckRhdGEpOwoKICAgICAgICAgICAgc3A8SUJpbmRl
cj4gICAgICAgICBnZXRTdHJvbmdQcm94eUZvckhhbmRsZShpbnQzMl90IGhhbmRsZSk7CiAgICAgICAg
ICAgIHdwPElCaW5kZXI+ICAgICAgICAgZ2V0V2Vha1Byb3h5Rm9ySGFuZGxlKGludDMyX3QgaGFuZGxl
KTsKICAgICAgICAgICAgdm9pZCAgICAgICAgICAgICAgICBleHB1bmdlSGFuZGxlKGludDMyX3QgaGFu
ZGxlLCBJQmluZGVyKiBiaW5kZXIpOwoKICAgICAgICAgICAgdm9pZCAgICAgICAgICAgICAgICBzcGF3
blBvb2xlZFRocmVhZChib29sIGlzTWFpbik7CiAgICAgICAgICAgIAogICAgICAgICAgICBzdGF0dXNf
dCAgICAgICAgICAgIHNldFRocmVhZFBvb2xNYXhUaHJlYWRDb3VudChzaXplX3QgbWF4VGhyZWFkcyk7
CiAgICAgICAgICAgIHZvaWQgICAgICAgICAgICAgICAgZ2l2ZVRocmVhZFBvb2xOYW1lKCk7CgogICAg
ICAgICAgICBTdHJpbmc4ICAgICAgICAgICAgIGdldERyaXZlck5hbWUoKTsKCnByaXZhdGU6CiAgICBm
cmllbmQgY2xhc3MgSVBDVGhyZWFkU3RhdGU7CiAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICBQcm9jZXNzU3RhdGUoY29uc3QgY2hhciogZHJpdmVyKTsKICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICB+UHJvY2Vzc1N0YXRlKCk7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
IFByb2Nlc3NTdGF0ZShjb25zdCBQcm9jZXNzU3RhdGUmIG8pOwogICAgICAgICAgICBQcm9jZXNzU3Rh
dGUmICAgICAgIG9wZXJhdG9yPShjb25zdCBQcm9jZXNzU3RhdGUmIG8pOwogICAgICAgICAgICBTdHJp
bmc4ICAgICAgICAgICAgIG1ha2VCaW5kZXJUaHJlYWROYW1lKCk7CgogICAgICAgICAgICBzdHJ1Y3Qg
aGFuZGxlX2VudHJ5IHsKICAgICAgICAgICAgICAgIElCaW5kZXIqIGJpbmRlcjsKICAgICAgICAgICAg
ICAgIFJlZkJhc2U6OndlYWtyZWZfdHlwZSogcmVmczsKICAgICAgICAgICAgfTsKCiAgICAgICAgICAg
IGhhbmRsZV9lbnRyeSogICAgICAgbG9va3VwSGFuZGxlTG9ja2VkKGludDMyX3QgaGFuZGxlKTsKCiAg
ICAgICAgICAgIFN0cmluZzggICAgICAgICAgICAgbURyaXZlck5hbWU7CiAgICAgICAgICAgIGludCAg
ICAgICAgICAgICAgICAgbURyaXZlckZEOwogICAgICAgICAgICB2b2lkKiAgICAgICAgICAgICAgIG1W
TVN0YXJ0OwoKICAgICAgICAgICAgLy8gUHJvdGVjdHMgdGhyZWFkIGNvdW50IHZhcmlhYmxlIGJlbG93
LgogICAgICAgICAgICBwdGhyZWFkX211dGV4X3QgICAgIG1UaHJlYWRDb3VudExvY2s7CiAgICAgICAg
ICAgIHB0aHJlYWRfY29uZF90ICAgICAgbVRocmVhZENvdW50RGVjcmVtZW50OwogICAgICAgICAgICAv
LyBOdW1iZXIgb2YgYmluZGVyIHRocmVhZHMgY3VycmVudCBleGVjdXRpbmcgYSBjb21tYW5kLgogICAg
ICAgICAgICBzaXplX3QgICAgICAgICAgICAgIG1FeGVjdXRpbmdUaHJlYWRzQ291bnQ7CiAgICAgICAg
ICAgIC8vIE1heGltdW0gbnVtYmVyIGZvciBiaW5kZXIgdGhyZWFkcyBhbGxvd2VkIGZvciB0aGlzIHBy
b2Nlc3MuCiAgICAgICAgICAgIHNpemVfdCAgICAgICAgICAgICAgbU1heFRocmVhZHM7CiAgICAgICAg
ICAgIC8vIFRpbWUgd2hlbiB0aHJlYWQgcG9vbCB3YXMgZW1wdGllZAogICAgICAgICAgICBpbnQ2NF90
ICAgICAgICAgICAgIG1TdGFydmF0aW9uU3RhcnRUaW1lTXM7CgogICAgbXV0YWJsZSBNdXRleCAgICAg
ICAgICAgICAgIG1Mb2NrOyAgLy8gcHJvdGVjdHMgZXZlcnl0aGluZyBiZWxvdy4KCiAgICAgICAgICAg
IFZlY3RvcjxoYW5kbGVfZW50cnk+bUhhbmRsZVRvT2JqZWN0OwoKICAgICAgICAgICAgYm9vbCAgICAg
ICAgICAgICAgICBtTWFuYWdlc0NvbnRleHRzOwogICAgICAgICAgICBjb250ZXh0X2NoZWNrX2Z1bmMg
IG1CaW5kZXJDb250ZXh0Q2hlY2tGdW5jOwogICAgICAgICAgICB2b2lkKiAgICAgICAgICAgICAgIG1C
aW5kZXJDb250ZXh0VXNlckRhdGE7CgogICAgICAgICAgICBLZXllZFZlY3RvcjxTdHJpbmcxNiwgc3A8
SUJpbmRlcj4gPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1Db250ZXh0czsKCgogICAg
ICAgICAgICBTdHJpbmc4ICAgICAgICAgICAgIG1Sb290RGlyOwogICAgICAgICAgICBib29sICAgICAg
ICAgICAgICAgIG1UaHJlYWRQb29sU3RhcnRlZDsKICAgIHZvbGF0aWxlIGludDMyX3QgICAgICAgICAg
ICBtVGhyZWFkUG9vbFNlcTsKfTsKICAgIAp9OyAvLyBuYW1lc3BhY2UgYW5kcm9pZAoKLy8gLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tCgojZW5kaWYgLy8gQU5EUk9JRF9QUk9DRVNTX1NUQVRFX0gK</data><mime>application/octet-stream</mime><width>0</width><height>0</height><duration>0</duration><resource-attributes><file-name>ProcessState.h</file-name></resource-attributes></resource><resource><data encoding="base64">LyoKICogQ29weXJpZ2h0IChDKSAyMDA1IFRoZSBBbmRyb2lkIE9wZW4gU291cmNlIFByb2plY3QKICoK
ICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNl
bnNlIik7CiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0
aCB0aGUgTGljZW5zZS4KICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0CiAq
CiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wCiAqCiAqIFVu
bGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29m
dHdhcmUKICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4g
IkFTIElTIiBCQVNJUywKICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJ
TkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuCiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNw
ZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQKICogbGltaXRhdGlvbnMgdW5k
ZXIgdGhlIExpY2Vuc2UuCiAqLwoKLy8KI2lmbmRlZiBBTkRST0lEX0lJTlRFUkZBQ0VfSAojZGVmaW5l
IEFORFJPSURfSUlOVEVSRkFDRV9ICgojaW5jbHVkZSA8YmluZGVyL0JpbmRlci5oPgoKbmFtZXNwYWNl
IGFuZHJvaWQgewoKLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKY2xhc3MgSUludGVyZmFjZSA6IHB1YmxpYyB2aXJ0dWFs
IFJlZkJhc2UKewpwdWJsaWM6CiAgICAgICAgICAgIElJbnRlcmZhY2UoKTsKICAgICAgICAgICAgc3Rh
dGljIHNwPElCaW5kZXI+ICBhc0JpbmRlcihjb25zdCBJSW50ZXJmYWNlKik7CiAgICAgICAgICAgIHN0
YXRpYyBzcDxJQmluZGVyPiAgYXNCaW5kZXIoY29uc3Qgc3A8SUludGVyZmFjZT4mKTsKCnByb3RlY3Rl
ZDoKICAgIHZpcnR1YWwgICAgICAgICAgICAgICAgICAgICB+SUludGVyZmFjZSgpOwogICAgdmlydHVh
bCBJQmluZGVyKiAgICAgICAgICAgIG9uQXNCaW5kZXIoKSA9IDA7Cn07CgovLyAtLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgp0
ZW1wbGF0ZTx0eXBlbmFtZSBJTlRFUkZBQ0U+CmlubGluZSBzcDxJTlRFUkZBQ0U+IGludGVyZmFjZV9j
YXN0KGNvbnN0IHNwPElCaW5kZXI+JiBvYmopCnsKICAgIHJldHVybiBJTlRFUkZBQ0U6OmFzSW50ZXJm
YWNlKG9iaik7Cn0KCi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCnRlbXBsYXRlPHR5cGVuYW1lIElOVEVSRkFDRT4KY2xh
c3MgQm5JbnRlcmZhY2UgOiBwdWJsaWMgSU5URVJGQUNFLCBwdWJsaWMgQkJpbmRlcgp7CnB1YmxpYzoK
ICAgIHZpcnR1YWwgc3A8SUludGVyZmFjZT4gICAgICBxdWVyeUxvY2FsSW50ZXJmYWNlKGNvbnN0IFN0
cmluZzE2JiBfZGVzY3JpcHRvcik7CiAgICB2aXJ0dWFsIGNvbnN0IFN0cmluZzE2JiAgICAgZ2V0SW50
ZXJmYWNlRGVzY3JpcHRvcigpIGNvbnN0OwoKcHJvdGVjdGVkOgogICAgdmlydHVhbCBJQmluZGVyKiAg
ICAgICAgICAgIG9uQXNCaW5kZXIoKTsKfTsKCi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCnRlbXBsYXRlPHR5cGVuYW1l
IElOVEVSRkFDRT4KY2xhc3MgQnBJbnRlcmZhY2UgOiBwdWJsaWMgSU5URVJGQUNFLCBwdWJsaWMgQnBS
ZWZCYXNlCnsKcHVibGljOgogICAgZXhwbGljaXQgICAgICAgICAgICAgICAgICAgIEJwSW50ZXJmYWNl
KGNvbnN0IHNwPElCaW5kZXI+JiByZW1vdGUpOwoKcHJvdGVjdGVkOgogICAgdmlydHVhbCBJQmluZGVy
KiAgICAgICAgICAgIG9uQXNCaW5kZXIoKTsKfTsKCi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCiNkZWZpbmUgREVDTEFS
RV9NRVRBX0lOVEVSRkFDRShJTlRFUkZBQ0UpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwK
ICAgIHN0YXRpYyBjb25zdCA6OmFuZHJvaWQ6OlN0cmluZzE2IGRlc2NyaXB0b3I7ICAgICAgICAgICAg
ICAgICAgICAgICAgXAogICAgc3RhdGljIDo6YW5kcm9pZDo6c3A8SSMjSU5URVJGQUNFPiBhc0ludGVy
ZmFjZSggICAgICAgICAgICAgICAgICAgICBcCiAgICAgICAgICAgIGNvbnN0IDo6YW5kcm9pZDo6c3A8
OjphbmRyb2lkOjpJQmluZGVyPiYgb2JqKTsgICAgICAgICAgICAgIFwKICAgIHZpcnR1YWwgY29uc3Qg
OjphbmRyb2lkOjpTdHJpbmcxNiYgZ2V0SW50ZXJmYWNlRGVzY3JpcHRvcigpIGNvbnN0OyAgXAogICAg
SSMjSU5URVJGQUNFKCk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICBcCiAgICB2aXJ0dWFsIH5JIyNJTlRFUkZBQ0UoKTsgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgIFwKCgojZGVmaW5lIElNUExFTUVOVF9NRVRBX0lOVEVSRkFDRShJ
TlRFUkZBQ0UsIE5BTUUpICAgICAgICAgICAgICAgICAgICAgICBcCiAgICBjb25zdCA6OmFuZHJvaWQ6
OlN0cmluZzE2IEkjI0lOVEVSRkFDRTo6ZGVzY3JpcHRvcihOQU1FKTsgICAgICAgICAgIFwKICAgIGNv
bnN0IDo6YW5kcm9pZDo6U3RyaW5nMTYmICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgXAogICAgICAgICAgICBJIyNJTlRFUkZBQ0U6OmdldEludGVyZmFjZURlc2NyaXB0b3IoKSBj
b25zdCB7ICAgICAgICAgICAgICBcCiAgICAgICAgcmV0dXJuIEkjI0lOVEVSRkFDRTo6ZGVzY3JpcHRv
cjsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKICAgIH0gICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAogICAgOjphbmRy
b2lkOjpzcDxJIyNJTlRFUkZBQ0U+IEkjI0lOVEVSRkFDRTo6YXNJbnRlcmZhY2UoICAgICAgICAgICAg
ICBcCiAgICAgICAgICAgIGNvbnN0IDo6YW5kcm9pZDo6c3A8OjphbmRyb2lkOjpJQmluZGVyPiYgb2Jq
KSAgICAgICAgICAgICAgIFwKICAgIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAogICAgICAgIDo6YW5kcm9pZDo6c3A8SSMjSU5U
RVJGQUNFPiBpbnRyOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCiAgICAgICAgaWYgKG9i
aiAhPSBOVUxMKSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwK
ICAgICAgICAgICAgaW50ciA9IHN0YXRpY19jYXN0PEkjI0lOVEVSRkFDRSo+KCAgICAgICAgICAgICAg
ICAgICAgICAgICAgXAogICAgICAgICAgICAgICAgb2JqLT5xdWVyeUxvY2FsSW50ZXJmYWNlKCAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICBcCiAgICAgICAgICAgICAgICAgICAgICAgIEkjI0lOVEVS
RkFDRTo6ZGVzY3JpcHRvcikuZ2V0KCkpOyAgICAgICAgICAgICAgIFwKICAgICAgICAgICAgaWYgKGlu
dHIgPT0gTlVMTCkgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAogICAg
ICAgICAgICAgICAgaW50ciA9IG5ldyBCcCMjSU5URVJGQUNFKG9iaik7ICAgICAgICAgICAgICAgICAg
ICAgICAgICBcCiAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgIFwKICAgICAgICB9ICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAogICAgICAgIHJldHVybiBpbnRyOyAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCiAgICB9ICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgIFwKICAgIEkjI0lOVEVSRkFDRTo6SSMjSU5URVJGQUNFKCkgeyB9ICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgXAogICAgSSMjSU5URVJGQUNFOjp+SSMjSU5URVJGQUNFKCkgeyB9ICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCgoKI2RlZmluZSBDSEVDS19JTlRFUkZBQ0Uo
aW50ZXJmYWNlLCBkYXRhLCByZXBseSkgICAgICAgICAgICAgICAgICAgICAgICAgXAogICAgaWYgKCEo
ZGF0YSkuY2hlY2tJbnRlcmZhY2UodGhpcykpIHsgcmV0dXJuIFBFUk1JU1NJT05fREVOSUVEOyB9ICAg
ICBcCgoKLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLQovLyBObyB1c2VyLXNlcnZpY2VhYmxlIHBhcnRzIGFmdGVyIHRoaXMu
Li4KCnRlbXBsYXRlPHR5cGVuYW1lIElOVEVSRkFDRT4KaW5saW5lIHNwPElJbnRlcmZhY2U+IEJuSW50
ZXJmYWNlPElOVEVSRkFDRT46OnF1ZXJ5TG9jYWxJbnRlcmZhY2UoCiAgICAgICAgY29uc3QgU3RyaW5n
MTYmIF9kZXNjcmlwdG9yKQp7CiAgICBpZiAoX2Rlc2NyaXB0b3IgPT0gSU5URVJGQUNFOjpkZXNjcmlw
dG9yKSByZXR1cm4gdGhpczsKICAgIHJldHVybiBOVUxMOwp9Cgp0ZW1wbGF0ZTx0eXBlbmFtZSBJTlRF
UkZBQ0U+CmlubGluZSBjb25zdCBTdHJpbmcxNiYgQm5JbnRlcmZhY2U8SU5URVJGQUNFPjo6Z2V0SW50
ZXJmYWNlRGVzY3JpcHRvcigpIGNvbnN0CnsKICAgIHJldHVybiBJTlRFUkZBQ0U6OmdldEludGVyZmFj
ZURlc2NyaXB0b3IoKTsKfQoKdGVtcGxhdGU8dHlwZW5hbWUgSU5URVJGQUNFPgpJQmluZGVyKiBCbklu
dGVyZmFjZTxJTlRFUkZBQ0U+OjpvbkFzQmluZGVyKCkKewogICAgcmV0dXJuIHRoaXM7Cn0KCnRlbXBs
YXRlPHR5cGVuYW1lIElOVEVSRkFDRT4KaW5saW5lIEJwSW50ZXJmYWNlPElOVEVSRkFDRT46OkJwSW50
ZXJmYWNlKGNvbnN0IHNwPElCaW5kZXI+JiByZW1vdGUpCiAgICA6IEJwUmVmQmFzZShyZW1vdGUpCnsK
fQoKdGVtcGxhdGU8dHlwZW5hbWUgSU5URVJGQUNFPgppbmxpbmUgSUJpbmRlciogQnBJbnRlcmZhY2U8
SU5URVJGQUNFPjo6b25Bc0JpbmRlcigpCnsKICAgIHJldHVybiByZW1vdGUoKTsKfQogICAgCi8vIC0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0KCn07IC8vIG5hbWVzcGFjZSBhbmRyb2lkCgojZW5kaWYgLy8gQU5EUk9JRF9JSU5URVJG
QUNFX0gK</data><mime>application/octet-stream</mime><width>0</width><height>0</height><duration>0</duration><resource-attributes><file-name>IInterface.h</file-name></resource-attributes></resource><resource><data encoding="base64">LyoKICogQ29weXJpZ2h0IChDKSAyMDA4IFRoZSBBbmRyb2lkIE9wZW4gU291cmNlIFByb2plY3QKICoK
ICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNl
bnNlIik7CiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0
aCB0aGUgTGljZW5zZS4KICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0CiAq
CiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wCiAqCiAqIFVu
bGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29m
dHdhcmUKICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4g
IkFTIElTIiBCQVNJUywKICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJ
TkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuCiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNw
ZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQKICogbGltaXRhdGlvbnMgdW5k
ZXIgdGhlIExpY2Vuc2UuCiAqLwoKI2lmbmRlZiBBTkRST0lEX0lNRURJQVBMQVlFUlNFUlZJQ0VfSAoj
ZGVmaW5lIEFORFJPSURfSU1FRElBUExBWUVSU0VSVklDRV9ICgojaW5jbHVkZSA8dXRpbHMvRXJyb3Jz
Lmg+ICAvLyBmb3Igc3RhdHVzX3QKI2luY2x1ZGUgPHV0aWxzL0tleWVkVmVjdG9yLmg+CiNpbmNsdWRl
IDx1dGlscy9SZWZCYXNlLmg+CiNpbmNsdWRlIDx1dGlscy9TdHJpbmc4Lmg+CiNpbmNsdWRlIDxiaW5k
ZXIvSUludGVyZmFjZS5oPgojaW5jbHVkZSA8YmluZGVyL1BhcmNlbC5oPgojaW5jbHVkZSA8c3lzdGVt
L2F1ZGlvLmg+CgojaW5jbHVkZSA8bWVkaWEvSU1lZGlhUGxheWVyQ2xpZW50Lmg+CiNpbmNsdWRlIDxt
ZWRpYS9JTWVkaWFQbGF5ZXIuaD4KI2luY2x1ZGUgPG1lZGlhL0lNZWRpYU1ldGFkYXRhUmV0cmlldmVy
Lmg+CgpuYW1lc3BhY2UgYW5kcm9pZCB7CgpzdHJ1Y3QgSUhEQ1A7CmNsYXNzIElNZWRpYUNvZGVjTGlz
dDsKc3RydWN0IElNZWRpYUhUVFBTZXJ2aWNlOwpjbGFzcyBJTWVkaWFSZWNvcmRlcjsKY2xhc3MgSU9N
WDsKY2xhc3MgSVJlbW90ZURpc3BsYXk7CmNsYXNzIElSZW1vdGVEaXNwbGF5Q2xpZW50OwpzdHJ1Y3Qg
SVN0cmVhbVNvdXJjZTsKCmNsYXNzIElNZWRpYVBsYXllclNlcnZpY2U6IHB1YmxpYyBJSW50ZXJmYWNl
CnsKcHVibGljOgogICAgREVDTEFSRV9NRVRBX0lOVEVSRkFDRShNZWRpYVBsYXllclNlcnZpY2UpOwoK
ICAgIHZpcnR1YWwgc3A8SU1lZGlhUmVjb3JkZXI+IGNyZWF0ZU1lZGlhUmVjb3JkZXIoY29uc3QgU3Ry
aW5nMTYgJm9wUGFja2FnZU5hbWUpID0gMDsKICAgIHZpcnR1YWwgc3A8SU1lZGlhTWV0YWRhdGFSZXRy
aWV2ZXI+IGNyZWF0ZU1ldGFkYXRhUmV0cmlldmVyKCkgPSAwOwogICAgdmlydHVhbCBzcDxJTWVkaWFQ
bGF5ZXI+IGNyZWF0ZShjb25zdCBzcDxJTWVkaWFQbGF5ZXJDbGllbnQ+JiBjbGllbnQsCiAgICAgICAg
ICAgIGF1ZGlvX3Nlc3Npb25fdCBhdWRpb1Nlc3Npb25JZCA9IEFVRElPX1NFU1NJT05fQUxMT0NBVEUp
ID0gMDsKICAgIHZpcnR1YWwgc3A8SU9NWD4gICAgICAgICAgICBnZXRPTVgoKSA9IDA7CiAgICB2aXJ0
dWFsIHNwPElIRENQPiAgICAgICAgICAgbWFrZUhEQ1AoYm9vbCBjcmVhdGVFbmNyeXB0aW9uTW9kdWxl
KSA9IDA7CiAgICB2aXJ0dWFsIHNwPElNZWRpYUNvZGVjTGlzdD4gZ2V0Q29kZWNMaXN0KCkgY29uc3Qg
PSAwOwoKICAgIC8vIENvbm5lY3RzIHRvIGEgcmVtb3RlIGRpc3BsYXkuCiAgICAvLyAnaWZhY2UnIHNw
ZWNpZmllcyB0aGUgYWRkcmVzcyBvZiB0aGUgbG9jYWwgaW50ZXJmYWNlIG9uIHdoaWNoIHRvIGxpc3Rl
biBmb3IKICAgIC8vIGEgY29ubmVjdGlvbiBmcm9tIHRoZSByZW1vdGUgZGlzcGxheSBhcyBhbiBpcCBh
ZGRyZXNzIGFuZCBwb3J0IG51bWJlcgogICAgLy8gb2YgdGhlIGZvcm0gIngueC54Lng6eSIuICBUaGUg
bWVkaWEgc2VydmVyIHNob3VsZCBjYWxsIGJhY2sgaW50byB0aGUgcHJvdmlkZWQgcmVtb3RlCiAgICAv
LyBkaXNwbGF5IGNsaWVudCB3aGVuIGRpc3BsYXkgY29ubmVjdGlvbiwgZGlzY29ubmVjdGlvbiBvciBl
cnJvcnMgb2NjdXIuCiAgICAvLyBUaGUgYXNzdW1wdGlvbiBpcyB0aGF0IGF0IG1vc3Qgb25lIHJlbW90
ZSBkaXNwbGF5IHdpbGwgYmUgY29ubmVjdGVkIHRvIHRoZQogICAgLy8gcHJvdmlkZWQgaW50ZXJmYWNl
IGF0IGEgdGltZS4KICAgIHZpcnR1YWwgc3A8SVJlbW90ZURpc3BsYXk+IGxpc3RlbkZvclJlbW90ZURp
c3BsYXkoY29uc3QgU3RyaW5nMTYgJm9wUGFja2FnZU5hbWUsCiAgICAgICAgICAgIGNvbnN0IHNwPElS
ZW1vdGVEaXNwbGF5Q2xpZW50PiYgY2xpZW50LCBjb25zdCBTdHJpbmc4JiBpZmFjZSkgPSAwOwoKICAg
IC8vIGNvZGVjcyBhbmQgYXVkaW8gZGV2aWNlcyB1c2FnZSB0cmFja2luZyBmb3IgdGhlIGJhdHRlcnkg
YXBwCiAgICBlbnVtIEJhdHRlcnlEYXRhQml0cyB7CiAgICAgICAgLy8gdHJhY2tpbmcgYXVkaW8gY29k
ZWMKICAgICAgICBrQmF0dGVyeURhdGFUcmFja0F1ZGlvICAgICAgICAgID0gMHgxLAogICAgICAgIC8v
IHRyYWNraW5nIHZpZGVvIGNvZGVjCiAgICAgICAga0JhdHRlcnlEYXRhVHJhY2tWaWRlbyAgICAgICAg
ICA9IDB4MiwKICAgICAgICAvLyBjb2RlYyBpcyBzdGFydGVkLCBvdGhlcndpc2UgY29kZWMgaXMgcGF1
c2VkCiAgICAgICAga0JhdHRlcnlEYXRhQ29kZWNTdGFydGVkICAgICAgICA9IDB4NCwKICAgICAgICAv
LyB0cmFja2luZyBkZWNvZGVyIChmb3IgbWVkaWEgcGxheWVyKSwKICAgICAgICAvLyBvdGhlcndpc2Ug
dHJhY2tpbmcgZW5jb2RlciAoZm9yIG1lZGlhIHJlY29yZGVyKQogICAgICAgIGtCYXR0ZXJ5RGF0YVRy
YWNrRGVjb2RlciAgICAgICAgPSAweDgsCiAgICAgICAgLy8gc3RhcnQgdG8gcGxheSBhbiBhdWRpbyBv
biBhbiBhdWRpbyBkZXZpY2UKICAgICAgICBrQmF0dGVyeURhdGFBdWRpb0ZsaW5nZXJTdGFydCAgID0g
MHgxMCwKICAgICAgICAvLyBzdG9wL3BhdXNlIHRoZSBhdWRpbyBwbGF5YmFjawogICAgICAgIGtCYXR0
ZXJ5RGF0YUF1ZGlvRmxpbmdlclN0b3AgICAgPSAweDIwLAogICAgICAgIC8vIGF1ZGlvIGlzIHJvdW50
ZWQgdG8gc3BlYWtlcgogICAgICAgIGtCYXR0ZXJ5RGF0YVNwZWFrZXJPbiAgICAgICAgICAgPSAweDQw
LAogICAgICAgIC8vIGF1ZGlvIGlzIHJvdW50ZWQgdG8gZGV2aWNlcyBvdGhlciB0aGFuIHNwZWFrZXIK
ICAgICAgICBrQmF0dGVyeURhdGFPdGhlckF1ZGlvRGV2aWNlT24gID0gMHg4MCwKICAgIH07CgogICAg
dmlydHVhbCB2b2lkIGFkZEJhdHRlcnlEYXRhKHVpbnQzMl90IHBhcmFtcykgPSAwOwogICAgdmlydHVh
bCBzdGF0dXNfdCBwdWxsQmF0dGVyeURhdGEoUGFyY2VsKiByZXBseSkgPSAwOwp9OwoKLy8gLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLQoKY2xhc3MgQm5NZWRpYVBsYXllclNlcnZpY2U6IHB1YmxpYyBCbkludGVyZmFjZTxJ
TWVkaWFQbGF5ZXJTZXJ2aWNlPgp7CnB1YmxpYzoKICAgIHZpcnR1YWwgc3RhdHVzX3QgICAgb25UcmFu
c2FjdCggdWludDMyX3QgY29kZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29u
c3QgUGFyY2VsJiBkYXRhLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQYXJjZWwq
IHJlcGx5LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1aW50MzJfdCBmbGFncyA9
IDApOwp9OwoKfTsgLy8gbmFtZXNwYWNlIGFuZHJvaWQKCiNlbmRpZiAvLyBBTkRST0lEX0lNRURJQVBM
QVlFUlNFUlZJQ0VfSAo=</data><mime>application/octet-stream</mime><width>0</width><height>0</height><duration>0</duration><resource-attributes><file-name>IMediaPlayerService.h</file-name></resource-attributes></resource><resource><data encoding="base64">LyoKKioKKiogQ29weXJpZ2h0IDIwMDgsIFRoZSBBbmRyb2lkIE9wZW4gU291cmNlIFByb2plY3QKKioK
KiogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNl
bnNlIik7CioqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0
aCB0aGUgTGljZW5zZS4KKiogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0Cioq
CioqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKKioKKiogVW5s
ZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0
d2FyZQoqKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAi
QVMgSVMiIEJBU0lTLAoqKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lO
RCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KKiogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3Bl
Y2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAoqKiBsaW1pdGF0aW9ucyB1bmRl
ciB0aGUgTGljZW5zZS4KKi8KCi8vIFByb3h5IGZvciBtZWRpYSBwbGF5ZXIgaW1wbGVtZW50YXRpb25z
CgovLyNkZWZpbmUgTE9HX05ERUJVRyAwCiNkZWZpbmUgTE9HX1RBRyAiTWVkaWFQbGF5ZXJTZXJ2aWNl
IgojaW5jbHVkZSA8dXRpbHMvTG9nLmg+CgojaW5jbHVkZSA8c3lzL3R5cGVzLmg+CiNpbmNsdWRlIDxz
eXMvc3RhdC5oPgojaW5jbHVkZSA8c3lzL3RpbWUuaD4KI2luY2x1ZGUgPGRpcmVudC5oPgojaW5jbHVk
ZSA8dW5pc3RkLmg+CgojaW5jbHVkZSA8c3RyaW5nLmg+CgojaW5jbHVkZSA8Y3V0aWxzL2F0b21pYy5o
PgojaW5jbHVkZSA8Y3V0aWxzL3Byb3BlcnRpZXMuaD4gLy8gZm9yIHByb3BlcnR5X2dldAoKI2luY2x1
ZGUgPHV0aWxzL21pc2MuaD4KCiNpbmNsdWRlIDxiaW5kZXIvSVBDVGhyZWFkU3RhdGUuaD4KI2luY2x1
ZGUgPGJpbmRlci9JU2VydmljZU1hbmFnZXIuaD4KI2luY2x1ZGUgPGJpbmRlci9NZW1vcnlIZWFwQmFz
ZS5oPgojaW5jbHVkZSA8YmluZGVyL01lbW9yeUJhc2UuaD4KI2luY2x1ZGUgPGd1aS9TdXJmYWNlLmg+
CiNpbmNsdWRlIDx1dGlscy9FcnJvcnMuaD4gIC8vIGZvciBzdGF0dXNfdAojaW5jbHVkZSA8dXRpbHMv
U3RyaW5nOC5oPgojaW5jbHVkZSA8dXRpbHMvU3lzdGVtQ2xvY2suaD4KI2luY2x1ZGUgPHV0aWxzL1Rp
bWVycy5oPgojaW5jbHVkZSA8dXRpbHMvVmVjdG9yLmg+CgojaW5jbHVkZSA8bWVkaWEvQXVkaW9Qb2xp
Y3lIZWxwZXIuaD4KI2luY2x1ZGUgPG1lZGlhL0lNZWRpYUhUVFBTZXJ2aWNlLmg+CiNpbmNsdWRlIDxt
ZWRpYS9JUmVtb3RlRGlzcGxheS5oPgojaW5jbHVkZSA8bWVkaWEvSVJlbW90ZURpc3BsYXlDbGllbnQu
aD4KI2luY2x1ZGUgPG1lZGlhL01lZGlhUGxheWVySW50ZXJmYWNlLmg+CiNpbmNsdWRlIDxtZWRpYS9t
ZWRpYXJlY29yZGVyLmg+CiNpbmNsdWRlIDxtZWRpYS9NZWRpYU1ldGFkYXRhUmV0cmlldmVySW50ZXJm
YWNlLmg+CiNpbmNsdWRlIDxtZWRpYS9NZXRhZGF0YS5oPgojaW5jbHVkZSA8bWVkaWEvQXVkaW9UcmFj
ay5oPgojaW5jbHVkZSA8bWVkaWEvTWVtb3J5TGVha1RyYWNrVXRpbC5oPgojaW5jbHVkZSA8bWVkaWEv
c3RhZ2VmcmlnaHQvTWVkaWFDb2RlY0xpc3QuaD4KI2luY2x1ZGUgPG1lZGlhL3N0YWdlZnJpZ2h0L01l
ZGlhRXJyb3JzLmg+CiNpbmNsdWRlIDxtZWRpYS9zdGFnZWZyaWdodC9VdGlscy5oPgojaW5jbHVkZSA8
bWVkaWEvc3RhZ2VmcmlnaHQvZm91bmRhdGlvbi9BRGVidWcuaD4KI2luY2x1ZGUgPG1lZGlhL3N0YWdl
ZnJpZ2h0L2ZvdW5kYXRpb24vQUxvb3BlclJvc3Rlci5oPgojaW5jbHVkZSA8bWVkaWEvc3RhZ2Vmcmln
aHQvU3VyZmFjZVV0aWxzLmg+CiNpbmNsdWRlIDxtZWRpYXV0aWxzL0JhdHRlcnlOb3RpZmllci5oPgoK
I2luY2x1ZGUgPG1lbXVucmVhY2hhYmxlL21lbXVucmVhY2hhYmxlLmg+CiNpbmNsdWRlIDxzeXN0ZW0v
YXVkaW8uaD4KCiNpbmNsdWRlIDxwcml2YXRlL2FuZHJvaWRfZmlsZXN5c3RlbV9jb25maWcuaD4KCiNp
bmNsdWRlICJBY3Rpdml0eU1hbmFnZXIuaCIKI2luY2x1ZGUgIk1lZGlhUmVjb3JkZXJDbGllbnQuaCIK
I2luY2x1ZGUgIk1lZGlhUGxheWVyU2VydmljZS5oIgojaW5jbHVkZSAiTWV0YWRhdGFSZXRyaWV2ZXJD
bGllbnQuaCIKI2luY2x1ZGUgIk1lZGlhUGxheWVyRmFjdG9yeS5oIgoKI2luY2x1ZGUgIlRlc3RQbGF5
ZXJTdHViLmgiCiNpbmNsdWRlICJudXBsYXllci9OdVBsYXllckRyaXZlci5oIgoKI2luY2x1ZGUgPE9N
WC5oPgoKI2luY2x1ZGUgIkhEQ1AuaCIKI2luY2x1ZGUgIkhUVFBCYXNlLmgiCiNpbmNsdWRlICJSZW1v
dGVEaXNwbGF5LmgiCgpuYW1lc3BhY2Ugewp1c2luZyBhbmRyb2lkOjptZWRpYTo6TWV0YWRhdGE7CnVz
aW5nIGFuZHJvaWQ6OnN0YXR1c190Owp1c2luZyBhbmRyb2lkOjpPSzsKdXNpbmcgYW5kcm9pZDo6QkFE
X1ZBTFVFOwp1c2luZyBhbmRyb2lkOjpOT1RfRU5PVUdIX0RBVEE7CnVzaW5nIGFuZHJvaWQ6OlBhcmNl
bDsKCi8vIE1heCBudW1iZXIgb2YgZW50cmllcyBpbiB0aGUgZmlsdGVyLgpjb25zdCBpbnQga01heEZp
bHRlclNpemUgPSA2NDsgIC8vIEkgcHVsbGVkIHRoYXQgb3V0IG9mIHRoaW4gYWlyLgoKY29uc3QgZmxv
YXQga01heFJlcXVpcmVkU3BlZWQgPSA4LjBmOyAvLyBmb3IgUENNIHRyYWNrcyBhbGxvdyB1cCB0byA4
eCBzcGVlZHVwLgoKLy8gRklYTUU6IE1vdmUgYWxsIHRoZSBtZXRhZGF0YSByZWxhdGVkIGZ1bmN0aW9u
IGluIHRoZSBNZXRhZGF0YS5jcHAKCgovLyBVbm1hcnNoYWxsIGEgZmlsdGVyIGZyb20gYSBQYXJjZWwu
Ci8vIEZpbHRlciBmb3JtYXQgaW4gYSBwYXJjZWw6Ci8vCi8vICAwIDEgMiAzIDQgNSA2IDcgOCA5IDAg
MSAyIDMgNCA1IDYgNyA4IDkgMCAxIDIgMyA0IDUgNiA3IDggOSAwIDEKLy8gKy0rLSstKy0rLSstKy0r
LSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSsKLy8gfCAgICAg
ICAgICAgICAgICAgICAgICAgbnVtYmVyIG9mIGVudHJpZXMgKG4pICAgICAgICAgICAgICAgICAgIHwK
Ly8gKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0r
LSstKy0rLSsKLy8gfCAgICAgICAgICAgICAgICAgICAgICAgbWV0YWRhdGEgdHlwZSAxICAgICAgICAg
ICAgICAgICAgICAgICAgIHwKLy8gKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0r
LSstKy0rLSstKy0rLSstKy0rLSstKy0rLSsKLy8gfCAgICAgICAgICAgICAgICAgICAgICAgbWV0YWRh
dGEgdHlwZSAyICAgICAgICAgICAgICAgICAgICAgICAgIHwKLy8gKy0rLSstKy0rLSstKy0rLSstKy0r
LSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSsKLy8gIC4uLi4KLy8gKy0r
LSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0r
LSsKLy8gfCAgICAgICAgICAgICAgICAgICAgICAgbWV0YWRhdGEgdHlwZSBuICAgICAgICAgICAgICAg
ICAgICAgICAgIHwKLy8gKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0r
LSstKy0rLSstKy0rLSstKy0rLSsKLy8KLy8gQHBhcmFtIHAgUGFyY2VsIHRoYXQgc2hvdWxkIHN0YXJ0
IHdpdGggYSBmaWx0ZXIuCi8vIEBwYXJhbVtvdXRdIGZpbHRlciBPbiBleGl0IGNvbnRhaW5zIHRoZSBs
aXN0IG9mIG1ldGFkYXRhIHR5cGUgdG8gYmUKLy8gICAgICAgICAgICAgICAgICAgIGZpbHRlcmVkLgov
LyBAcGFyYW1bb3V0XSBzdGF0dXMgT24gZXhpdCBjb250YWlucyB0aGUgc3RhdHVzIGNvZGUgdG8gYmUg
cmV0dXJuZWQuCi8vIEByZXR1cm4gdHJ1ZSBpZiB0aGUgcGFyY2VsIHN0YXJ0cyB3aXRoIGEgdmFsaWQg
ZmlsdGVyLgpib29sIHVubWFyc2hhbGxGaWx0ZXIoY29uc3QgUGFyY2VsJiBwLAogICAgICAgICAgICAg
ICAgICAgICAgTWV0YWRhdGE6OkZpbHRlciAqZmlsdGVyLAogICAgICAgICAgICAgICAgICAgICAgc3Rh
dHVzX3QgKnN0YXR1cykKewogICAgaW50MzJfdCB2YWw7CiAgICBpZiAocC5yZWFkSW50MzIoJnZhbCkg
IT0gT0spCiAgICB7CiAgICAgICAgQUxPR0UoIkZhaWxlZCB0byByZWFkIGZpbHRlcidzIGxlbmd0aCIp
OwogICAgICAgICpzdGF0dXMgPSBOT1RfRU5PVUdIX0RBVEE7CiAgICAgICAgcmV0dXJuIGZhbHNlOwog
ICAgfQoKICAgIGlmKCB2YWwgPiBrTWF4RmlsdGVyU2l6ZSB8fCB2YWwgPCAwKQogICAgewogICAgICAg
IEFMT0dFKCJJbnZhbGlkIGZpbHRlciBsZW4gJWQiLCB2YWwpOwogICAgICAgICpzdGF0dXMgPSBCQURf
VkFMVUU7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQoKICAgIGNvbnN0IHNpemVfdCBudW0gPSB2
YWw7CgogICAgZmlsdGVyLT5jbGVhcigpOwogICAgZmlsdGVyLT5zZXRDYXBhY2l0eShudW0pOwoKICAg
IHNpemVfdCBzaXplID0gbnVtICogc2l6ZW9mKE1ldGFkYXRhOjpUeXBlKTsKCgogICAgaWYgKHAuZGF0
YUF2YWlsKCkgPCBzaXplKQogICAgewogICAgICAgIEFMT0dFKCJGaWx0ZXIgdG9vIHNob3J0IGV4cGVj
dGVkICV6dSBidXQgZ290ICV6dSIsIHNpemUsIHAuZGF0YUF2YWlsKCkpOwogICAgICAgICpzdGF0dXMg
PSBOT1RfRU5PVUdIX0RBVEE7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQoKICAgIGNvbnN0IE1l
dGFkYXRhOjpUeXBlICpkYXRhID0KICAgICAgICAgICAgc3RhdGljX2Nhc3Q8Y29uc3QgTWV0YWRhdGE6
OlR5cGUqPihwLnJlYWRJbnBsYWNlKHNpemUpKTsKCiAgICBpZiAoTlVMTCA9PSBkYXRhKQogICAgewog
ICAgICAgIEFMT0dFKCJGaWx0ZXIgaGFkIG5vIGRhdGEiKTsKICAgICAgICAqc3RhdHVzID0gQkFEX1ZB
TFVFOwogICAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KCiAgICAvLyBUT0RPOiBUaGUgc3RsIGltcGwg
b2YgdmVjdG9yIHdvdWxkIGJlIG1vcmUgZWZmaWNpZW50IGhlcmUKICAgIC8vIGJlY2F1c2UgaXQgZGVn
ZW5lcmF0ZXMgaW50byBhIG1lbWNweSBvbiBwb2QgdHlwZXMuIFRyeSB0bwogICAgLy8gcmVwbGFjZSBs
YXRlciBvciB1c2Ugc3RsOjpzZXQuCiAgICBmb3IgKHNpemVfdCBpID0gMDsgaSA8IG51bTsgKytpKQog
ICAgewogICAgICAgIGZpbHRlci0+YWRkKCpkYXRhKTsKICAgICAgICArK2RhdGE7CiAgICB9CiAgICAq
c3RhdHVzID0gT0s7CiAgICByZXR1cm4gdHJ1ZTsKfQoKLy8gQHBhcmFtIGZpbHRlciBPZiBtZXRhZGF0
YSB0eXBlLgovLyBAcGFyYW0gdmFsIFRvIGJlIHNlYXJjaGVkLgovLyBAcmV0dXJuIHRydWUgaWYgYSBt
YXRjaCB3YXMgZm91bmQuCmJvb2wgZmluZE1ldGFkYXRhKGNvbnN0IE1ldGFkYXRhOjpGaWx0ZXImIGZp
bHRlciwgY29uc3QgaW50MzJfdCB2YWwpCnsKICAgIC8vIERlYWwgd2l0aCBlbXB0eSBhbmQgQU5ZIHJp
Z2h0IGF3YXkKICAgIGlmIChmaWx0ZXIuaXNFbXB0eSgpKSByZXR1cm4gZmFsc2U7CiAgICBpZiAoZmls
dGVyWzBdID09IE1ldGFkYXRhOjprQW55KSByZXR1cm4gdHJ1ZTsKCiAgICByZXR1cm4gZmlsdGVyLmlu
ZGV4T2YodmFsKSA+PSAwOwp9Cgp9ICAvLyBhbm9ueW1vdXMgbmFtZXNwYWNlCgoKbmFtZXNwYWNlIHsK
dXNpbmcgYW5kcm9pZDo6UGFyY2VsOwp1c2luZyBhbmRyb2lkOjpTdHJpbmcxNjsKCi8vIG1hcnNoYWxs
aW5nIHRhZyBpbmRpY2F0aW5nIGZsYXR0ZW5lZCB1dGYxNiB0YWdzCi8vIGtlZXAgaW4gc3luYyB3aXRo
IGZyYW1ld29ya3MvYmFzZS9tZWRpYS9qYXZhL2FuZHJvaWQvbWVkaWEvQXVkaW9BdHRyaWJ1dGVzLmph
dmEKY29uc3QgaW50MzJfdCBrQXVkaW9BdHRyaWJ1dGVzTWFyc2hhbGxUYWdGbGF0dGVuVGFncyA9IDE7
CgovLyBBdWRpbyBhdHRyaWJ1dGVzIGZvcm1hdCBpbiBhIHBhcmNlbDoKLy8KLy8gIDAgMSAyIDMgNCA1
IDYgNyA4IDkgMCAxIDIgMyA0IDUgNiA3IDggOSAwIDEgMiAzIDQgNSA2IDcgOCA5IDAgMQovLyArLSst
Ky0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSst
KwovLyB8ICAgICAgICAgICAgICAgICAgICAgICB1c2FnZSAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgfAovLyArLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSst
Ky0rLSstKy0rLSstKy0rLSstKwovLyB8ICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50X3R5cGUg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgfAovLyArLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSst
Ky0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKwovLyB8ICAgICAgICAgICAgICAgICAg
ICAgICBzb3VyY2UgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfAovLyArLSstKy0rLSst
Ky0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKwovLyB8
ICAgICAgICAgICAgICAgICAgICAgICBmbGFncyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgfAovLyArLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSst
Ky0rLSstKy0rLSstKwovLyB8ICAgICAgICAgICAgICAgICAgICAgICBrQXVkaW9BdHRyaWJ1dGVzTWFy
c2hhbGxUYWdGbGF0dGVuVGFncyAgfCAvLyBpZ25vcmUgdGFncyBpZiBub3QgZm91bmQKLy8gKy0rLSst
Ky0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSsK
Ly8gfCAgICAgICAgICAgICAgICAgICAgICAgZmxhdHRlbmVkIHRhZ3MgaW4gVVRGMTYgICAgICAgICAg
ICAgICAgIHwKLy8gfCAgICAgICAgICAgICAgICAgICAgICAgICAuLi4gICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgIHwKLy8gKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0r
LSstKy0rLSstKy0rLSstKy0rLSstKy0rLSsKLy8KLy8gQHBhcmFtIHAgUGFyY2VsIHRoYXQgY29udGFp
bnMgYXVkaW8gYXR0cmlidXRlcy4KLy8gQHBhcmFtW291dF0gYXR0cmlidXRlcyBPbiBleGl0IHBvaW50
cyB0byBhbiBpbml0aWFsaXplZCBhdWRpb19hdHRyaWJ1dGVzX3Qgc3RydWN0dXJlCi8vIEBwYXJhbVtv
dXRdIHN0YXR1cyBPbiBleGl0IGNvbnRhaW5zIHRoZSBzdGF0dXMgY29kZSB0byBiZSByZXR1cm5lZC4K
dm9pZCB1bm1hcnNoYWxsQXVkaW9BdHRyaWJ1dGVzKGNvbnN0IFBhcmNlbCYgcGFyY2VsLCBhdWRpb19h
dHRyaWJ1dGVzX3QgKmF0dHJpYnV0ZXMpCnsKICAgIGF0dHJpYnV0ZXMtPnVzYWdlID0gKGF1ZGlvX3Vz
YWdlX3QpIHBhcmNlbC5yZWFkSW50MzIoKTsKICAgIGF0dHJpYnV0ZXMtPmNvbnRlbnRfdHlwZSA9IChh
dWRpb19jb250ZW50X3R5cGVfdCkgcGFyY2VsLnJlYWRJbnQzMigpOwogICAgYXR0cmlidXRlcy0+c291
cmNlID0gKGF1ZGlvX3NvdXJjZV90KSBwYXJjZWwucmVhZEludDMyKCk7CiAgICBhdHRyaWJ1dGVzLT5m
bGFncyA9IChhdWRpb19mbGFnc19tYXNrX3QpIHBhcmNlbC5yZWFkSW50MzIoKTsKICAgIGNvbnN0IGJv
b2wgaGFzRmxhdHRlbmVkVGFnID0gKHBhcmNlbC5yZWFkSW50MzIoKSA9PSBrQXVkaW9BdHRyaWJ1dGVz
TWFyc2hhbGxUYWdGbGF0dGVuVGFncyk7CiAgICBpZiAoaGFzRmxhdHRlbmVkVGFnKSB7CiAgICAgICAg
Ly8gdGhlIHRhZ3MgYXJlIFVURjE2LCBjb252ZXJ0IHRvIFVURjgKICAgICAgICBTdHJpbmcxNiB0YWdz
ID0gcGFyY2VsLnJlYWRTdHJpbmcxNigpOwogICAgICAgIHNzaXplX3QgcmVhbFRhZ1NpemUgPSB1dGYx
Nl90b191dGY4X2xlbmd0aCh0YWdzLnN0cmluZygpLCB0YWdzLnNpemUoKSk7CiAgICAgICAgaWYgKHJl
YWxUYWdTaXplIDw9IDApIHsKICAgICAgICAgICAgc3RyY3B5KGF0dHJpYnV0ZXMtPnRhZ3MsICIiKTsK
ICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAvLyBjb3B5IHRoZSBmbGF0dGVuZWQgc3RyaW5nIGlu
dG8gdGhlIGF0dHJpYnV0ZXMgYXMgdGhlIGRlc3RpbmF0aW9uIGZvciB0aGUgY29udmVyc2lvbjoKICAg
ICAgICAgICAgLy8gY29weWluZyBhcnJheSBzaXplIC0xLCBhcnJheSBmb3IgdGFncyB3YXMgY2FsbG9j
J2QsIG5vIG5lZWQgdG8gTlVMTC10ZXJtaW5hdGUgaXQKICAgICAgICAgICAgc2l6ZV90IHRhZ1NpemUg
PSByZWFsVGFnU2l6ZSA+IEFVRElPX0FUVFJJQlVURVNfVEFHU19NQVhfU0laRSAtIDEgPwogICAgICAg
ICAgICAgICAgICAgIEFVRElPX0FUVFJJQlVURVNfVEFHU19NQVhfU0laRSAtIDEgOiByZWFsVGFnU2l6
ZTsKICAgICAgICAgICAgdXRmMTZfdG9fdXRmOCh0YWdzLnN0cmluZygpLCB0YWdTaXplLCBhdHRyaWJ1
dGVzLT50YWdzLAogICAgICAgICAgICAgICAgICAgIHNpemVvZihhdHRyaWJ1dGVzLT50YWdzKSAvIHNp
emVvZihhdHRyaWJ1dGVzLT50YWdzWzBdKSk7CiAgICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgICBB
TE9HRSgidW5tYXJzaGFsbEF1ZGlvQXR0cmlidXRlcygpIHJlY2VpdmVkIHVuZmxhdHRlbmVkIHRhZ3Ms
IGlnbm9yaW5nIHRhZyB2YWx1ZXMiKTsKICAgICAgICBzdHJjcHkoYXR0cmlidXRlcy0+dGFncywgIiIp
OwogICAgfQp9Cn0gLy8gYW5vbnltb3VzIG5hbWVzcGFjZQoKCm5hbWVzcGFjZSBhbmRyb2lkIHsKCmV4
dGVybiBBTG9vcGVyUm9zdGVyIGdMb29wZXJSb3N0ZXI7CgoKc3RhdGljIGJvb2wgY2hlY2tQZXJtaXNz
aW9uKGNvbnN0IGNoYXIqIHBlcm1pc3Npb25TdHJpbmcpIHsKICAgIGlmIChnZXRwaWQoKSA9PSBJUENU
aHJlYWRTdGF0ZTo6c2VsZigpLT5nZXRDYWxsaW5nUGlkKCkpIHJldHVybiB0cnVlOwogICAgYm9vbCBv
ayA9IGNoZWNrQ2FsbGluZ1Blcm1pc3Npb24oU3RyaW5nMTYocGVybWlzc2lvblN0cmluZykpOwogICAg
aWYgKCFvaykgQUxPR0UoIlJlcXVlc3QgcmVxdWlyZXMgJXMiLCBwZXJtaXNzaW9uU3RyaW5nKTsKICAg
IHJldHVybiBvazsKfQoKLy8gVE9ETzogRmluZCByZWFsIGNhdXNlIG9mIEF1ZGlvL1ZpZGVvIGRlbGF5
IGluIFBWIGZyYW1ld29yayBhbmQgcmVtb3ZlIHRoaXMgd29ya2Fyb3VuZAovKiBzdGF0aWMgKi8gaW50
IE1lZGlhUGxheWVyU2VydmljZTo6QXVkaW9PdXRwdXQ6Om1NaW5CdWZmZXJDb3VudCA9IDQ7Ci8qIHN0
YXRpYyAqLyBib29sIE1lZGlhUGxheWVyU2VydmljZTo6QXVkaW9PdXRwdXQ6Om1Jc09uRW11bGF0b3Ig
PSBmYWxzZTsKCnZvaWQgTWVkaWFQbGF5ZXJTZXJ2aWNlOjppbnN0YW50aWF0ZSgpIHsKICAgIGRlZmF1
bHRTZXJ2aWNlTWFuYWdlcigpLT5hZGRTZXJ2aWNlKAogICAgICAgICAgICBTdHJpbmcxNigibWVkaWEu
cGxheWVyIiksIG5ldyBNZWRpYVBsYXllclNlcnZpY2UoKSk7Cn0KCk1lZGlhUGxheWVyU2VydmljZTo6
TWVkaWFQbGF5ZXJTZXJ2aWNlKCkKewogICAgQUxPR1YoIk1lZGlhUGxheWVyU2VydmljZSBjcmVhdGVk
Iik7CiAgICBtTmV4dENvbm5JZCA9IDE7CgogICAgTWVkaWFQbGF5ZXJGYWN0b3J5OjpyZWdpc3RlckJ1
aWx0aW5GYWN0b3JpZXMoKTsKfQoKTWVkaWFQbGF5ZXJTZXJ2aWNlOjp+TWVkaWFQbGF5ZXJTZXJ2aWNl
KCkKewogICAgQUxPR1YoIk1lZGlhUGxheWVyU2VydmljZSBkZXN0cm95ZWQiKTsKfQoKc3A8SU1lZGlh
UmVjb3JkZXI+IE1lZGlhUGxheWVyU2VydmljZTo6Y3JlYXRlTWVkaWFSZWNvcmRlcihjb25zdCBTdHJp
bmcxNiAmb3BQYWNrYWdlTmFtZSkKewogICAgcGlkX3QgcGlkID0gSVBDVGhyZWFkU3RhdGU6OnNlbGYo
KS0+Z2V0Q2FsbGluZ1BpZCgpOwogICAgc3A8TWVkaWFSZWNvcmRlckNsaWVudD4gcmVjb3JkZXIgPSBu
ZXcgTWVkaWFSZWNvcmRlckNsaWVudCh0aGlzLCBwaWQsIG9wUGFja2FnZU5hbWUpOwogICAgd3A8TWVk
aWFSZWNvcmRlckNsaWVudD4gdyA9IHJlY29yZGVyOwogICAgTXV0ZXg6OkF1dG9sb2NrIGxvY2sobUxv
Y2spOwogICAgbU1lZGlhUmVjb3JkZXJDbGllbnRzLmFkZCh3KTsKICAgIEFMT0dWKCJDcmVhdGUgbmV3
IG1lZGlhIHJlY29yZGVyIGNsaWVudCBmcm9tIHBpZCAlZCIsIHBpZCk7CiAgICByZXR1cm4gcmVjb3Jk
ZXI7Cn0KCnZvaWQgTWVkaWFQbGF5ZXJTZXJ2aWNlOjpyZW1vdmVNZWRpYVJlY29yZGVyQ2xpZW50KGNv
bnN0IHdwPE1lZGlhUmVjb3JkZXJDbGllbnQ+JiBjbGllbnQpCnsKICAgIE11dGV4OjpBdXRvbG9jayBs
b2NrKG1Mb2NrKTsKICAgIG1NZWRpYVJlY29yZGVyQ2xpZW50cy5yZW1vdmUoY2xpZW50KTsKICAgIEFM
T0dWKCJEZWxldGUgbWVkaWEgcmVjb3JkZXIgY2xpZW50Iik7Cn0KCnNwPElNZWRpYU1ldGFkYXRhUmV0
cmlldmVyPiBNZWRpYVBsYXllclNlcnZpY2U6OmNyZWF0ZU1ldGFkYXRhUmV0cmlldmVyKCkKewogICAg
cGlkX3QgcGlkID0gSVBDVGhyZWFkU3RhdGU6OnNlbGYoKS0+Z2V0Q2FsbGluZ1BpZCgpOwogICAgc3A8
TWV0YWRhdGFSZXRyaWV2ZXJDbGllbnQ+IHJldHJpZXZlciA9IG5ldyBNZXRhZGF0YVJldHJpZXZlckNs
aWVudChwaWQpOwogICAgQUxPR1YoIkNyZWF0ZSBuZXcgbWVkaWEgcmV0cmlldmVyIGZyb20gcGlkICVk
IiwgcGlkKTsKICAgIHJldHVybiByZXRyaWV2ZXI7Cn0KCnNwPElNZWRpYVBsYXllcj4gTWVkaWFQbGF5
ZXJTZXJ2aWNlOjpjcmVhdGUoY29uc3Qgc3A8SU1lZGlhUGxheWVyQ2xpZW50PiYgY2xpZW50LAogICAg
ICAgIGF1ZGlvX3Nlc3Npb25fdCBhdWRpb1Nlc3Npb25JZCkKewogICAgcGlkX3QgcGlkID0gSVBDVGhy
ZWFkU3RhdGU6OnNlbGYoKS0+Z2V0Q2FsbGluZ1BpZCgpOwogICAgaW50MzJfdCBjb25uSWQgPSBhbmRy
b2lkX2F0b21pY19pbmMoJm1OZXh0Q29ubklkKTsKCiAgICBzcDxDbGllbnQ+IGMgPSBuZXcgQ2xpZW50
KAogICAgICAgICAgICB0aGlzLCBwaWQsIGNvbm5JZCwgY2xpZW50LCBhdWRpb1Nlc3Npb25JZCwKICAg
ICAgICAgICAgSVBDVGhyZWFkU3RhdGU6OnNlbGYoKS0+Z2V0Q2FsbGluZ1VpZCgpKTsKCiAgICBBTE9H
VigiQ3JlYXRlIG5ldyBjbGllbnQoJWQpIGZyb20gcGlkICVkLCB1aWQgJWQsICIsIGNvbm5JZCwgcGlk
LAogICAgICAgICBJUENUaHJlYWRTdGF0ZTo6c2VsZigpLT5nZXRDYWxsaW5nVWlkKCkpOwoKICAgIHdw
PENsaWVudD4gdyA9IGM7CiAgICB7CiAgICAgICAgTXV0ZXg6OkF1dG9sb2NrIGxvY2sobUxvY2spOwog
ICAgICAgIG1DbGllbnRzLmFkZCh3KTsKICAgIH0KICAgIHJldHVybiBjOwp9CgpzcDxJTWVkaWFDb2Rl
Y0xpc3Q+IE1lZGlhUGxheWVyU2VydmljZTo6Z2V0Q29kZWNMaXN0KCkgY29uc3QgewogICAgcmV0dXJu
IE1lZGlhQ29kZWNMaXN0OjpnZXRMb2NhbEluc3RhbmNlKCk7Cn0KCnNwPElPTVg+IE1lZGlhUGxheWVy
U2VydmljZTo6Z2V0T01YKCkgewogICAgQUxPR0koIk1lZGlhUGxheWVyU2VydmljZTo6Z2V0T01YIik7
CiAgICBNdXRleDo6QXV0b2xvY2sgYXV0b0xvY2sobUxvY2spOwoKICAgIGlmIChtT01YLmdldCgpID09
IE5VTEwpIHsKICAgICAgICBtT01YID0gbmV3IE9NWDsKICAgIH0KCiAgICByZXR1cm4gbU9NWDsKfQoK
c3A8SUhEQ1A+IE1lZGlhUGxheWVyU2VydmljZTo6bWFrZUhEQ1AoYm9vbCBjcmVhdGVFbmNyeXB0aW9u
TW9kdWxlKSB7CiAgICByZXR1cm4gbmV3IEhEQ1AoY3JlYXRlRW5jcnlwdGlvbk1vZHVsZSk7Cn0KCnNw
PElSZW1vdGVEaXNwbGF5PiBNZWRpYVBsYXllclNlcnZpY2U6Omxpc3RlbkZvclJlbW90ZURpc3BsYXko
CiAgICAgICAgY29uc3QgU3RyaW5nMTYgJm9wUGFja2FnZU5hbWUsCiAgICAgICAgY29uc3Qgc3A8SVJl
bW90ZURpc3BsYXlDbGllbnQ+JiBjbGllbnQsIGNvbnN0IFN0cmluZzgmIGlmYWNlKSB7CiAgICBpZiAo
IWNoZWNrUGVybWlzc2lvbigiYW5kcm9pZC5wZXJtaXNzaW9uLkNPTlRST0xfV0lGSV9ESVNQTEFZIikp
IHsKICAgICAgICByZXR1cm4gTlVMTDsKICAgIH0KCiAgICByZXR1cm4gbmV3IFJlbW90ZURpc3BsYXko
b3BQYWNrYWdlTmFtZSwgY2xpZW50LCBpZmFjZS5zdHJpbmcoKSk7Cn0KCnN0YXR1c190IE1lZGlhUGxh
eWVyU2VydmljZTo6QXVkaW9PdXRwdXQ6OmR1bXAoaW50IGZkLCBjb25zdCBWZWN0b3I8U3RyaW5nMTY+
JiBhcmdzKSBjb25zdAp7CiAgICBjb25zdCBzaXplX3QgU0laRSA9IDI1NjsKICAgIGNoYXIgYnVmZmVy
W1NJWkVdOwogICAgU3RyaW5nOCByZXN1bHQ7CgogICAgcmVzdWx0LmFwcGVuZCgiIEF1ZGlvT3V0cHV0
XG4iKTsKICAgIHNucHJpbnRmKGJ1ZmZlciwgMjU1LCAiICBzdHJlYW0gdHlwZSglZCksIGxlZnQgLSBy
aWdodCB2b2x1bWUoJWYsICVmKVxuIiwKICAgICAgICAgICAgbVN0cmVhbVR5cGUsIG1MZWZ0Vm9sdW1l
LCBtUmlnaHRWb2x1bWUpOwogICAgcmVzdWx0LmFwcGVuZChidWZmZXIpOwogICAgc25wcmludGYoYnVm
ZmVyLCAyNTUsICIgIG1zZWMgcGVyIGZyYW1lKCVmKSwgbGF0ZW5jeSAoJWQpXG4iLAogICAgICAgICAg
ICBtTXNlY3NQZXJGcmFtZSwgKG1UcmFjayAhPSAwKSA/IG1UcmFjay0+bGF0ZW5jeSgpIDogLTEpOwog
ICAgcmVzdWx0LmFwcGVuZChidWZmZXIpOwogICAgc25wcmludGYoYnVmZmVyLCAyNTUsICIgIGF1eCBl
ZmZlY3QgaWQoJWQpLCBzZW5kIGxldmVsICglZilcbiIsCiAgICAgICAgICAgIG1BdXhFZmZlY3RJZCwg
bVNlbmRMZXZlbCk7CiAgICByZXN1bHQuYXBwZW5kKGJ1ZmZlcik7CgogICAgOjp3cml0ZShmZCwgcmVz
dWx0LnN0cmluZygpLCByZXN1bHQuc2l6ZSgpKTsKICAgIGlmIChtVHJhY2sgIT0gMCkgewogICAgICAg
IG1UcmFjay0+ZHVtcChmZCwgYXJncyk7CiAgICB9CiAgICByZXR1cm4gTk9fRVJST1I7Cn0KCnN0YXR1
c190IE1lZGlhUGxheWVyU2VydmljZTo6Q2xpZW50OjpkdW1wKGludCBmZCwgY29uc3QgVmVjdG9yPFN0
cmluZzE2PiYgYXJncykKewogICAgY29uc3Qgc2l6ZV90IFNJWkUgPSAyNTY7CiAgICBjaGFyIGJ1ZmZl
cltTSVpFXTsKICAgIFN0cmluZzggcmVzdWx0OwogICAgcmVzdWx0LmFwcGVuZCgiIENsaWVudFxuIik7
CiAgICBzbnByaW50ZihidWZmZXIsIDI1NSwgIiAgcGlkKCVkKSwgY29ubklkKCVkKSwgc3RhdHVzKCVk
KSwgbG9vcGluZyglcylcbiIsCiAgICAgICAgICAgIG1QaWQsIG1Db25uSWQsIG1TdGF0dXMsIG1Mb29w
PyJ0cnVlIjogImZhbHNlIik7CiAgICByZXN1bHQuYXBwZW5kKGJ1ZmZlcik7CiAgICB3cml0ZShmZCwg
cmVzdWx0LnN0cmluZygpLCByZXN1bHQuc2l6ZSgpKTsKICAgIGlmIChtUGxheWVyICE9IE5VTEwpIHsK
ICAgICAgICBtUGxheWVyLT5kdW1wKGZkLCBhcmdzKTsKICAgIH0KICAgIGlmIChtQXVkaW9PdXRwdXQg
IT0gMCkgewogICAgICAgIG1BdWRpb091dHB1dC0+ZHVtcChmZCwgYXJncyk7CiAgICB9CiAgICB3cml0
ZShmZCwgIlxuIiwgMSk7CiAgICByZXR1cm4gTk9fRVJST1I7Cn0KCi8qKgogKiBUaGUgb25seSBhcmd1
bWVudHMgdGhpcyB1bmRlcnN0YW5kcyByaWdodCBub3cgYXJlIC1jLCAtdm9uIGFuZCAtdm9mZiwKICog
d2hpY2ggYXJlIHBhcnNlZCBieSBBTG9vcGVyUm9zdGVyOjpkdW1wKCkKICovCnN0YXR1c190IE1lZGlh
UGxheWVyU2VydmljZTo6ZHVtcChpbnQgZmQsIGNvbnN0IFZlY3RvcjxTdHJpbmcxNj4mIGFyZ3MpCnsK
ICAgIGNvbnN0IHNpemVfdCBTSVpFID0gMjU2OwogICAgY2hhciBidWZmZXJbU0laRV07CiAgICBTdHJp
bmc4IHJlc3VsdDsKICAgIFNvcnRlZFZlY3Rvcjwgc3A8Q2xpZW50PiA+IGNsaWVudHM7IC8vdG8gc2Vy
aWFsaXNlIHRoZSBtdXRleCB1bmxvY2sgJiBjbGllbnQgZGVzdHJ1Y3Rpb24uCiAgICBTb3J0ZWRWZWN0
b3I8IHNwPE1lZGlhUmVjb3JkZXJDbGllbnQ+ID4gbWVkaWFSZWNvcmRlckNsaWVudHM7CgogICAgaWYg
KGNoZWNrQ2FsbGluZ1Blcm1pc3Npb24oU3RyaW5nMTYoImFuZHJvaWQucGVybWlzc2lvbi5EVU1QIikp
ID09IGZhbHNlKSB7CiAgICAgICAgc25wcmludGYoYnVmZmVyLCBTSVpFLCAiUGVybWlzc2lvbiBEZW5p
YWw6ICIKICAgICAgICAgICAgICAgICJjYW4ndCBkdW1wIE1lZGlhUGxheWVyU2VydmljZSBmcm9tIHBp
ZD0lZCwgdWlkPSVkXG4iLAogICAgICAgICAgICAgICAgSVBDVGhyZWFkU3RhdGU6OnNlbGYoKS0+Z2V0
Q2FsbGluZ1BpZCgpLAogICAgICAgICAgICAgICAgSVBDVGhyZWFkU3RhdGU6OnNlbGYoKS0+Z2V0Q2Fs
bGluZ1VpZCgpKTsKICAgICAgICByZXN1bHQuYXBwZW5kKGJ1ZmZlcik7CiAgICB9IGVsc2UgewogICAg
ICAgIE11dGV4OjpBdXRvbG9jayBsb2NrKG1Mb2NrKTsKICAgICAgICBmb3IgKGludCBpID0gMCwgbiA9
IG1DbGllbnRzLnNpemUoKTsgaSA8IG47ICsraSkgewogICAgICAgICAgICBzcDxDbGllbnQ+IGMgPSBt
Q2xpZW50c1tpXS5wcm9tb3RlKCk7CiAgICAgICAgICAgIGlmIChjICE9IDApIGMtPmR1bXAoZmQsIGFy
Z3MpOwogICAgICAgICAgICBjbGllbnRzLmFkZChjKTsKICAgICAgICB9CiAgICAgICAgaWYgKG1NZWRp
YVJlY29yZGVyQ2xpZW50cy5zaXplKCkgPT0gMCkgewogICAgICAgICAgICAgICAgcmVzdWx0LmFwcGVu
ZCgiIE5vIG1lZGlhIHJlY29yZGVyIGNsaWVudFxuXG4iKTsKICAgICAgICB9IGVsc2UgewogICAgICAg
ICAgICBmb3IgKGludCBpID0gMCwgbiA9IG1NZWRpYVJlY29yZGVyQ2xpZW50cy5zaXplKCk7IGkgPCBu
OyArK2kpIHsKICAgICAgICAgICAgICAgIHNwPE1lZGlhUmVjb3JkZXJDbGllbnQ+IGMgPSBtTWVkaWFS
ZWNvcmRlckNsaWVudHNbaV0ucHJvbW90ZSgpOwogICAgICAgICAgICAgICAgaWYgKGMgIT0gMCkgewog
ICAgICAgICAgICAgICAgICAgIHNucHJpbnRmKGJ1ZmZlciwgMjU1LCAiIE1lZGlhUmVjb3JkZXJDbGll
bnQgcGlkKCVkKVxuIiwgYy0+bVBpZCk7CiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmFwcGVuZChi
dWZmZXIpOwogICAgICAgICAgICAgICAgICAgIHdyaXRlKGZkLCByZXN1bHQuc3RyaW5nKCksIHJlc3Vs
dC5zaXplKCkpOwogICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9ICJcbiI7CiAgICAgICAgICAgICAg
ICAgICAgYy0+ZHVtcChmZCwgYXJncyk7CiAgICAgICAgICAgICAgICAgICAgbWVkaWFSZWNvcmRlckNs
aWVudHMuYWRkKGMpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQoKICAg
ICAgICByZXN1bHQuYXBwZW5kKCIgRmlsZXMgb3BlbmVkIGFuZC9vciBtYXBwZWQ6XG4iKTsKICAgICAg
ICBzbnByaW50ZihidWZmZXIsIFNJWkUsICIvcHJvYy8lZC9tYXBzIiwgZ2V0cGlkKCkpOwogICAgICAg
IEZJTEUgKmYgPSBmb3BlbihidWZmZXIsICJyIik7CiAgICAgICAgaWYgKGYpIHsKICAgICAgICAgICAg
d2hpbGUgKCFmZW9mKGYpKSB7CiAgICAgICAgICAgICAgICBmZ2V0cyhidWZmZXIsIFNJWkUsIGYpOwog
ICAgICAgICAgICAgICAgaWYgKHN0cnN0cihidWZmZXIsICIgL3N0b3JhZ2UvIikgfHwKICAgICAgICAg
ICAgICAgICAgICBzdHJzdHIoYnVmZmVyLCAiIC9zeXN0ZW0vc291bmRzLyIpIHx8CiAgICAgICAgICAg
ICAgICAgICAgc3Ryc3RyKGJ1ZmZlciwgIiAvZGF0YS8iKSB8fAogICAgICAgICAgICAgICAgICAgIHN0
cnN0cihidWZmZXIsICIgL3N5c3RlbS9tZWRpYS8iKSkgewogICAgICAgICAgICAgICAgICAgIHJlc3Vs
dC5hcHBlbmQoIiAgIik7CiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmFwcGVuZChidWZmZXIpOwog
ICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGZjbG9zZShmKTsKICAgICAg
ICB9IGVsc2UgewogICAgICAgICAgICByZXN1bHQuYXBwZW5kKCJjb3VsZG4ndCBvcGVuICIpOwogICAg
ICAgICAgICByZXN1bHQuYXBwZW5kKGJ1ZmZlcik7CiAgICAgICAgICAgIHJlc3VsdC5hcHBlbmQoIlxu
Iik7CiAgICAgICAgfQoKICAgICAgICBzbnByaW50ZihidWZmZXIsIFNJWkUsICIvcHJvYy8lZC9mZCIs
IGdldHBpZCgpKTsKICAgICAgICBESVIgKmQgPSBvcGVuZGlyKGJ1ZmZlcik7CiAgICAgICAgaWYgKGQp
IHsKICAgICAgICAgICAgc3RydWN0IGRpcmVudCAqZW50OwogICAgICAgICAgICB3aGlsZSgoZW50ID0g
cmVhZGRpcihkKSkgIT0gTlVMTCkgewogICAgICAgICAgICAgICAgaWYgKHN0cmNtcChlbnQtPmRfbmFt
ZSwiLiIpICYmIHN0cmNtcChlbnQtPmRfbmFtZSwiLi4iKSkgewogICAgICAgICAgICAgICAgICAgIHNu
cHJpbnRmKGJ1ZmZlciwgU0laRSwgIi9wcm9jLyVkL2ZkLyVzIiwgZ2V0cGlkKCksIGVudC0+ZF9uYW1l
KTsKICAgICAgICAgICAgICAgICAgICBzdHJ1Y3Qgc3RhdCBzOwogICAgICAgICAgICAgICAgICAgIGlm
IChsc3RhdChidWZmZXIsICZzKSA9PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgocy5z
dF9tb2RlICYgU19JRk1UKSA9PSBTX0lGTE5LKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBj
aGFyIGxpbmt0b1syNTZdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaW50IGxlbiA9IHJlYWRs
aW5rKGJ1ZmZlciwgbGlua3RvLCBzaXplb2YobGlua3RvKSk7CiAgICAgICAgICAgICAgICAgICAgICAg
ICAgICBpZihsZW4gPiAwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYobGVuID4g
MjU1KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmt0b1syNTJdID0gJy4n
OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5rdG9bMjUzXSA9ICcuJzsKICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlua3RvWzI1NF0gPSAnLic7CiAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmt0b1syNTVdID0gMDsKICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICBsaW5rdG9bbGVuXSA9IDA7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdHJzdHIobGlua3RvLCAiL3N0b3JhZ2UvIikgPT0g
bGlua3RvIHx8CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cnN0cihsaW5rdG8s
ICIvc3lzdGVtL3NvdW5kcy8iKSA9PSBsaW5rdG8gfHwKICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgc3Ryc3RyKGxpbmt0bywgIi9kYXRhLyIpID09IGxpbmt0byB8fAogICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICBzdHJzdHIobGlua3RvLCAiL3N5c3RlbS9tZWRpYS8iKSA9PSBs
aW5rdG8pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmFwcGVuZCgi
ICAiKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmFwcGVuZChidWZm
ZXIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQuYXBwZW5kKCIgLT4g
Iik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5hcHBlbmQobGlua3Rv
KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmFwcGVuZCgiXG4iKTsK
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAg
ICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAg
ICAgICByZXN1bHQuYXBwZW5kKCIgIHVuZXhwZWN0ZWQgdHlwZSBmb3IgIik7CiAgICAgICAgICAgICAg
ICAgICAgICAgICAgICByZXN1bHQuYXBwZW5kKGJ1ZmZlcik7CiAgICAgICAgICAgICAgICAgICAgICAg
ICAgICByZXN1bHQuYXBwZW5kKCJcbiIpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAg
ICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGNs
b3NlZGlyKGQpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJlc3VsdC5hcHBlbmQoImNvdWxk
bid0IG9wZW4gIik7CiAgICAgICAgICAgIHJlc3VsdC5hcHBlbmQoYnVmZmVyKTsKICAgICAgICAgICAg
cmVzdWx0LmFwcGVuZCgiXG4iKTsKICAgICAgICB9CgogICAgICAgIGdMb29wZXJSb3N0ZXIuZHVtcChm
ZCwgYXJncyk7CgogICAgICAgIGJvb2wgZHVtcE1lbSA9IGZhbHNlOwogICAgICAgIGJvb2wgdW5yZWFj
aGFibGVNZW1vcnkgPSBmYWxzZTsKICAgICAgICBmb3IgKHNpemVfdCBpID0gMDsgaSA8IGFyZ3Muc2l6
ZSgpOyBpKyspIHsKICAgICAgICAgICAgaWYgKGFyZ3NbaV0gPT0gU3RyaW5nMTYoIi1tIikpIHsKICAg
ICAgICAgICAgICAgIGR1bXBNZW0gPSB0cnVlOwogICAgICAgICAgICB9IGVsc2UgaWYgKGFyZ3NbaV0g
PT0gU3RyaW5nMTYoIi0tdW5yZWFjaGFibGUiKSkgewogICAgICAgICAgICAgICAgdW5yZWFjaGFibGVN
ZW1vcnkgPSB0cnVlOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGlmIChkdW1wTWVtKSB7
CiAgICAgICAgICAgIHJlc3VsdC5hcHBlbmQoIlxuRHVtcGluZyBtZW1vcnk6XG4iKTsKICAgICAgICAg
ICAgc3RkOjpzdHJpbmcgcyA9IGR1bXBNZW1vcnlBZGRyZXNzZXMoMTAwIC8qIGxpbWl0ICovKTsKICAg
ICAgICAgICAgcmVzdWx0LmFwcGVuZChzLmNfc3RyKCksIHMuc2l6ZSgpKTsKICAgICAgICB9CiAgICAg
ICAgaWYgKHVucmVhY2hhYmxlTWVtb3J5KSB7CiAgICAgICAgICAgIHJlc3VsdC5hcHBlbmQoIlxuRHVt
cGluZyB1bnJlYWNoYWJsZSBtZW1vcnk6XG4iKTsKICAgICAgICAgICAgLy8gVE9ETyAtIHNob3VsZCBs
aW1pdCBiZSBhbiBhcmd1bWVudCBwYXJhbWV0ZXI/CiAgICAgICAgICAgIHN0ZDo6c3RyaW5nIHMgPSBH
ZXRVbnJlYWNoYWJsZU1lbW9yeVN0cmluZyh0cnVlIC8qIGNvbnRlbnRzICovLCAxMDAwMCAvKiBsaW1p
dCAqLyk7CiAgICAgICAgICAgIHJlc3VsdC5hcHBlbmQocy5jX3N0cigpLCBzLnNpemUoKSk7CiAgICAg
ICAgfQogICAgfQogICAgd3JpdGUoZmQsIHJlc3VsdC5zdHJpbmcoKSwgcmVzdWx0LnNpemUoKSk7CiAg
ICByZXR1cm4gTk9fRVJST1I7Cn0KCnZvaWQgTWVkaWFQbGF5ZXJTZXJ2aWNlOjpyZW1vdmVDbGllbnQo
Y29uc3Qgd3A8Q2xpZW50PiYgY2xpZW50KQp7CiAgICBNdXRleDo6QXV0b2xvY2sgbG9jayhtTG9jayk7
CiAgICBtQ2xpZW50cy5yZW1vdmUoY2xpZW50KTsKfQoKYm9vbCBNZWRpYVBsYXllclNlcnZpY2U6Omhh
c0NsaWVudCh3cDxDbGllbnQ+IGNsaWVudCkKewogICAgTXV0ZXg6OkF1dG9sb2NrIGxvY2sobUxvY2sp
OwogICAgcmV0dXJuIG1DbGllbnRzLmluZGV4T2YoY2xpZW50KSAhPSBOQU1FX05PVF9GT1VORDsKfQoK
TWVkaWFQbGF5ZXJTZXJ2aWNlOjpDbGllbnQ6OkNsaWVudCgKICAgICAgICBjb25zdCBzcDxNZWRpYVBs
YXllclNlcnZpY2U+JiBzZXJ2aWNlLCBwaWRfdCBwaWQsCiAgICAgICAgaW50MzJfdCBjb25uSWQsIGNv
bnN0IHNwPElNZWRpYVBsYXllckNsaWVudD4mIGNsaWVudCwKICAgICAgICBhdWRpb19zZXNzaW9uX3Qg
YXVkaW9TZXNzaW9uSWQsIHVpZF90IHVpZCkKewogICAgQUxPR1YoIkNsaWVudCglZCkgY29uc3RydWN0
b3IiLCBjb25uSWQpOwogICAgbVBpZCA9IHBpZDsKICAgIG1Db25uSWQgPSBjb25uSWQ7CiAgICBtU2Vy
dmljZSA9IHNlcnZpY2U7CiAgICBtQ2xpZW50ID0gY2xpZW50OwogICAgbUxvb3AgPSBmYWxzZTsKICAg
IG1TdGF0dXMgPSBOT19JTklUOwogICAgbUF1ZGlvU2Vzc2lvbklkID0gYXVkaW9TZXNzaW9uSWQ7CiAg
ICBtVWlkID0gdWlkOwogICAgbVJldHJhbnNtaXRFbmRwb2ludFZhbGlkID0gZmFsc2U7CiAgICBtQXVk
aW9BdHRyaWJ1dGVzID0gTlVMTDsKCiNpZiBDQUxMQkFDS19BTlRBR09OSVpFUgogICAgQUxPR0QoImNy
ZWF0ZSBBbnRhZ29uaXplciIpOwogICAgbUFudGFnb25pemVyID0gbmV3IEFudGFnb25pemVyKG5vdGlm
eSwgdGhpcyk7CiNlbmRpZgp9CgpNZWRpYVBsYXllclNlcnZpY2U6OkNsaWVudDo6fkNsaWVudCgpCnsK
ICAgIEFMT0dWKCJDbGllbnQoJWQpIGRlc3RydWN0b3IgcGlkID0gJWQiLCBtQ29ubklkLCBtUGlkKTsK
ICAgIG1BdWRpb091dHB1dC5jbGVhcigpOwogICAgd3A8Q2xpZW50PiBjbGllbnQodGhpcyk7CiAgICBk
aXNjb25uZWN0KCk7CiAgICBtU2VydmljZS0+cmVtb3ZlQ2xpZW50KGNsaWVudCk7CiAgICBpZiAobUF1
ZGlvQXR0cmlidXRlcyAhPSBOVUxMKSB7CiAgICAgICAgZnJlZShtQXVkaW9BdHRyaWJ1dGVzKTsKICAg
IH0KICAgIGNsZWFyRGVhdGhOb3RpZmllcnMoKTsKfQoKdm9pZCBNZWRpYVBsYXllclNlcnZpY2U6OkNs
aWVudDo6ZGlzY29ubmVjdCgpCnsKICAgIEFMT0dWKCJkaXNjb25uZWN0KCVkKSBmcm9tIHBpZCAlZCIs
IG1Db25uSWQsIG1QaWQpOwogICAgLy8gZ3JhYiBsb2NhbCByZWZlcmVuY2UgYW5kIGNsZWFyIG1haW4g
cmVmZXJlbmNlIHRvIHByZXZlbnQgZnV0dXJlCiAgICAvLyBhY2Nlc3MgdG8gb2JqZWN0CiAgICBzcDxN
ZWRpYVBsYXllckJhc2U+IHA7CiAgICB7CiAgICAgICAgTXV0ZXg6OkF1dG9sb2NrIGwobUxvY2spOwog
ICAgICAgIHAgPSBtUGxheWVyOwogICAgICAgIG1DbGllbnQuY2xlYXIoKTsKICAgIH0KCiAgICBtUGxh
eWVyLmNsZWFyKCk7CgogICAgLy8gY2xlYXIgdGhlIG5vdGlmaWNhdGlvbiB0byBwcmV2ZW50IGNhbGxi
YWNrcyB0byBkZWFkIGNsaWVudAogICAgLy8gYW5kIHJlc2V0IHRoZSBwbGF5ZXIuIFdlIGFzc3VtZSB0
aGUgcGxheWVyIHdpbGwgc2VyaWFsaXplCiAgICAvLyBhY2Nlc3MgdG8gaXRzZWxmIGlmIG5lY2Vzc2Fy
eS4KICAgIGlmIChwICE9IDApIHsKICAgICAgICBwLT5zZXROb3RpZnlDYWxsYmFjaygwLCAwKTsKI2lm
IENBTExCQUNLX0FOVEFHT05JWkVSCiAgICAgICAgQUxPR0QoImtpbGwgQW50YWdvbml6ZXIiKTsKICAg
ICAgICBtQW50YWdvbml6ZXItPmtpbGwoKTsKI2VuZGlmCiAgICAgICAgcC0+cmVzZXQoKTsKICAgIH0K
CiAgICBkaXNjb25uZWN0TmF0aXZlV2luZG93KCk7CgogICAgSVBDVGhyZWFkU3RhdGU6OnNlbGYoKS0+
Zmx1c2hDb21tYW5kcygpOwp9CgpzcDxNZWRpYVBsYXllckJhc2U+IE1lZGlhUGxheWVyU2VydmljZTo6
Q2xpZW50OjpjcmVhdGVQbGF5ZXIocGxheWVyX3R5cGUgcGxheWVyVHlwZSkKewogICAgLy8gZGV0ZXJt
aW5lIGlmIHdlIGhhdmUgdGhlIHJpZ2h0IHBsYXllciB0eXBlCiAgICBzcDxNZWRpYVBsYXllckJhc2U+
IHAgPSBtUGxheWVyOwogICAgaWYgKChwICE9IE5VTEwpICYmIChwLT5wbGF5ZXJUeXBlKCkgIT0gcGxh
eWVyVHlwZSkpIHsKICAgICAgICBBTE9HVigiZGVsZXRlIHBsYXllciIpOwogICAgICAgIHAuY2xlYXIo
KTsKICAgIH0KICAgIGlmIChwID09IE5VTEwpIHsKICAgICAgICBwID0gTWVkaWFQbGF5ZXJGYWN0b3J5
OjpjcmVhdGVQbGF5ZXIocGxheWVyVHlwZSwgdGhpcywgbm90aWZ5LCBtUGlkKTsKICAgIH0KCiAgICBp
ZiAocCAhPSBOVUxMKSB7CiAgICAgICAgcC0+c2V0VUlEKG1VaWQpOwogICAgfQoKICAgIHJldHVybiBw
Owp9CgpNZWRpYVBsYXllclNlcnZpY2U6OkNsaWVudDo6U2VydmljZURlYXRoTm90aWZpZXI6OlNlcnZp
Y2VEZWF0aE5vdGlmaWVyKAogICAgICAgIGNvbnN0IHNwPElCaW5kZXI+JiBzZXJ2aWNlLAogICAgICAg
IGNvbnN0IHNwPE1lZGlhUGxheWVyQmFzZT4mIGxpc3RlbmVyLAogICAgICAgIGludCB3aGljaCkgewog
ICAgbVNlcnZpY2UgPSBzZXJ2aWNlOwogICAgbU9teCA9IG51bGxwdHI7CiAgICBtTGlzdGVuZXIgPSBs
aXN0ZW5lcjsKICAgIG1XaGljaCA9IHdoaWNoOwp9CgpNZWRpYVBsYXllclNlcnZpY2U6OkNsaWVudDo6
U2VydmljZURlYXRoTm90aWZpZXI6OlNlcnZpY2VEZWF0aE5vdGlmaWVyKAogICAgICAgIGNvbnN0IHNw
PElPbXg+JiBvbXgsCiAgICAgICAgY29uc3Qgc3A8TWVkaWFQbGF5ZXJCYXNlPiYgbGlzdGVuZXIsCiAg
ICAgICAgaW50IHdoaWNoKSB7CiAgICBtU2VydmljZSA9IG51bGxwdHI7CiAgICBtT214ID0gb214Owog
ICAgbUxpc3RlbmVyID0gbGlzdGVuZXI7CiAgICBtV2hpY2ggPSB3aGljaDsKfQoKTWVkaWFQbGF5ZXJT
ZXJ2aWNlOjpDbGllbnQ6OlNlcnZpY2VEZWF0aE5vdGlmaWVyOjp+U2VydmljZURlYXRoTm90aWZpZXIo
KSB7Cn0KCnZvaWQgTWVkaWFQbGF5ZXJTZXJ2aWNlOjpDbGllbnQ6OlNlcnZpY2VEZWF0aE5vdGlmaWVy
OjpiaW5kZXJEaWVkKGNvbnN0IHdwPElCaW5kZXI+JiAvKndobyovKSB7CiAgICBzcDxNZWRpYVBsYXll
ckJhc2U+IGxpc3RlbmVyID0gbUxpc3RlbmVyLnByb21vdGUoKTsKICAgIGlmIChsaXN0ZW5lciAhPSBO
VUxMKSB7CiAgICAgICAgbGlzdGVuZXItPnNlbmRFdmVudChNRURJQV9FUlJPUiwgTUVESUFfRVJST1Jf
U0VSVkVSX0RJRUQsIG1XaGljaCk7CiAgICB9IGVsc2UgewogICAgICAgIEFMT0dXKCJsaXN0ZW5lciBm
b3IgcHJvY2VzcyAlZCBkZWF0aCBpcyBnb25lIiwgbVdoaWNoKTsKICAgIH0KfQoKdm9pZCBNZWRpYVBs
YXllclNlcnZpY2U6OkNsaWVudDo6U2VydmljZURlYXRoTm90aWZpZXI6OnNlcnZpY2VEaWVkKAogICAg
ICAgIHVpbnQ2NF90IC8qIGNvb2tpZSAqLywKICAgICAgICBjb25zdCB3cDw6OmFuZHJvaWQ6OmhpZGw6
OmJhc2U6OlYxXzA6OklCYXNlPiYgLyogd2hvICovKSB7CiAgICBzcDxNZWRpYVBsYXllckJhc2U+IGxp
c3RlbmVyID0gbUxpc3RlbmVyLnByb21vdGUoKTsKICAgIGlmIChsaXN0ZW5lciAhPSBOVUxMKSB7CiAg
ICAgICAgbGlzdGVuZXItPnNlbmRFdmVudChNRURJQV9FUlJPUiwgTUVESUFfRVJST1JfU0VSVkVSX0RJ
RUQsIG1XaGljaCk7CiAgICB9IGVsc2UgewogICAgICAgIEFMT0dXKCJsaXN0ZW5lciBmb3IgcHJvY2Vz
cyAlZCBkZWF0aCBpcyBnb25lIiwgbVdoaWNoKTsKICAgIH0KfQoKdm9pZCBNZWRpYVBsYXllclNlcnZp
Y2U6OkNsaWVudDo6U2VydmljZURlYXRoTm90aWZpZXI6OnVubGlua1RvRGVhdGgoKSB7CiAgICBpZiAo
bVNlcnZpY2UgIT0gbnVsbHB0cikgewogICAgICAgIG1TZXJ2aWNlLT51bmxpbmtUb0RlYXRoKHRoaXMp
OwogICAgICAgIG1TZXJ2aWNlID0gbnVsbHB0cjsKICAgIH0gZWxzZSBpZiAobU9teCAhPSBudWxscHRy
KSB7CiAgICAgICAgbU9teC0+dW5saW5rVG9EZWF0aCh0aGlzKTsKICAgICAgICBtT214ID0gbnVsbHB0
cjsKICAgIH0KfQoKdm9pZCBNZWRpYVBsYXllclNlcnZpY2U6OkNsaWVudDo6Y2xlYXJEZWF0aE5vdGlm
aWVycygpIHsKICAgIGlmIChtRXh0cmFjdG9yRGVhdGhMaXN0ZW5lciAhPSBudWxscHRyKSB7CiAgICAg
ICAgbUV4dHJhY3RvckRlYXRoTGlzdGVuZXItPnVubGlua1RvRGVhdGgoKTsKICAgICAgICBtRXh0cmFj
dG9yRGVhdGhMaXN0ZW5lciA9IG51bGxwdHI7CiAgICB9CiAgICBpZiAobUNvZGVjRGVhdGhMaXN0ZW5l
ciAhPSBudWxscHRyKSB7CiAgICAgICAgbUNvZGVjRGVhdGhMaXN0ZW5lci0+dW5saW5rVG9EZWF0aCgp
OwogICAgICAgIG1Db2RlY0RlYXRoTGlzdGVuZXIgPSBudWxscHRyOwogICAgfQp9CgpzcDxNZWRpYVBs
YXllckJhc2U+IE1lZGlhUGxheWVyU2VydmljZTo6Q2xpZW50OjpzZXREYXRhU291cmNlX3ByZSgKICAg
ICAgICBwbGF5ZXJfdHlwZSBwbGF5ZXJUeXBlKQp7CiAgICBBTE9HVigicGxheWVyIHR5cGUgPSAlZCIs
IHBsYXllclR5cGUpOwogICAgY2xlYXJEZWF0aE5vdGlmaWVycygpOwoKICAgIC8vIGNyZWF0ZSB0aGUg
cmlnaHQgdHlwZSBvZiBwbGF5ZXIKICAgIHNwPE1lZGlhUGxheWVyQmFzZT4gcCA9IGNyZWF0ZVBsYXll
cihwbGF5ZXJUeXBlKTsKICAgIGlmIChwID09IE5VTEwpIHsKICAgICAgICByZXR1cm4gcDsKICAgIH0K
CiAgICBzcDxJU2VydmljZU1hbmFnZXI+IHNtID0gZGVmYXVsdFNlcnZpY2VNYW5hZ2VyKCk7CiAgICBz
cDxJQmluZGVyPiBiaW5kZXIgPSBzbS0+Z2V0U2VydmljZShTdHJpbmcxNigibWVkaWEuZXh0cmFjdG9y
IikpOwogICAgaWYgKGJpbmRlciA9PSBOVUxMKSB7CiAgICAgICAgQUxPR0UoImV4dHJhY3RvciBzZXJ2
aWNlIG5vdCBhdmFpbGFibGUiKTsKICAgICAgICByZXR1cm4gTlVMTDsKICAgIH0KICAgIG1FeHRyYWN0
b3JEZWF0aExpc3RlbmVyID0gbmV3IFNlcnZpY2VEZWF0aE5vdGlmaWVyKGJpbmRlciwgcCwgTUVESUFF
WFRSQUNUT1JfUFJPQ0VTU19ERUFUSCk7CiAgICBiaW5kZXItPmxpbmtUb0RlYXRoKG1FeHRyYWN0b3JE
ZWF0aExpc3RlbmVyKTsKCiAgICBpZiAocHJvcGVydHlfZ2V0X2Jvb2woInBlcnNpc3QubWVkaWEudHJl
YmxlX29teCIsIHRydWUpKSB7CiAgICAgICAgLy8gVHJlYmxlIElPbXgKICAgICAgICBzcDxJT214PiBv
bXggPSBJT214OjpnZXRTZXJ2aWNlKCk7CiAgICAgICAgaWYgKG9teCA9PSBudWxscHRyKSB7CiAgICAg
ICAgICAgIEFMT0dFKCJUcmVibGUgSU9teCBub3QgYXZhaWxhYmxlIik7CiAgICAgICAgICAgIHJldHVy
biBOVUxMOwogICAgICAgIH0KICAgICAgICBtQ29kZWNEZWF0aExpc3RlbmVyID0gbmV3IFNlcnZpY2VE
ZWF0aE5vdGlmaWVyKG9teCwgcCwgTUVESUFDT0RFQ19QUk9DRVNTX0RFQVRIKTsKICAgICAgICBvbXgt
PmxpbmtUb0RlYXRoKG1Db2RlY0RlYXRoTGlzdGVuZXIsIDApOwogICAgfSBlbHNlIHsKICAgICAgICAv
LyBMZWdhY3kgSU9NWAogICAgICAgIGJpbmRlciA9IHNtLT5nZXRTZXJ2aWNlKFN0cmluZzE2KCJtZWRp
YS5jb2RlYyIpKTsKICAgICAgICBpZiAoYmluZGVyID09IE5VTEwpIHsKICAgICAgICAgICAgQUxPR0Uo
ImNvZGVjIHNlcnZpY2Ugbm90IGF2YWlsYWJsZSIpOwogICAgICAgICAgICByZXR1cm4gTlVMTDsKICAg
ICAgICB9CiAgICAgICAgbUNvZGVjRGVhdGhMaXN0ZW5lciA9IG5ldyBTZXJ2aWNlRGVhdGhOb3RpZmll
cihiaW5kZXIsIHAsIE1FRElBQ09ERUNfUFJPQ0VTU19ERUFUSCk7CiAgICAgICAgYmluZGVyLT5saW5r
VG9EZWF0aChtQ29kZWNEZWF0aExpc3RlbmVyKTsKICAgIH0KCiAgICBpZiAoIXAtPmhhcmR3YXJlT3V0
cHV0KCkpIHsKICAgICAgICBNdXRleDo6QXV0b2xvY2sgbChtTG9jayk7CiAgICAgICAgbUF1ZGlvT3V0
cHV0ID0gbmV3IEF1ZGlvT3V0cHV0KG1BdWRpb1Nlc3Npb25JZCwgSVBDVGhyZWFkU3RhdGU6OnNlbGYo
KS0+Z2V0Q2FsbGluZ1VpZCgpLAogICAgICAgICAgICAgICAgbVBpZCwgbUF1ZGlvQXR0cmlidXRlcyk7
CiAgICAgICAgc3RhdGljX2Nhc3Q8TWVkaWFQbGF5ZXJJbnRlcmZhY2UqPihwLmdldCgpKS0+c2V0QXVk
aW9TaW5rKG1BdWRpb091dHB1dCk7CiAgICB9CgogICAgcmV0dXJuIHA7Cn0KCnZvaWQgTWVkaWFQbGF5
ZXJTZXJ2aWNlOjpDbGllbnQ6OnNldERhdGFTb3VyY2VfcG9zdCgKICAgICAgICBjb25zdCBzcDxNZWRp
YVBsYXllckJhc2U+JiBwLAogICAgICAgIHN0YXR1c190IHN0YXR1cykKewogICAgQUxPR1YoIiBzZXRE
YXRhU291cmNlIik7CiAgICBtU3RhdHVzID0gc3RhdHVzOwogICAgaWYgKG1TdGF0dXMgIT0gT0spIHsK
ICAgICAgICBBTE9HRSgiICBlcnJvcjogJWQiLCBtU3RhdHVzKTsKICAgICAgICByZXR1cm47CiAgICB9
CgogICAgLy8gU2V0IHRoZSByZS10cmFuc21pc3Npb24gZW5kcG9pbnQgaWYgb25lIHdhcyBjaG9zZW4u
CiAgICBpZiAobVJldHJhbnNtaXRFbmRwb2ludFZhbGlkKSB7CiAgICAgICAgbVN0YXR1cyA9IHAtPnNl
dFJldHJhbnNtaXRFbmRwb2ludCgmbVJldHJhbnNtaXRFbmRwb2ludCk7CiAgICAgICAgaWYgKG1TdGF0
dXMgIT0gTk9fRVJST1IpIHsKICAgICAgICAgICAgQUxPR0UoInNldFJldHJhbnNtaXRFbmRwb2ludCBl
cnJvcjogJWQiLCBtU3RhdHVzKTsKICAgICAgICB9CiAgICB9CgogICAgaWYgKG1TdGF0dXMgPT0gT0sp
IHsKICAgICAgICBtUGxheWVyID0gcDsKICAgIH0KfQoKc3RhdHVzX3QgTWVkaWFQbGF5ZXJTZXJ2aWNl
OjpDbGllbnQ6OnNldERhdGFTb3VyY2UoCiAgICAgICAgY29uc3Qgc3A8SU1lZGlhSFRUUFNlcnZpY2U+
ICZodHRwU2VydmljZSwKICAgICAgICBjb25zdCBjaGFyICp1cmwsCiAgICAgICAgY29uc3QgS2V5ZWRW
ZWN0b3I8U3RyaW5nOCwgU3RyaW5nOD4gKmhlYWRlcnMpCnsKICAgIEFMT0dWKCJzZXREYXRhU291cmNl
KCVzKSIsIHVybCk7CiAgICBpZiAodXJsID09IE5VTEwpCiAgICAgICAgcmV0dXJuIFVOS05PV05fRVJS
T1I7CgogICAgaWYgKChzdHJuY21wKHVybCwgImh0dHA6Ly8iLCA3KSA9PSAwKSB8fAogICAgICAgIChz
dHJuY21wKHVybCwgImh0dHBzOi8vIiwgOCkgPT0gMCkgfHwKICAgICAgICAoc3RybmNtcCh1cmwsICJy
dHNwOi8vIiwgNykgPT0gMCkpIHsKICAgICAgICBpZiAoIWNoZWNrUGVybWlzc2lvbigiYW5kcm9pZC5w
ZXJtaXNzaW9uLklOVEVSTkVUIikpIHsKICAgICAgICAgICAgcmV0dXJuIFBFUk1JU1NJT05fREVOSUVE
OwogICAgICAgIH0KICAgIH0KCiAgICBpZiAoc3RybmNtcCh1cmwsICJjb250ZW50Oi8vIiwgMTApID09
IDApIHsKICAgICAgICAvLyBnZXQgYSBmaWxlZGVzY3JpcHRvciBmb3IgdGhlIGNvbnRlbnQgVXJpIGFu
ZAogICAgICAgIC8vIHBhc3MgaXQgdG8gdGhlIHNldERhdGFTb3VyY2UoZmQpIG1ldGhvZAoKICAgICAg
ICBTdHJpbmcxNiB1cmwxNih1cmwpOwogICAgICAgIGludCBmZCA9IGFuZHJvaWQ6Om9wZW5Db250ZW50
UHJvdmlkZXJGaWxlKHVybDE2KTsKICAgICAgICBpZiAoZmQgPCAwKQogICAgICAgIHsKICAgICAgICAg
ICAgQUxPR0UoIkNvdWxkbid0IG9wZW4gZmQgZm9yICVzIiwgdXJsKTsKICAgICAgICAgICAgcmV0dXJu
IFVOS05PV05fRVJST1I7CiAgICAgICAgfQogICAgICAgIHNldERhdGFTb3VyY2UoZmQsIDAsIDB4N2Zm
ZmZmZmZmZkxMKTsgLy8gdGhpcyBzZXRzIG1TdGF0dXMKICAgICAgICBjbG9zZShmZCk7CiAgICAgICAg
cmV0dXJuIG1TdGF0dXM7CiAgICB9IGVsc2UgewogICAgICAgIHBsYXllcl90eXBlIHBsYXllclR5cGUg
PSBNZWRpYVBsYXllckZhY3Rvcnk6OmdldFBsYXllclR5cGUodGhpcywgdXJsKTsKICAgICAgICBzcDxN
ZWRpYVBsYXllckJhc2U+IHAgPSBzZXREYXRhU291cmNlX3ByZShwbGF5ZXJUeXBlKTsKICAgICAgICBp
ZiAocCA9PSBOVUxMKSB7CiAgICAgICAgICAgIHJldHVybiBOT19JTklUOwogICAgICAgIH0KCiAgICAg
ICAgc2V0RGF0YVNvdXJjZV9wb3N0KHAsIHAtPnNldERhdGFTb3VyY2UoaHR0cFNlcnZpY2UsIHVybCwg
aGVhZGVycykpOwogICAgICAgIHJldHVybiBtU3RhdHVzOwogICAgfQp9CgpzdGF0dXNfdCBNZWRpYVBs
YXllclNlcnZpY2U6OkNsaWVudDo6c2V0RGF0YVNvdXJjZShpbnQgZmQsIGludDY0X3Qgb2Zmc2V0LCBp
bnQ2NF90IGxlbmd0aCkKewogICAgQUxPR1YoInNldERhdGFTb3VyY2UgZmQ9JWQgKCVzKSwgb2Zmc2V0
PSVsbGQsIGxlbmd0aD0lbGxkIiwKICAgICAgICAgICAgZmQsIG5hbWVGb3JGZChmZCkuY19zdHIoKSwg
KGxvbmcgbG9uZykgb2Zmc2V0LCAobG9uZyBsb25nKSBsZW5ndGgpOwogICAgc3RydWN0IHN0YXQgc2I7
CiAgICBpbnQgcmV0ID0gZnN0YXQoZmQsICZzYik7CiAgICBpZiAocmV0ICE9IDApIHsKICAgICAgICBB
TE9HRSgiZnN0YXQoJWQpIGZhaWxlZDogJWQsICVzIiwgZmQsIHJldCwgc3RyZXJyb3IoZXJybm8pKTsK
ICAgICAgICByZXR1cm4gVU5LTk9XTl9FUlJPUjsKICAgIH0KCiAgICBBTE9HVigic3RfZGV2ICA9ICVs
bHUiLCBzdGF0aWNfY2FzdDx1bnNpZ25lZCBsb25nIGxvbmc+KHNiLnN0X2RldikpOwogICAgQUxPR1Yo
InN0X21vZGUgPSAldSIsIHNiLnN0X21vZGUpOwogICAgQUxPR1YoInN0X3VpZCAgPSAlbHUiLCBzdGF0
aWNfY2FzdDx1bnNpZ25lZCBsb25nPihzYi5zdF91aWQpKTsKICAgIEFMT0dWKCJzdF9naWQgID0gJWx1
Iiwgc3RhdGljX2Nhc3Q8dW5zaWduZWQgbG9uZz4oc2Iuc3RfZ2lkKSk7CiAgICBBTE9HVigic3Rfc2l6
ZSA9ICVsbHUiLCBzdGF0aWNfY2FzdDx1bnNpZ25lZCBsb25nIGxvbmc+KHNiLnN0X3NpemUpKTsKCiAg
ICBpZiAob2Zmc2V0ID49IHNiLnN0X3NpemUpIHsKICAgICAgICBBTE9HRSgib2Zmc2V0IGVycm9yIik7
CiAgICAgICAgcmV0dXJuIFVOS05PV05fRVJST1I7CiAgICB9CiAgICBpZiAob2Zmc2V0ICsgbGVuZ3Ro
ID4gc2Iuc3Rfc2l6ZSkgewogICAgICAgIGxlbmd0aCA9IHNiLnN0X3NpemUgLSBvZmZzZXQ7CiAgICAg
ICAgQUxPR1YoImNhbGN1bGF0ZWQgbGVuZ3RoID0gJWxsZCIsIChsb25nIGxvbmcpbGVuZ3RoKTsKICAg
IH0KCiAgICBwbGF5ZXJfdHlwZSBwbGF5ZXJUeXBlID0gTWVkaWFQbGF5ZXJGYWN0b3J5OjpnZXRQbGF5
ZXJUeXBlKHRoaXMsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgIGZkLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlbmd0aCk7CiAgICBzcDxNZWRpYVBsYXll
ckJhc2U+IHAgPSBzZXREYXRhU291cmNlX3ByZShwbGF5ZXJUeXBlKTsKICAgIGlmIChwID09IE5VTEwp
IHsKICAgICAgICByZXR1cm4gTk9fSU5JVDsKICAgIH0KCiAgICAvLyBub3cgc2V0IGRhdGEgc291cmNl
CiAgICBzZXREYXRhU291cmNlX3Bvc3QocCwgcC0+c2V0RGF0YVNvdXJjZShmZCwgb2Zmc2V0LCBsZW5n
dGgpKTsKICAgIHJldHVybiBtU3RhdHVzOwp9CgpzdGF0dXNfdCBNZWRpYVBsYXllclNlcnZpY2U6OkNs
aWVudDo6c2V0RGF0YVNvdXJjZSgKICAgICAgICBjb25zdCBzcDxJU3RyZWFtU291cmNlPiAmc291cmNl
KSB7CiAgICAvLyBjcmVhdGUgdGhlIHJpZ2h0IHR5cGUgb2YgcGxheWVyCiAgICBwbGF5ZXJfdHlwZSBw
bGF5ZXJUeXBlID0gTWVkaWFQbGF5ZXJGYWN0b3J5OjpnZXRQbGF5ZXJUeXBlKHRoaXMsIHNvdXJjZSk7
CiAgICBzcDxNZWRpYVBsYXllckJhc2U+IHAgPSBzZXREYXRhU291cmNlX3ByZShwbGF5ZXJUeXBlKTsK
ICAgIGlmIChwID09IE5VTEwpIHsKICAgICAgICByZXR1cm4gTk9fSU5JVDsKICAgIH0KCiAgICAvLyBu
b3cgc2V0IGRhdGEgc291cmNlCiAgICBzZXREYXRhU291cmNlX3Bvc3QocCwgcC0+c2V0RGF0YVNvdXJj
ZShzb3VyY2UpKTsKICAgIHJldHVybiBtU3RhdHVzOwp9CgpzdGF0dXNfdCBNZWRpYVBsYXllclNlcnZp
Y2U6OkNsaWVudDo6c2V0RGF0YVNvdXJjZSgKICAgICAgICBjb25zdCBzcDxJRGF0YVNvdXJjZT4gJnNv
dXJjZSkgewogICAgc3A8RGF0YVNvdXJjZT4gZGF0YVNvdXJjZSA9IERhdGFTb3VyY2U6OkNyZWF0ZUZy
b21JRGF0YVNvdXJjZShzb3VyY2UpOwogICAgcGxheWVyX3R5cGUgcGxheWVyVHlwZSA9IE1lZGlhUGxh
eWVyRmFjdG9yeTo6Z2V0UGxheWVyVHlwZSh0aGlzLCBkYXRhU291cmNlKTsKICAgIHNwPE1lZGlhUGxh
eWVyQmFzZT4gcCA9IHNldERhdGFTb3VyY2VfcHJlKHBsYXllclR5cGUpOwogICAgaWYgKHAgPT0gTlVM
TCkgewogICAgICAgIHJldHVybiBOT19JTklUOwogICAgfQogICAgLy8gbm93IHNldCBkYXRhIHNvdXJj
ZQogICAgc2V0RGF0YVNvdXJjZV9wb3N0KHAsIHAtPnNldERhdGFTb3VyY2UoZGF0YVNvdXJjZSkpOwog
ICAgcmV0dXJuIG1TdGF0dXM7Cn0KCnZvaWQgTWVkaWFQbGF5ZXJTZXJ2aWNlOjpDbGllbnQ6OmRpc2Nv
bm5lY3ROYXRpdmVXaW5kb3coKSB7CiAgICBpZiAobUNvbm5lY3RlZFdpbmRvdyAhPSBOVUxMKSB7CiAg
ICAgICAgc3RhdHVzX3QgZXJyID0gbmF0aXZlV2luZG93RGlzY29ubmVjdCgKICAgICAgICAgICAgICAg
IG1Db25uZWN0ZWRXaW5kb3cuZ2V0KCksICJkaXNjb25uZWN0TmF0aXZlV2luZG93Iik7CgogICAgICAg
IGlmIChlcnIgIT0gT0spIHsKICAgICAgICAgICAgQUxPR1coIm5hdGl2ZVdpbmRvd0Rpc2Nvbm5lY3Qg
cmV0dXJuZWQgYW4gZXJyb3I6ICVzICglZCkiLAogICAgICAgICAgICAgICAgICAgIHN0cmVycm9yKC1l
cnIpLCBlcnIpOwogICAgICAgIH0KICAgIH0KICAgIG1Db25uZWN0ZWRXaW5kb3cuY2xlYXIoKTsKfQoK
c3RhdHVzX3QgTWVkaWFQbGF5ZXJTZXJ2aWNlOjpDbGllbnQ6OnNldFZpZGVvU3VyZmFjZVRleHR1cmUo
CiAgICAgICAgY29uc3Qgc3A8SUdyYXBoaWNCdWZmZXJQcm9kdWNlcj4mIGJ1ZmZlclByb2R1Y2VyKQp7
CiAgICBBTE9HVigiWyVkXSBzZXRWaWRlb1N1cmZhY2VUZXh0dXJlKCVwKSIsIG1Db25uSWQsIGJ1ZmZl
clByb2R1Y2VyLmdldCgpKTsKICAgIHNwPE1lZGlhUGxheWVyQmFzZT4gcCA9IGdldFBsYXllcigpOwog
ICAgaWYgKHAgPT0gMCkgcmV0dXJuIFVOS05PV05fRVJST1I7CgogICAgc3A8SUJpbmRlcj4gYmluZGVy
KElJbnRlcmZhY2U6OmFzQmluZGVyKGJ1ZmZlclByb2R1Y2VyKSk7CiAgICBpZiAobUNvbm5lY3RlZFdp
bmRvd0JpbmRlciA9PSBiaW5kZXIpIHsKICAgICAgICByZXR1cm4gT0s7CiAgICB9CgogICAgc3A8QU5h
dGl2ZVdpbmRvdz4gYW53OwogICAgaWYgKGJ1ZmZlclByb2R1Y2VyICE9IE5VTEwpIHsKICAgICAgICBh
bncgPSBuZXcgU3VyZmFjZShidWZmZXJQcm9kdWNlciwgdHJ1ZSAvKiBjb250cm9sbGVkQnlBcHAgKi8p
OwogICAgICAgIHN0YXR1c190IGVyciA9IG5hdGl2ZVdpbmRvd0Nvbm5lY3QoYW53LmdldCgpLCAic2V0
VmlkZW9TdXJmYWNlVGV4dHVyZSIpOwoKICAgICAgICBpZiAoZXJyICE9IE9LKSB7CiAgICAgICAgICAg
IEFMT0dFKCJzZXRWaWRlb1N1cmZhY2VUZXh0dXJlIGZhaWxlZDogJWQiLCBlcnIpOwogICAgICAgICAg
ICAvLyBOb3RlIHRoYXQgd2UgbXVzdCBkbyB0aGUgcmVzZXQgYmVmb3JlIGRpc2Nvbm5lY3RpbmcgZnJv
bSB0aGUgQU5XLgogICAgICAgICAgICAvLyBPdGhlcndpc2UgcXVldWUvZGVxdWV1ZSBjYWxscyBjb3Vs
ZCBiZSBtYWRlIG9uIHRoZSBkaXNjb25uZWN0ZWQKICAgICAgICAgICAgLy8gQU5XLCB3aGljaCBtYXkg
cmVzdWx0IGluIGVycm9ycy4KICAgICAgICAgICAgcmVzZXQoKTsKCiAgICAgICAgICAgIGRpc2Nvbm5l
Y3ROYXRpdmVXaW5kb3coKTsKCiAgICAgICAgICAgIHJldHVybiBlcnI7CiAgICAgICAgfQogICAgfQoK
ICAgIC8vIE5vdGUgdGhhdCB3ZSBtdXN0IHNldCB0aGUgcGxheWVyJ3MgbmV3IEdyYXBoaWNCdWZmZXJQ
cm9kdWNlciBiZWZvcmUKICAgIC8vIGRpc2Nvbm5lY3RpbmcgdGhlIG9sZCBvbmUuICBPdGhlcndpc2Ug
cXVldWUvZGVxdWV1ZSBjYWxscyBjb3VsZCBiZSBtYWRlCiAgICAvLyBvbiB0aGUgZGlzY29ubmVjdGVk
IEFOVywgd2hpY2ggbWF5IHJlc3VsdCBpbiBlcnJvcnMuCiAgICBzdGF0dXNfdCBlcnIgPSBwLT5zZXRW
aWRlb1N1cmZhY2VUZXh0dXJlKGJ1ZmZlclByb2R1Y2VyKTsKCiAgICBkaXNjb25uZWN0TmF0aXZlV2lu
ZG93KCk7CgogICAgbUNvbm5lY3RlZFdpbmRvdyA9IGFudzsKCiAgICBpZiAoZXJyID09IE9LKSB7CiAg
ICAgICAgbUNvbm5lY3RlZFdpbmRvd0JpbmRlciA9IGJpbmRlcjsKICAgIH0gZWxzZSB7CiAgICAgICAg
ZGlzY29ubmVjdE5hdGl2ZVdpbmRvdygpOwogICAgfQoKICAgIHJldHVybiBlcnI7Cn0KCnN0YXR1c190
IE1lZGlhUGxheWVyU2VydmljZTo6Q2xpZW50OjppbnZva2UoY29uc3QgUGFyY2VsJiByZXF1ZXN0LAog
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBhcmNlbCAqcmVwbHkpCnsK
ICAgIHNwPE1lZGlhUGxheWVyQmFzZT4gcCA9IGdldFBsYXllcigpOwogICAgaWYgKHAgPT0gTlVMTCkg
cmV0dXJuIFVOS05PV05fRVJST1I7CiAgICByZXR1cm4gcC0+aW52b2tlKHJlcXVlc3QsIHJlcGx5KTsK
fQoKLy8gVGhpcyBjYWxsIGRvZXNuJ3QgbmVlZCB0byBhY2Nlc3MgdGhlIG5hdGl2ZSBwbGF5ZXIuCnN0
YXR1c190IE1lZGlhUGxheWVyU2VydmljZTo6Q2xpZW50OjpzZXRNZXRhZGF0YUZpbHRlcihjb25zdCBQ
YXJjZWwmIGZpbHRlcikKewogICAgc3RhdHVzX3Qgc3RhdHVzOwogICAgbWVkaWE6Ok1ldGFkYXRhOjpG
aWx0ZXIgYWxsb3csIGRyb3A7CgogICAgaWYgKHVubWFyc2hhbGxGaWx0ZXIoZmlsdGVyLCAmYWxsb3cs
ICZzdGF0dXMpICYmCiAgICAgICAgdW5tYXJzaGFsbEZpbHRlcihmaWx0ZXIsICZkcm9wLCAmc3RhdHVz
KSkgewogICAgICAgIE11dGV4OjpBdXRvbG9jayBsb2NrKG1Mb2NrKTsKCiAgICAgICAgbU1ldGFkYXRh
QWxsb3cgPSBhbGxvdzsKICAgICAgICBtTWV0YWRhdGFEcm9wID0gZHJvcDsKICAgIH0KICAgIHJldHVy
biBzdGF0dXM7Cn0KCnN0YXR1c190IE1lZGlhUGxheWVyU2VydmljZTo6Q2xpZW50OjpnZXRNZXRhZGF0
YSgKICAgICAgICBib29sIHVwZGF0ZV9vbmx5LCBib29sIC8qYXBwbHlfZmlsdGVyKi8sIFBhcmNlbCAq
cmVwbHkpCnsKICAgIHNwPE1lZGlhUGxheWVyQmFzZT4gcGxheWVyID0gZ2V0UGxheWVyKCk7CiAgICBp
ZiAocGxheWVyID09IDApIHJldHVybiBVTktOT1dOX0VSUk9SOwoKICAgIHN0YXR1c190IHN0YXR1czsK
ICAgIC8vIFBsYWNlaG9sZGVyIGZvciB0aGUgcmV0dXJuIGNvZGUsIHVwZGF0ZWQgYnkgdGhlIGNhbGxl
ci4KICAgIHJlcGx5LT53cml0ZUludDMyKC0xKTsKCiAgICBtZWRpYTo6TWV0YWRhdGE6OkZpbHRlciBp
ZHM7CgogICAgLy8gV2UgZG9uJ3QgYmxvY2sgbm90aWZpY2F0aW9ucyB3aGlsZSB3ZSBmZXRjaCB0aGUg
ZGF0YS4gV2UgY2xlYXIKICAgIC8vIG1NZXRhZGF0YVVwZGF0ZWQgZmlyc3Qgc28gd2UgZG9uJ3QgbG9z
ZSBub3RpZmljYXRpb25zIGhhcHBlbmluZwogICAgLy8gZHVyaW5nIHRoZSByZXN0IG9mIHRoaXMgY2Fs
bC4KICAgIHsKICAgICAgICBNdXRleDo6QXV0b2xvY2sgbG9jayhtTG9jayk7CiAgICAgICAgaWYgKHVw
ZGF0ZV9vbmx5KSB7CiAgICAgICAgICAgIGlkcyA9IG1NZXRhZGF0YVVwZGF0ZWQ7CiAgICAgICAgfQog
ICAgICAgIG1NZXRhZGF0YVVwZGF0ZWQuY2xlYXIoKTsKICAgIH0KCiAgICBtZWRpYTo6TWV0YWRhdGEg
bWV0YWRhdGEocmVwbHkpOwoKICAgIG1ldGFkYXRhLmFwcGVuZEhlYWRlcigpOwogICAgc3RhdHVzID0g
cGxheWVyLT5nZXRNZXRhZGF0YShpZHMsIHJlcGx5KTsKCiAgICBpZiAoc3RhdHVzICE9IE9LKSB7CiAg
ICAgICAgbWV0YWRhdGEucmVzZXRQYXJjZWwoKTsKICAgICAgICBBTE9HRSgiZ2V0TWV0YWRhdGEgZmFp
bGVkICVkIiwgc3RhdHVzKTsKICAgICAgICByZXR1cm4gc3RhdHVzOwogICAgfQoKICAgIC8vIEZJWE1F
OiBJbXBsZW1lbnQgZmlsdGVyaW5nIG9uIHRoZSByZXN1bHQuIE5vdCBjcml0aWNhbCBzaW5jZQogICAg
Ly8gZmlsdGVyaW5nIHRha2VzIHBsYWNlIG9uIHRoZSB1cGRhdGUgbm90aWZpY2F0aW9ucyBhbHJlYWR5
LiBUaGlzCiAgICAvLyB3b3VsZCBiZSB3aGVuIGFsbCB0aGUgbWV0YWRhdGEgYXJlIGZldGNoIGFuZCBh
IGZpbHRlciBpcyBzZXQuCgogICAgLy8gRXZlcnl0aGluZyBpcyBmaW5lLCB1cGRhdGUgdGhlIG1ldGFk
YXRhIGxlbmd0aC4KICAgIG1ldGFkYXRhLnVwZGF0ZUxlbmd0aCgpOwogICAgcmV0dXJuIE9LOwp9Cgpz
dGF0dXNfdCBNZWRpYVBsYXllclNlcnZpY2U6OkNsaWVudDo6c2V0QnVmZmVyaW5nU2V0dGluZ3MoCiAg
ICAgICAgY29uc3QgQnVmZmVyaW5nU2V0dGluZ3MmIGJ1ZmZlcmluZykKewogICAgQUxPR1YoIlslZF0g
c2V0QnVmZmVyaW5nU2V0dGluZ3N7JXN9IiwKICAgICAgICAgICAgbUNvbm5JZCwgYnVmZmVyaW5nLnRv
U3RyaW5nKCkuc3RyaW5nKCkpOwogICAgc3A8TWVkaWFQbGF5ZXJCYXNlPiBwID0gZ2V0UGxheWVyKCk7
CiAgICBpZiAocCA9PSAwKSByZXR1cm4gVU5LTk9XTl9FUlJPUjsKICAgIHJldHVybiBwLT5zZXRCdWZm
ZXJpbmdTZXR0aW5ncyhidWZmZXJpbmcpOwp9CgpzdGF0dXNfdCBNZWRpYVBsYXllclNlcnZpY2U6OkNs
aWVudDo6Z2V0RGVmYXVsdEJ1ZmZlcmluZ1NldHRpbmdzKAogICAgICAgIEJ1ZmZlcmluZ1NldHRpbmdz
KiBidWZmZXJpbmcgLyogbm9ubnVsbCAqLykKewogICAgc3A8TWVkaWFQbGF5ZXJCYXNlPiBwID0gZ2V0
UGxheWVyKCk7CiAgICAvLyBUT0RPOiBjcmVhdGUgbVBsYXllciBvbiBkZW1hbmQuCiAgICBpZiAocCA9
PSAwKSByZXR1cm4gVU5LTk9XTl9FUlJPUjsKICAgIHN0YXR1c190IHJldCA9IHAtPmdldERlZmF1bHRC
dWZmZXJpbmdTZXR0aW5ncyhidWZmZXJpbmcpOwogICAgaWYgKHJldCA9PSBOT19FUlJPUikgewogICAg
ICAgIEFMT0dWKCJbJWRdIGdldERlZmF1bHRCdWZmZXJpbmdTZXR0aW5nc3slc30iLAogICAgICAgICAg
ICAgICAgbUNvbm5JZCwgYnVmZmVyaW5nLT50b1N0cmluZygpLnN0cmluZygpKTsKICAgIH0gZWxzZSB7
CiAgICAgICAgQUxPR1YoIlslZF0gZ2V0RGVmYXVsdEJ1ZmZlcmluZ1NldHRpbmdzIHJldHVybmVkICVk
IiwgbUNvbm5JZCwgcmV0KTsKICAgIH0KICAgIHJldHVybiByZXQ7Cn0KCnN0YXR1c190IE1lZGlhUGxh
eWVyU2VydmljZTo6Q2xpZW50OjpwcmVwYXJlQXN5bmMoKQp7CiAgICBBTE9HVigiWyVkXSBwcmVwYXJl
QXN5bmMiLCBtQ29ubklkKTsKICAgIHNwPE1lZGlhUGxheWVyQmFzZT4gcCA9IGdldFBsYXllcigpOwog
ICAgaWYgKHAgPT0gMCkgcmV0dXJuIFVOS05PV05fRVJST1I7CiAgICBzdGF0dXNfdCByZXQgPSBwLT5w
cmVwYXJlQXN5bmMoKTsKI2lmIENBTExCQUNLX0FOVEFHT05JWkVSCiAgICBBTE9HRCgic3RhcnQgQW50
YWdvbml6ZXIiKTsKICAgIGlmIChyZXQgPT0gTk9fRVJST1IpIG1BbnRhZ29uaXplci0+c3RhcnQoKTsK
I2VuZGlmCiAgICByZXR1cm4gcmV0Owp9CgpzdGF0dXNfdCBNZWRpYVBsYXllclNlcnZpY2U6OkNsaWVu
dDo6c3RhcnQoKQp7CiAgICBBTE9HVigiWyVkXSBzdGFydCIsIG1Db25uSWQpOwogICAgc3A8TWVkaWFQ
bGF5ZXJCYXNlPiBwID0gZ2V0UGxheWVyKCk7CiAgICBpZiAocCA9PSAwKSByZXR1cm4gVU5LTk9XTl9F
UlJPUjsKICAgIHAtPnNldExvb3BpbmcobUxvb3ApOwogICAgcmV0dXJuIHAtPnN0YXJ0KCk7Cn0KCnN0
YXR1c190IE1lZGlhUGxheWVyU2VydmljZTo6Q2xpZW50OjpzdG9wKCkKewogICAgQUxPR1YoIlslZF0g
c3RvcCIsIG1Db25uSWQpOwogICAgc3A8TWVkaWFQbGF5ZXJCYXNlPiBwID0gZ2V0UGxheWVyKCk7CiAg
ICBpZiAocCA9PSAwKSByZXR1cm4gVU5LTk9XTl9FUlJPUjsKICAgIHJldHVybiBwLT5zdG9wKCk7Cn0K
CnN0YXR1c190IE1lZGlhUGxheWVyU2VydmljZTo6Q2xpZW50OjpwYXVzZSgpCnsKICAgIEFMT0dWKCJb
JWRdIHBhdXNlIiwgbUNvbm5JZCk7CiAgICBzcDxNZWRpYVBsYXllckJhc2U+IHAgPSBnZXRQbGF5ZXIo
KTsKICAgIGlmIChwID09IDApIHJldHVybiBVTktOT1dOX0VSUk9SOwogICAgcmV0dXJuIHAtPnBhdXNl
KCk7Cn0KCnN0YXR1c190IE1lZGlhUGxheWVyU2VydmljZTo6Q2xpZW50Ojppc1BsYXlpbmcoYm9vbCog
c3RhdGUpCnsKICAgICpzdGF0ZSA9IGZhbHNlOwogICAgc3A8TWVkaWFQbGF5ZXJCYXNlPiBwID0gZ2V0
UGxheWVyKCk7CiAgICBpZiAocCA9PSAwKSByZXR1cm4gVU5LTk9XTl9FUlJPUjsKICAgICpzdGF0ZSA9
IHAtPmlzUGxheWluZygpOwogICAgQUxPR1YoIlslZF0gaXNQbGF5aW5nOiAlZCIsIG1Db25uSWQsICpz
dGF0ZSk7CiAgICByZXR1cm4gTk9fRVJST1I7Cn0KCnN0YXR1c190IE1lZGlhUGxheWVyU2VydmljZTo6
Q2xpZW50OjpzZXRQbGF5YmFja1NldHRpbmdzKGNvbnN0IEF1ZGlvUGxheWJhY2tSYXRlJiByYXRlKQp7
CiAgICBBTE9HVigiWyVkXSBzZXRQbGF5YmFja1NldHRpbmdzKCVmLCAlZiwgJWQsICVkKSIsCiAgICAg
ICAgICAgIG1Db25uSWQsIHJhdGUubVNwZWVkLCByYXRlLm1QaXRjaCwgcmF0ZS5tRmFsbGJhY2tNb2Rl
LCByYXRlLm1TdHJldGNoTW9kZSk7CiAgICBzcDxNZWRpYVBsYXllckJhc2U+IHAgPSBnZXRQbGF5ZXIo
KTsKICAgIGlmIChwID09IDApIHJldHVybiBVTktOT1dOX0VSUk9SOwogICAgcmV0dXJuIHAtPnNldFBs
YXliYWNrU2V0dGluZ3MocmF0ZSk7Cn0KCnN0YXR1c190IE1lZGlhUGxheWVyU2VydmljZTo6Q2xpZW50
OjpnZXRQbGF5YmFja1NldHRpbmdzKEF1ZGlvUGxheWJhY2tSYXRlKiByYXRlIC8qIG5vbm51bGwgKi8p
CnsKICAgIHNwPE1lZGlhUGxheWVyQmFzZT4gcCA9IGdldFBsYXllcigpOwogICAgaWYgKHAgPT0gMCkg
cmV0dXJuIFVOS05PV05fRVJST1I7CiAgICBzdGF0dXNfdCByZXQgPSBwLT5nZXRQbGF5YmFja1NldHRp
bmdzKHJhdGUpOwogICAgaWYgKHJldCA9PSBOT19FUlJPUikgewogICAgICAgIEFMT0dWKCJbJWRdIGdl
dFBsYXliYWNrU2V0dGluZ3MoJWYsICVmLCAlZCwgJWQpIiwKICAgICAgICAgICAgICAgIG1Db25uSWQs
IHJhdGUtPm1TcGVlZCwgcmF0ZS0+bVBpdGNoLCByYXRlLT5tRmFsbGJhY2tNb2RlLCByYXRlLT5tU3Ry
ZXRjaE1vZGUpOwogICAgfSBlbHNlIHsKICAgICAgICBBTE9HVigiWyVkXSBnZXRQbGF5YmFja1NldHRp
bmdzIHJldHVybmVkICVkIiwgbUNvbm5JZCwgcmV0KTsKICAgIH0KICAgIHJldHVybiByZXQ7Cn0KCnN0
YXR1c190IE1lZGlhUGxheWVyU2VydmljZTo6Q2xpZW50OjpzZXRTeW5jU2V0dGluZ3MoCiAgICAgICAg
Y29uc3QgQVZTeW5jU2V0dGluZ3MmIHN5bmMsIGZsb2F0IHZpZGVvRnBzSGludCkKewogICAgQUxPR1Yo
IlslZF0gc2V0U3luY1NldHRpbmdzKCV1LCAldSwgJWYsICVmKSIsCiAgICAgICAgICAgIG1Db25uSWQs
IHN5bmMubVNvdXJjZSwgc3luYy5tQXVkaW9BZGp1c3RNb2RlLCBzeW5jLm1Ub2xlcmFuY2UsIHZpZGVv
RnBzSGludCk7CiAgICBzcDxNZWRpYVBsYXllckJhc2U+IHAgPSBnZXRQbGF5ZXIoKTsKICAgIGlmIChw
ID09IDApIHJldHVybiBVTktOT1dOX0VSUk9SOwogICAgcmV0dXJuIHAtPnNldFN5bmNTZXR0aW5ncyhz
eW5jLCB2aWRlb0Zwc0hpbnQpOwp9CgpzdGF0dXNfdCBNZWRpYVBsYXllclNlcnZpY2U6OkNsaWVudDo6
Z2V0U3luY1NldHRpbmdzKAogICAgICAgIEFWU3luY1NldHRpbmdzKiBzeW5jIC8qIG5vbm51bGwgKi8s
IGZsb2F0KiB2aWRlb0ZwcyAvKiBub25udWxsICovKQp7CiAgICBzcDxNZWRpYVBsYXllckJhc2U+IHAg
PSBnZXRQbGF5ZXIoKTsKICAgIGlmIChwID09IDApIHJldHVybiBVTktOT1dOX0VSUk9SOwogICAgc3Rh
dHVzX3QgcmV0ID0gcC0+Z2V0U3luY1NldHRpbmdzKHN5bmMsIHZpZGVvRnBzKTsKICAgIGlmIChyZXQg
PT0gTk9fRVJST1IpIHsKICAgICAgICBBTE9HVigiWyVkXSBnZXRTeW5jU2V0dGluZ3MoJXUsICV1LCAl
ZiwgJWYpIiwKICAgICAgICAgICAgICAgIG1Db25uSWQsIHN5bmMtPm1Tb3VyY2UsIHN5bmMtPm1BdWRp
b0FkanVzdE1vZGUsIHN5bmMtPm1Ub2xlcmFuY2UsICp2aWRlb0Zwcyk7CiAgICB9IGVsc2UgewogICAg
ICAgIEFMT0dWKCJbJWRdIGdldFN5bmNTZXR0aW5ncyByZXR1cm5lZCAlZCIsIG1Db25uSWQsIHJldCk7
CiAgICB9CiAgICByZXR1cm4gcmV0Owp9CgpzdGF0dXNfdCBNZWRpYVBsYXllclNlcnZpY2U6OkNsaWVu
dDo6Z2V0Q3VycmVudFBvc2l0aW9uKGludCAqbXNlYykKewogICAgQUxPR1YoImdldEN1cnJlbnRQb3Np
dGlvbiIpOwogICAgc3A8TWVkaWFQbGF5ZXJCYXNlPiBwID0gZ2V0UGxheWVyKCk7CiAgICBpZiAocCA9
PSAwKSByZXR1cm4gVU5LTk9XTl9FUlJPUjsKICAgIHN0YXR1c190IHJldCA9IHAtPmdldEN1cnJlbnRQ
b3NpdGlvbihtc2VjKTsKICAgIGlmIChyZXQgPT0gTk9fRVJST1IpIHsKICAgICAgICBBTE9HVigiWyVk
XSBnZXRDdXJyZW50UG9zaXRpb24gPSAlZCIsIG1Db25uSWQsICptc2VjKTsKICAgIH0gZWxzZSB7CiAg
ICAgICAgQUxPR0UoImdldEN1cnJlbnRQb3NpdGlvbiByZXR1cm5lZCAlZCIsIHJldCk7CiAgICB9CiAg
ICByZXR1cm4gcmV0Owp9CgpzdGF0dXNfdCBNZWRpYVBsYXllclNlcnZpY2U6OkNsaWVudDo6Z2V0RHVy
YXRpb24oaW50ICptc2VjKQp7CiAgICBBTE9HVigiZ2V0RHVyYXRpb24iKTsKICAgIHNwPE1lZGlhUGxh
eWVyQmFzZT4gcCA9IGdldFBsYXllcigpOwogICAgaWYgKHAgPT0gMCkgcmV0dXJuIFVOS05PV05fRVJS
T1I7CiAgICBzdGF0dXNfdCByZXQgPSBwLT5nZXREdXJhdGlvbihtc2VjKTsKICAgIGlmIChyZXQgPT0g
Tk9fRVJST1IpIHsKICAgICAgICBBTE9HVigiWyVkXSBnZXREdXJhdGlvbiA9ICVkIiwgbUNvbm5JZCwg
Km1zZWMpOwogICAgfSBlbHNlIHsKICAgICAgICBBTE9HRSgiZ2V0RHVyYXRpb24gcmV0dXJuZWQgJWQi
LCByZXQpOwogICAgfQogICAgcmV0dXJuIHJldDsKfQoKc3RhdHVzX3QgTWVkaWFQbGF5ZXJTZXJ2aWNl
OjpDbGllbnQ6OnNldE5leHRQbGF5ZXIoY29uc3Qgc3A8SU1lZGlhUGxheWVyPiYgcGxheWVyKSB7CiAg
ICBBTE9HVigic2V0TmV4dFBsYXllciIpOwogICAgTXV0ZXg6OkF1dG9sb2NrIGwobUxvY2spOwogICAg
c3A8Q2xpZW50PiBjID0gc3RhdGljX2Nhc3Q8Q2xpZW50Kj4ocGxheWVyLmdldCgpKTsKICAgIGlmIChj
ICE9IE5VTEwgJiYgIW1TZXJ2aWNlLT5oYXNDbGllbnQoYykpIHsKICAgICAgcmV0dXJuIEJBRF9WQUxV
RTsKICAgIH0KCiAgICBtTmV4dENsaWVudCA9IGM7CgogICAgaWYgKGMgIT0gTlVMTCkgewogICAgICAg
IGlmIChtQXVkaW9PdXRwdXQgIT0gTlVMTCkgewogICAgICAgICAgICBtQXVkaW9PdXRwdXQtPnNldE5l
eHRPdXRwdXQoYy0+bUF1ZGlvT3V0cHV0KTsKICAgICAgICB9IGVsc2UgaWYgKChtUGxheWVyICE9IE5V
TEwpICYmICFtUGxheWVyLT5oYXJkd2FyZU91dHB1dCgpKSB7CiAgICAgICAgICAgIEFMT0dFKCJubyBj
dXJyZW50IGF1ZGlvIG91dHB1dCIpOwogICAgICAgIH0KCiAgICAgICAgaWYgKChtUGxheWVyICE9IE5V
TEwpICYmIChtTmV4dENsaWVudC0+Z2V0UGxheWVyKCkgIT0gTlVMTCkpIHsKICAgICAgICAgICAgbVBs
YXllci0+c2V0TmV4dFBsYXllcihtTmV4dENsaWVudC0+Z2V0UGxheWVyKCkpOwogICAgICAgIH0KICAg
IH0KCiAgICByZXR1cm4gT0s7Cn0KClZvbHVtZVNoYXBlcjo6U3RhdHVzIE1lZGlhUGxheWVyU2Vydmlj
ZTo6Q2xpZW50OjphcHBseVZvbHVtZVNoYXBlcigKICAgICAgICBjb25zdCBzcDxWb2x1bWVTaGFwZXI6
OkNvbmZpZ3VyYXRpb24+JiBjb25maWd1cmF0aW9uLAogICAgICAgIGNvbnN0IHNwPFZvbHVtZVNoYXBl
cjo6T3BlcmF0aW9uPiYgb3BlcmF0aW9uKSB7CiAgICAvLyBmb3IgaGFyZHdhcmUgb3V0cHV0LCBjYWxs
IHBsYXllciBpbnN0ZWFkCiAgICBBTE9HVigiQ2xpZW50OjphcHBseVZvbHVtZVNoYXBlciglcCkiLCB0
aGlzKTsKICAgIHNwPE1lZGlhUGxheWVyQmFzZT4gcCA9IGdldFBsYXllcigpOwogICAgewogICAgICAg
IE11dGV4OjpBdXRvbG9jayBsKG1Mb2NrKTsKICAgICAgICBpZiAocCAhPSAwICYmIHAtPmhhcmR3YXJl
T3V0cHV0KCkpIHsKICAgICAgICAgICAgLy8gVE9ETzogaW52ZXN0aWdhdGUgaW50ZXJuYWwgaW1wbGVt
ZW50YXRpb24KICAgICAgICAgICAgcmV0dXJuIFZvbHVtZVNoYXBlcjo6U3RhdHVzKElOVkFMSURfT1BF
UkFUSU9OKTsKICAgICAgICB9CiAgICAgICAgaWYgKG1BdWRpb091dHB1dC5nZXQoKSAhPSBudWxscHRy
KSB7CiAgICAgICAgICAgIHJldHVybiBtQXVkaW9PdXRwdXQtPmFwcGx5Vm9sdW1lU2hhcGVyKGNvbmZp
Z3VyYXRpb24sIG9wZXJhdGlvbik7CiAgICAgICAgfQogICAgfQogICAgcmV0dXJuIFZvbHVtZVNoYXBl
cjo6U3RhdHVzKElOVkFMSURfT1BFUkFUSU9OKTsKfQoKc3A8Vm9sdW1lU2hhcGVyOjpTdGF0ZT4gTWVk
aWFQbGF5ZXJTZXJ2aWNlOjpDbGllbnQ6OmdldFZvbHVtZVNoYXBlclN0YXRlKGludCBpZCkgewogICAg
Ly8gZm9yIGhhcmR3YXJlIG91dHB1dCwgY2FsbCBwbGF5ZXIgaW5zdGVhZAogICAgQUxPR1YoIkNsaWVu
dDo6Z2V0Vm9sdW1lU2hhcGVyU3RhdGUoJXApIiwgdGhpcyk7CiAgICBzcDxNZWRpYVBsYXllckJhc2U+
IHAgPSBnZXRQbGF5ZXIoKTsKICAgIHsKICAgICAgICBNdXRleDo6QXV0b2xvY2sgbChtTG9jayk7CiAg
ICAgICAgaWYgKHAgIT0gMCAmJiBwLT5oYXJkd2FyZU91dHB1dCgpKSB7CiAgICAgICAgICAgIC8vIFRP
RE86IGludmVzdGlnYXRlIGludGVybmFsIGltcGxlbWVudGF0aW9uLgogICAgICAgICAgICByZXR1cm4g
bnVsbHB0cjsKICAgICAgICB9CiAgICAgICAgaWYgKG1BdWRpb091dHB1dC5nZXQoKSAhPSBudWxscHRy
KSB7CiAgICAgICAgICAgIHJldHVybiBtQXVkaW9PdXRwdXQtPmdldFZvbHVtZVNoYXBlclN0YXRlKGlk
KTsKICAgICAgICB9CiAgICB9CiAgICByZXR1cm4gbnVsbHB0cjsKfQoKc3RhdHVzX3QgTWVkaWFQbGF5
ZXJTZXJ2aWNlOjpDbGllbnQ6OnNlZWtUbyhpbnQgbXNlYywgTWVkaWFQbGF5ZXJTZWVrTW9kZSBtb2Rl
KQp7CiAgICBBTE9HVigiWyVkXSBzZWVrVG8oJWQsICVkKSIsIG1Db25uSWQsIG1zZWMsIG1vZGUpOwog
ICAgc3A8TWVkaWFQbGF5ZXJCYXNlPiBwID0gZ2V0UGxheWVyKCk7CiAgICBpZiAocCA9PSAwKSByZXR1
cm4gVU5LTk9XTl9FUlJPUjsKICAgIHJldHVybiBwLT5zZWVrVG8obXNlYywgbW9kZSk7Cn0KCnN0YXR1
c190IE1lZGlhUGxheWVyU2VydmljZTo6Q2xpZW50OjpyZXNldCgpCnsKICAgIEFMT0dWKCJbJWRdIHJl
c2V0IiwgbUNvbm5JZCk7CiAgICBtUmV0cmFuc21pdEVuZHBvaW50VmFsaWQgPSBmYWxzZTsKICAgIHNw
PE1lZGlhUGxheWVyQmFzZT4gcCA9IGdldFBsYXllcigpOwogICAgaWYgKHAgPT0gMCkgcmV0dXJuIFVO
S05PV05fRVJST1I7CiAgICByZXR1cm4gcC0+cmVzZXQoKTsKfQoKc3RhdHVzX3QgTWVkaWFQbGF5ZXJT
ZXJ2aWNlOjpDbGllbnQ6OnNldEF1ZGlvU3RyZWFtVHlwZShhdWRpb19zdHJlYW1fdHlwZV90IHR5cGUp
CnsKICAgIEFMT0dWKCJbJWRdIHNldEF1ZGlvU3RyZWFtVHlwZSglZCkiLCBtQ29ubklkLCB0eXBlKTsK
ICAgIC8vIFRPRE86IGZvciBoYXJkd2FyZSBvdXRwdXQsIGNhbGwgcGxheWVyIGluc3RlYWQKICAgIE11
dGV4OjpBdXRvbG9jayBsKG1Mb2NrKTsKICAgIGlmIChtQXVkaW9PdXRwdXQgIT0gMCkgbUF1ZGlvT3V0
cHV0LT5zZXRBdWRpb1N0cmVhbVR5cGUodHlwZSk7CiAgICByZXR1cm4gTk9fRVJST1I7Cn0KCnN0YXR1
c190IE1lZGlhUGxheWVyU2VydmljZTo6Q2xpZW50OjpzZXRBdWRpb0F0dHJpYnV0ZXNfbChjb25zdCBQ
YXJjZWwgJnBhcmNlbCkKewogICAgaWYgKG1BdWRpb0F0dHJpYnV0ZXMgIT0gTlVMTCkgeyBmcmVlKG1B
dWRpb0F0dHJpYnV0ZXMpOyB9CiAgICBtQXVkaW9BdHRyaWJ1dGVzID0gKGF1ZGlvX2F0dHJpYnV0ZXNf
dCAqKSBjYWxsb2MoMSwgc2l6ZW9mKGF1ZGlvX2F0dHJpYnV0ZXNfdCkpOwogICAgaWYgKG1BdWRpb0F0
dHJpYnV0ZXMgPT0gTlVMTCkgewogICAgICAgIHJldHVybiBOT19NRU1PUlk7CiAgICB9CiAgICB1bm1h
cnNoYWxsQXVkaW9BdHRyaWJ1dGVzKHBhcmNlbCwgbUF1ZGlvQXR0cmlidXRlcyk7CgogICAgQUxPR1Yo
InNldEF1ZGlvQXR0cmlidXRlc19sKCkgdXNhZ2U9JWQgY29udGVudD0lZCBmbGFncz0weCV4IHRhZ3M9
JXMiLAogICAgICAgICAgICBtQXVkaW9BdHRyaWJ1dGVzLT51c2FnZSwgbUF1ZGlvQXR0cmlidXRlcy0+
Y29udGVudF90eXBlLCBtQXVkaW9BdHRyaWJ1dGVzLT5mbGFncywKICAgICAgICAgICAgbUF1ZGlvQXR0
cmlidXRlcy0+dGFncyk7CgogICAgaWYgKG1BdWRpb091dHB1dCAhPSAwKSB7CiAgICAgICAgbUF1ZGlv
T3V0cHV0LT5zZXRBdWRpb0F0dHJpYnV0ZXMobUF1ZGlvQXR0cmlidXRlcyk7CiAgICB9CiAgICByZXR1
cm4gTk9fRVJST1I7Cn0KCnN0YXR1c190IE1lZGlhUGxheWVyU2VydmljZTo6Q2xpZW50OjpzZXRMb29w
aW5nKGludCBsb29wKQp7CiAgICBBTE9HVigiWyVkXSBzZXRMb29waW5nKCVkKSIsIG1Db25uSWQsIGxv
b3ApOwogICAgbUxvb3AgPSBsb29wOwogICAgc3A8TWVkaWFQbGF5ZXJCYXNlPiBwID0gZ2V0UGxheWVy
KCk7CiAgICBpZiAocCAhPSAwKSByZXR1cm4gcC0+c2V0TG9vcGluZyhsb29wKTsKICAgIHJldHVybiBO
T19FUlJPUjsKfQoKc3RhdHVzX3QgTWVkaWFQbGF5ZXJTZXJ2aWNlOjpDbGllbnQ6OnNldFZvbHVtZShm
bG9hdCBsZWZ0Vm9sdW1lLCBmbG9hdCByaWdodFZvbHVtZSkKewogICAgQUxPR1YoIlslZF0gc2V0Vm9s
dW1lKCVmLCAlZikiLCBtQ29ubklkLCBsZWZ0Vm9sdW1lLCByaWdodFZvbHVtZSk7CgogICAgLy8gZm9y
IGhhcmR3YXJlIG91dHB1dCwgY2FsbCBwbGF5ZXIgaW5zdGVhZAogICAgc3A8TWVkaWFQbGF5ZXJCYXNl
PiBwID0gZ2V0UGxheWVyKCk7CiAgICB7CiAgICAgIE11dGV4OjpBdXRvbG9jayBsKG1Mb2NrKTsKICAg
ICAgaWYgKHAgIT0gMCAmJiBwLT5oYXJkd2FyZU91dHB1dCgpKSB7CiAgICAgICAgICBNZWRpYVBsYXll
ckhXSW50ZXJmYWNlKiBod3AgPQogICAgICAgICAgICAgICAgICByZWludGVycHJldF9jYXN0PE1lZGlh
UGxheWVySFdJbnRlcmZhY2UqPihwLmdldCgpKTsKICAgICAgICAgIHJldHVybiBod3AtPnNldFZvbHVt
ZShsZWZ0Vm9sdW1lLCByaWdodFZvbHVtZSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgICBpZiAobUF1
ZGlvT3V0cHV0ICE9IDApIG1BdWRpb091dHB1dC0+c2V0Vm9sdW1lKGxlZnRWb2x1bWUsIHJpZ2h0Vm9s
dW1lKTsKICAgICAgICAgIHJldHVybiBOT19FUlJPUjsKICAgICAgfQogICAgfQoKICAgIHJldHVybiBO
T19FUlJPUjsKfQoKc3RhdHVzX3QgTWVkaWFQbGF5ZXJTZXJ2aWNlOjpDbGllbnQ6OnNldEF1eEVmZmVj
dFNlbmRMZXZlbChmbG9hdCBsZXZlbCkKewogICAgQUxPR1YoIlslZF0gc2V0QXV4RWZmZWN0U2VuZExl
dmVsKCVmKSIsIG1Db25uSWQsIGxldmVsKTsKICAgIE11dGV4OjpBdXRvbG9jayBsKG1Mb2NrKTsKICAg
IGlmIChtQXVkaW9PdXRwdXQgIT0gMCkgcmV0dXJuIG1BdWRpb091dHB1dC0+c2V0QXV4RWZmZWN0U2Vu
ZExldmVsKGxldmVsKTsKICAgIHJldHVybiBOT19FUlJPUjsKfQoKc3RhdHVzX3QgTWVkaWFQbGF5ZXJT
ZXJ2aWNlOjpDbGllbnQ6OmF0dGFjaEF1eEVmZmVjdChpbnQgZWZmZWN0SWQpCnsKICAgIEFMT0dWKCJb
JWRdIGF0dGFjaEF1eEVmZmVjdCglZCkiLCBtQ29ubklkLCBlZmZlY3RJZCk7CiAgICBNdXRleDo6QXV0
b2xvY2sgbChtTG9jayk7CiAgICBpZiAobUF1ZGlvT3V0cHV0ICE9IDApIHJldHVybiBtQXVkaW9PdXRw
dXQtPmF0dGFjaEF1eEVmZmVjdChlZmZlY3RJZCk7CiAgICByZXR1cm4gTk9fRVJST1I7Cn0KCnN0YXR1
c190IE1lZGlhUGxheWVyU2VydmljZTo6Q2xpZW50OjpzZXRQYXJhbWV0ZXIoaW50IGtleSwgY29uc3Qg
UGFyY2VsICZyZXF1ZXN0KSB7CiAgICBBTE9HVigiWyVkXSBzZXRQYXJhbWV0ZXIoJWQpIiwgbUNvbm5J
ZCwga2V5KTsKICAgIHN3aXRjaCAoa2V5KSB7CiAgICBjYXNlIEtFWV9QQVJBTUVURVJfQVVESU9fQVRU
UklCVVRFUzoKICAgIHsKICAgICAgICBNdXRleDo6QXV0b2xvY2sgbChtTG9jayk7CiAgICAgICAgcmV0
dXJuIHNldEF1ZGlvQXR0cmlidXRlc19sKHJlcXVlc3QpOwogICAgfQogICAgZGVmYXVsdDoKICAgICAg
ICBzcDxNZWRpYVBsYXllckJhc2U+IHAgPSBnZXRQbGF5ZXIoKTsKICAgICAgICBpZiAocCA9PSAwKSB7
IHJldHVybiBVTktOT1dOX0VSUk9SOyB9CiAgICAgICAgcmV0dXJuIHAtPnNldFBhcmFtZXRlcihrZXks
IHJlcXVlc3QpOwogICAgfQp9CgpzdGF0dXNfdCBNZWRpYVBsYXllclNlcnZpY2U6OkNsaWVudDo6Z2V0
UGFyYW1ldGVyKGludCBrZXksIFBhcmNlbCAqcmVwbHkpIHsKICAgIEFMT0dWKCJbJWRdIGdldFBhcmFt
ZXRlciglZCkiLCBtQ29ubklkLCBrZXkpOwogICAgc3A8TWVkaWFQbGF5ZXJCYXNlPiBwID0gZ2V0UGxh
eWVyKCk7CiAgICBpZiAocCA9PSAwKSByZXR1cm4gVU5LTk9XTl9FUlJPUjsKICAgIHJldHVybiBwLT5n
ZXRQYXJhbWV0ZXIoa2V5LCByZXBseSk7Cn0KCnN0YXR1c190IE1lZGlhUGxheWVyU2VydmljZTo6Q2xp
ZW50OjpzZXRSZXRyYW5zbWl0RW5kcG9pbnQoCiAgICAgICAgY29uc3Qgc3RydWN0IHNvY2thZGRyX2lu
KiBlbmRwb2ludCkgewoKICAgIGlmIChOVUxMICE9IGVuZHBvaW50KSB7CiAgICAgICAgdWludDMyX3Qg
YSA9IG50b2hsKGVuZHBvaW50LT5zaW5fYWRkci5zX2FkZHIpOwogICAgICAgIHVpbnQxNl90IHAgPSBu
dG9ocyhlbmRwb2ludC0+c2luX3BvcnQpOwogICAgICAgIEFMT0dWKCJbJWRdIHNldFJldHJhbnNtaXRF
bmRwb2ludCgldS4ldS4ldS4ldTolaHUpIiwgbUNvbm5JZCwKICAgICAgICAgICAgICAgIChhID4+IDI0
KSwgKGEgPj4gMTYpICYgMHhGRiwgKGEgPj4gOCkgJiAweEZGLCAoYSAmIDB4RkYpLCBwKTsKICAgIH0g
ZWxzZSB7CiAgICAgICAgQUxPR1YoIlslZF0gc2V0UmV0cmFuc21pdEVuZHBvaW50ID0gPG5vbmU+Iiwg
bUNvbm5JZCk7CiAgICB9CgogICAgc3A8TWVkaWFQbGF5ZXJCYXNlPiBwID0gZ2V0UGxheWVyKCk7Cgog
ICAgLy8gUmlnaHQgbm93LCB0aGUgb25seSB2YWxpZCB0aW1lIHRvIHNldCBhIHJldHJhbnNtaXQgZW5k
cG9pbnQgaXMgYmVmb3JlCiAgICAvLyBwbGF5ZXIgc2VsZWN0aW9uIGhhcyBiZWVuIG1hZGUgKHNpbmNl
IHRoZSBwcmVzZW5jZSBvciBhYnNlbmNlIG9mIGEKICAgIC8vIHJldHJhbnNtaXQgZW5kcG9pbnQgaXMg
Z29pbmcgdG8gZGV0ZXJtaW5lIHdoaWNoIHBsYXllciBpcyBzZWxlY3RlZCBkdXJpbmcKICAgIC8vIHNl
dERhdGFTb3VyY2UpLgogICAgaWYgKHAgIT0gMCkgcmV0dXJuIElOVkFMSURfT1BFUkFUSU9OOwoKICAg
IGlmIChOVUxMICE9IGVuZHBvaW50KSB7CiAgICAgICAgbVJldHJhbnNtaXRFbmRwb2ludCA9ICplbmRw
b2ludDsKICAgICAgICBtUmV0cmFuc21pdEVuZHBvaW50VmFsaWQgPSB0cnVlOwogICAgfSBlbHNlIHsK
ICAgICAgICBtUmV0cmFuc21pdEVuZHBvaW50VmFsaWQgPSBmYWxzZTsKICAgIH0KCiAgICByZXR1cm4g
Tk9fRVJST1I7Cn0KCnN0YXR1c190IE1lZGlhUGxheWVyU2VydmljZTo6Q2xpZW50OjpnZXRSZXRyYW5z
bWl0RW5kcG9pbnQoCiAgICAgICAgc3RydWN0IHNvY2thZGRyX2luKiBlbmRwb2ludCkKewogICAgaWYg
KE5VTEwgPT0gZW5kcG9pbnQpCiAgICAgICAgcmV0dXJuIEJBRF9WQUxVRTsKCiAgICBzcDxNZWRpYVBs
YXllckJhc2U+IHAgPSBnZXRQbGF5ZXIoKTsKCiAgICBpZiAocCAhPSBOVUxMKQogICAgICAgIHJldHVy
biBwLT5nZXRSZXRyYW5zbWl0RW5kcG9pbnQoZW5kcG9pbnQpOwoKICAgIGlmICghbVJldHJhbnNtaXRF
bmRwb2ludFZhbGlkKQogICAgICAgIHJldHVybiBOT19JTklUOwoKICAgICplbmRwb2ludCA9IG1SZXRy
YW5zbWl0RW5kcG9pbnQ7CgogICAgcmV0dXJuIE5PX0VSUk9SOwp9Cgp2b2lkIE1lZGlhUGxheWVyU2Vy
dmljZTo6Q2xpZW50Ojpub3RpZnkoCiAgICAgICAgdm9pZCogY29va2llLCBpbnQgbXNnLCBpbnQgZXh0
MSwgaW50IGV4dDIsIGNvbnN0IFBhcmNlbCAqb2JqKQp7CiAgICBDbGllbnQqIGNsaWVudCA9IHN0YXRp
Y19jYXN0PENsaWVudCo+KGNvb2tpZSk7CiAgICBpZiAoY2xpZW50ID09IE5VTEwpIHsKICAgICAgICBy
ZXR1cm47CiAgICB9CgogICAgc3A8SU1lZGlhUGxheWVyQ2xpZW50PiBjOwogICAgc3A8Q2xpZW50PiBu
ZXh0Q2xpZW50OwogICAgc3RhdHVzX3QgZXJyU3RhcnROZXh0ID0gTk9fRVJST1I7CiAgICB7CiAgICAg
ICAgTXV0ZXg6OkF1dG9sb2NrIGwoY2xpZW50LT5tTG9jayk7CiAgICAgICAgYyA9IGNsaWVudC0+bUNs
aWVudDsKICAgICAgICBpZiAobXNnID09IE1FRElBX1BMQVlCQUNLX0NPTVBMRVRFICYmIGNsaWVudC0+
bU5leHRDbGllbnQgIT0gTlVMTCkgewogICAgICAgICAgICBuZXh0Q2xpZW50ID0gY2xpZW50LT5tTmV4
dENsaWVudDsKCiAgICAgICAgICAgIGlmIChjbGllbnQtPm1BdWRpb091dHB1dCAhPSBOVUxMKQogICAg
ICAgICAgICAgICAgY2xpZW50LT5tQXVkaW9PdXRwdXQtPnN3aXRjaFRvTmV4dE91dHB1dCgpOwoKICAg
ICAgICAgICAgZXJyU3RhcnROZXh0ID0gbmV4dENsaWVudC0+c3RhcnQoKTsKICAgICAgICB9CiAgICB9
CgogICAgaWYgKG5leHRDbGllbnQgIT0gTlVMTCkgewogICAgICAgIHNwPElNZWRpYVBsYXllckNsaWVu
dD4gbmM7CiAgICAgICAgewogICAgICAgICAgICBNdXRleDo6QXV0b2xvY2sgbChuZXh0Q2xpZW50LT5t
TG9jayk7CiAgICAgICAgICAgIG5jID0gbmV4dENsaWVudC0+bUNsaWVudDsKICAgICAgICB9CiAgICAg
ICAgaWYgKG5jICE9IE5VTEwpIHsKICAgICAgICAgICAgaWYgKGVyclN0YXJ0TmV4dCA9PSBOT19FUlJP
UikgewogICAgICAgICAgICAgICAgbmMtPm5vdGlmeShNRURJQV9JTkZPLCBNRURJQV9JTkZPX1NUQVJU
RURfQVNfTkVYVCwgMCwgb2JqKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIG5j
LT5ub3RpZnkoTUVESUFfRVJST1IsIE1FRElBX0VSUk9SX1VOS05PV04gLCAwLCBvYmopOwogICAgICAg
ICAgICAgICAgQUxPR0UoImdhcGxlc3M6c3RhcnQgcGxheWJhY2sgZm9yIG5leHQgdHJhY2sgZmFpbGVk
LCBlcnIoJWQpIiwgZXJyU3RhcnROZXh0KTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KCiAg
ICBpZiAoTUVESUFfSU5GTyA9PSBtc2cgJiYKICAgICAgICBNRURJQV9JTkZPX01FVEFEQVRBX1VQREFU
RSA9PSBleHQxKSB7CiAgICAgICAgY29uc3QgbWVkaWE6Ok1ldGFkYXRhOjpUeXBlIG1ldGFkYXRhX3R5
cGUgPSBleHQyOwoKICAgICAgICBpZihjbGllbnQtPnNob3VsZERyb3BNZXRhZGF0YShtZXRhZGF0YV90
eXBlKSkgewogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICAvLyBVcGRhdGUgdGhl
IGxpc3Qgb2YgbWV0YWRhdGEgdGhhdCBoYXZlIGNoYW5nZWQuIGdldE1ldGFkYXRhCiAgICAgICAgLy8g
YWxzbyBhY2Nlc3MgbU1ldGFkYXRhVXBkYXRlZCBhbmQgY2xlYXJzIGl0LgogICAgICAgIGNsaWVudC0+
YWRkTmV3TWV0YWRhdGFVcGRhdGUobWV0YWRhdGFfdHlwZSk7CiAgICB9CgogICAgaWYgKGMgIT0gTlVM
TCkgewogICAgICAgIEFMT0dWKCJbJWRdIG5vdGlmeSAoJXAsICVkLCAlZCwgJWQpIiwgY2xpZW50LT5t
Q29ubklkLCBjb29raWUsIG1zZywgZXh0MSwgZXh0Mik7CiAgICAgICAgYy0+bm90aWZ5KG1zZywgZXh0
MSwgZXh0Miwgb2JqKTsKICAgIH0KfQoKCmJvb2wgTWVkaWFQbGF5ZXJTZXJ2aWNlOjpDbGllbnQ6OnNo
b3VsZERyb3BNZXRhZGF0YShtZWRpYTo6TWV0YWRhdGE6OlR5cGUgY29kZSkgY29uc3QKewogICAgTXV0
ZXg6OkF1dG9sb2NrIGxvY2sobUxvY2spOwoKICAgIGlmIChmaW5kTWV0YWRhdGEobU1ldGFkYXRhRHJv
cCwgY29kZSkpIHsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICBpZiAobU1ldGFkYXRhQWxs
b3cuaXNFbXB0eSgpIHx8IGZpbmRNZXRhZGF0YShtTWV0YWRhdGFBbGxvdywgY29kZSkpIHsKICAgICAg
ICByZXR1cm4gZmFsc2U7CiAgICB9IGVsc2UgewogICAgICAgIHJldHVybiB0cnVlOwogICAgfQp9CgoK
dm9pZCBNZWRpYVBsYXllclNlcnZpY2U6OkNsaWVudDo6YWRkTmV3TWV0YWRhdGFVcGRhdGUobWVkaWE6
Ok1ldGFkYXRhOjpUeXBlIG1ldGFkYXRhX3R5cGUpIHsKICAgIE11dGV4OjpBdXRvbG9jayBsb2NrKG1M
b2NrKTsKICAgIGlmIChtTWV0YWRhdGFVcGRhdGVkLmluZGV4T2YobWV0YWRhdGFfdHlwZSkgPCAwKSB7
CiAgICAgICAgbU1ldGFkYXRhVXBkYXRlZC5hZGQobWV0YWRhdGFfdHlwZSk7CiAgICB9Cn0KCi8vIE1v
ZHVsYXIgRFJNCnN0YXR1c190IE1lZGlhUGxheWVyU2VydmljZTo6Q2xpZW50OjpwcmVwYXJlRHJtKGNv
bnN0IHVpbnQ4X3QgdXVpZFsxNl0sCiAgICAgICAgY29uc3QgVmVjdG9yPHVpbnQ4X3Q+JiBkcm1TZXNz
aW9uSWQpCnsKICAgIEFMT0dWKCJbJWRdIHByZXBhcmVEcm0iLCBtQ29ubklkKTsKICAgIHNwPE1lZGlh
UGxheWVyQmFzZT4gcCA9IGdldFBsYXllcigpOwogICAgaWYgKHAgPT0gMCkgcmV0dXJuIFVOS05PV05f
RVJST1I7CgogICAgc3RhdHVzX3QgcmV0ID0gcC0+cHJlcGFyZURybSh1dWlkLCBkcm1TZXNzaW9uSWQp
OwogICAgQUxPR1YoInByZXBhcmVEcm0gcmV0OiAlZCIsIHJldCk7CgogICAgcmV0dXJuIHJldDsKfQoK
c3RhdHVzX3QgTWVkaWFQbGF5ZXJTZXJ2aWNlOjpDbGllbnQ6OnJlbGVhc2VEcm0oKQp7CiAgICBBTE9H
VigiWyVkXSByZWxlYXNlRHJtIiwgbUNvbm5JZCk7CiAgICBzcDxNZWRpYVBsYXllckJhc2U+IHAgPSBn
ZXRQbGF5ZXIoKTsKICAgIGlmIChwID09IDApIHJldHVybiBVTktOT1dOX0VSUk9SOwoKICAgIHN0YXR1
c190IHJldCA9IHAtPnJlbGVhc2VEcm0oKTsKICAgIEFMT0dWKCJyZWxlYXNlRHJtIHJldDogJWQiLCBy
ZXQpOwoKICAgIHJldHVybiByZXQ7Cn0KCiNpZiBDQUxMQkFDS19BTlRBR09OSVpFUgpjb25zdCBpbnQg
QW50YWdvbml6ZXI6OmludGVydmFsID0gMTAwMDA7IC8vIDEwIG1zZWNzCgpBbnRhZ29uaXplcjo6QW50
YWdvbml6ZXIobm90aWZ5X2NhbGxiYWNrX2YgY2IsIHZvaWQqIGNsaWVudCkgOgogICAgbUV4aXQoZmFs
c2UpLCBtQWN0aXZlKGZhbHNlKSwgbUNsaWVudChjbGllbnQpLCBtQ2IoY2IpCnsKICAgIGNyZWF0ZVRo
cmVhZChjYWxsYmFja1RocmVhZCwgdGhpcyk7Cn0KCnZvaWQgQW50YWdvbml6ZXI6OmtpbGwoKQp7CiAg
ICBNdXRleDo6QXV0b2xvY2sgX2wobUxvY2spOwogICAgbUFjdGl2ZSA9IGZhbHNlOwogICAgbUV4aXQg
PSB0cnVlOwogICAgbUNvbmRpdGlvbi53YWl0KG1Mb2NrKTsKfQoKaW50IEFudGFnb25pemVyOjpjYWxs
YmFja1RocmVhZCh2b2lkKiB1c2VyKQp7CiAgICBBTE9HRCgiQW50YWdvbml6ZXIgc3RhcnRlZCIpOwog
ICAgQW50YWdvbml6ZXIqIHAgPSByZWludGVycHJldF9jYXN0PEFudGFnb25pemVyKj4odXNlcik7CiAg
ICB3aGlsZSAoIXAtPm1FeGl0KSB7CiAgICAgICAgaWYgKHAtPm1BY3RpdmUpIHsKICAgICAgICAgICAg
QUxPR1YoInNlbmQgZXZlbnQiKTsKICAgICAgICAgICAgcC0+bUNiKHAtPm1DbGllbnQsIDAsIDAsIDAp
OwogICAgICAgIH0KICAgICAgICB1c2xlZXAoaW50ZXJ2YWwpOwogICAgfQogICAgTXV0ZXg6OkF1dG9s
b2NrIF9sKHAtPm1Mb2NrKTsKICAgIHAtPm1Db25kaXRpb24uc2lnbmFsKCk7CiAgICBBTE9HRCgiQW50
YWdvbml6ZXIgc3RvcHBlZCIpOwogICAgcmV0dXJuIDA7Cn0KI2VuZGlmCgojdW5kZWYgTE9HX1RBRwoj
ZGVmaW5lIExPR19UQUcgIkF1ZGlvU2luayIKTWVkaWFQbGF5ZXJTZXJ2aWNlOjpBdWRpb091dHB1dDo6
QXVkaW9PdXRwdXQoYXVkaW9fc2Vzc2lvbl90IHNlc3Npb25JZCwgdWlkX3QgdWlkLCBpbnQgcGlkLAog
ICAgICAgIGNvbnN0IGF1ZGlvX2F0dHJpYnV0ZXNfdCogYXR0cikKICAgIDogbUNhbGxiYWNrKE5VTEwp
LAogICAgICBtQ2FsbGJhY2tDb29raWUoTlVMTCksCiAgICAgIG1DYWxsYmFja0RhdGEoTlVMTCksCiAg
ICAgIG1TdHJlYW1UeXBlKEFVRElPX1NUUkVBTV9NVVNJQyksCiAgICAgIG1MZWZ0Vm9sdW1lKDEuMCks
CiAgICAgIG1SaWdodFZvbHVtZSgxLjApLAogICAgICBtUGxheWJhY2tSYXRlKEFVRElPX1BMQVlCQUNL
X1JBVEVfREVGQVVMVCksCiAgICAgIG1TYW1wbGVSYXRlSHooMCksCiAgICAgIG1Nc2Vjc1BlckZyYW1l
KDApLAogICAgICBtRnJhbWVTaXplKDApLAogICAgICBtU2Vzc2lvbklkKHNlc3Npb25JZCksCiAgICAg
IG1VaWQodWlkKSwKICAgICAgbVBpZChwaWQpLAogICAgICBtU2VuZExldmVsKDAuMCksCiAgICAgIG1B
dXhFZmZlY3RJZCgwKSwKICAgICAgbUZsYWdzKEFVRElPX09VVFBVVF9GTEFHX05PTkUpLAogICAgICBt
Vm9sdW1lSGFuZGxlcihuZXcgVm9sdW1lSGFuZGxlcigpKQp7CiAgICBBTE9HVigiQXVkaW9PdXRwdXQo
JWQpIiwgc2Vzc2lvbklkKTsKICAgIGlmIChhdHRyICE9IE5VTEwpIHsKICAgICAgICBtQXR0cmlidXRl
cyA9IChhdWRpb19hdHRyaWJ1dGVzX3QgKikgY2FsbG9jKDEsIHNpemVvZihhdWRpb19hdHRyaWJ1dGVz
X3QpKTsKICAgICAgICBpZiAobUF0dHJpYnV0ZXMgIT0gTlVMTCkgewogICAgICAgICAgICBtZW1jcHko
bUF0dHJpYnV0ZXMsIGF0dHIsIHNpemVvZihhdWRpb19hdHRyaWJ1dGVzX3QpKTsKICAgICAgICAgICAg
bVN0cmVhbVR5cGUgPSBhdWRpb19hdHRyaWJ1dGVzX3RvX3N0cmVhbV90eXBlKGF0dHIpOwogICAgICAg
IH0KICAgIH0gZWxzZSB7CiAgICAgICAgbUF0dHJpYnV0ZXMgPSBOVUxMOwogICAgfQoKICAgIHNldE1p
bkJ1ZmZlckNvdW50KCk7Cn0KCk1lZGlhUGxheWVyU2VydmljZTo6QXVkaW9PdXRwdXQ6On5BdWRpb091
dHB1dCgpCnsKICAgIGNsb3NlKCk7CiAgICBmcmVlKG1BdHRyaWJ1dGVzKTsKICAgIGRlbGV0ZSBtQ2Fs
bGJhY2tEYXRhOwp9CgovL3N0YXRpYwp2b2lkIE1lZGlhUGxheWVyU2VydmljZTo6QXVkaW9PdXRwdXQ6
OnNldE1pbkJ1ZmZlckNvdW50KCkKewogICAgY2hhciB2YWx1ZVtQUk9QRVJUWV9WQUxVRV9NQVhdOwog
ICAgaWYgKHByb3BlcnR5X2dldCgicm8ua2VybmVsLnFlbXUiLCB2YWx1ZSwgMCkpIHsKICAgICAgICBt
SXNPbkVtdWxhdG9yID0gdHJ1ZTsKICAgICAgICBtTWluQnVmZmVyQ291bnQgPSAxMjsgIC8vIHRvIHBy
ZXZlbnQgc3lzdGVtYXRpYyBidWZmZXIgdW5kZXJydW4gZm9yIGVtdWxhdG9yCiAgICB9Cn0KCi8vIHN0
YXRpYwpib29sIE1lZGlhUGxheWVyU2VydmljZTo6QXVkaW9PdXRwdXQ6OmlzT25FbXVsYXRvcigpCnsK
ICAgIHNldE1pbkJ1ZmZlckNvdW50KCk7IC8vIGJlbmlnbiByYWNlIHdydCBvdGhlciB0aHJlYWRzCiAg
ICByZXR1cm4gbUlzT25FbXVsYXRvcjsKfQoKLy8gc3RhdGljCmludCBNZWRpYVBsYXllclNlcnZpY2U6
OkF1ZGlvT3V0cHV0OjpnZXRNaW5CdWZmZXJDb3VudCgpCnsKICAgIHNldE1pbkJ1ZmZlckNvdW50KCk7
IC8vIGJlbmlnbiByYWNlIHdydCBvdGhlciB0aHJlYWRzCiAgICByZXR1cm4gbU1pbkJ1ZmZlckNvdW50
Owp9Cgpzc2l6ZV90IE1lZGlhUGxheWVyU2VydmljZTo6QXVkaW9PdXRwdXQ6OmJ1ZmZlclNpemUoKSBj
b25zdAp7CiAgICBNdXRleDo6QXV0b2xvY2sgbG9jayhtTG9jayk7CiAgICBpZiAobVRyYWNrID09IDAp
IHJldHVybiBOT19JTklUOwogICAgcmV0dXJuIG1UcmFjay0+ZnJhbWVDb3VudCgpICogbUZyYW1lU2l6
ZTsKfQoKc3NpemVfdCBNZWRpYVBsYXllclNlcnZpY2U6OkF1ZGlvT3V0cHV0OjpmcmFtZUNvdW50KCkg
Y29uc3QKewogICAgTXV0ZXg6OkF1dG9sb2NrIGxvY2sobUxvY2spOwogICAgaWYgKG1UcmFjayA9PSAw
KSByZXR1cm4gTk9fSU5JVDsKICAgIHJldHVybiBtVHJhY2stPmZyYW1lQ291bnQoKTsKfQoKc3NpemVf
dCBNZWRpYVBsYXllclNlcnZpY2U6OkF1ZGlvT3V0cHV0OjpjaGFubmVsQ291bnQoKSBjb25zdAp7CiAg
ICBNdXRleDo6QXV0b2xvY2sgbG9jayhtTG9jayk7CiAgICBpZiAobVRyYWNrID09IDApIHJldHVybiBO
T19JTklUOwogICAgcmV0dXJuIG1UcmFjay0+Y2hhbm5lbENvdW50KCk7Cn0KCnNzaXplX3QgTWVkaWFQ
bGF5ZXJTZXJ2aWNlOjpBdWRpb091dHB1dDo6ZnJhbWVTaXplKCkgY29uc3QKewogICAgTXV0ZXg6OkF1
dG9sb2NrIGxvY2sobUxvY2spOwogICAgaWYgKG1UcmFjayA9PSAwKSByZXR1cm4gTk9fSU5JVDsKICAg
IHJldHVybiBtRnJhbWVTaXplOwp9Cgp1aW50MzJfdCBNZWRpYVBsYXllclNlcnZpY2U6OkF1ZGlvT3V0
cHV0OjpsYXRlbmN5ICgpIGNvbnN0CnsKICAgIE11dGV4OjpBdXRvbG9jayBsb2NrKG1Mb2NrKTsKICAg
IGlmIChtVHJhY2sgPT0gMCkgcmV0dXJuIDA7CiAgICByZXR1cm4gbVRyYWNrLT5sYXRlbmN5KCk7Cn0K
CmZsb2F0IE1lZGlhUGxheWVyU2VydmljZTo6QXVkaW9PdXRwdXQ6Om1zZWNzUGVyRnJhbWUoKSBjb25z
dAp7CiAgICBNdXRleDo6QXV0b2xvY2sgbG9jayhtTG9jayk7CiAgICByZXR1cm4gbU1zZWNzUGVyRnJh
bWU7Cn0KCnN0YXR1c190IE1lZGlhUGxheWVyU2VydmljZTo6QXVkaW9PdXRwdXQ6OmdldFBvc2l0aW9u
KHVpbnQzMl90ICpwb3NpdGlvbikgY29uc3QKewogICAgTXV0ZXg6OkF1dG9sb2NrIGxvY2sobUxvY2sp
OwogICAgaWYgKG1UcmFjayA9PSAwKSByZXR1cm4gTk9fSU5JVDsKICAgIHJldHVybiBtVHJhY2stPmdl
dFBvc2l0aW9uKHBvc2l0aW9uKTsKfQoKc3RhdHVzX3QgTWVkaWFQbGF5ZXJTZXJ2aWNlOjpBdWRpb091
dHB1dDo6Z2V0VGltZXN0YW1wKEF1ZGlvVGltZXN0YW1wICZ0cykgY29uc3QKewogICAgTXV0ZXg6OkF1
dG9sb2NrIGxvY2sobUxvY2spOwogICAgaWYgKG1UcmFjayA9PSAwKSByZXR1cm4gTk9fSU5JVDsKICAg
IHJldHVybiBtVHJhY2stPmdldFRpbWVzdGFtcCh0cyk7Cn0KCi8vIFRPRE86IFJlbW92ZSB1bm5lY2Vz
c2FyeSBjYWxscyB0byBnZXRQbGF5ZWRPdXREdXJhdGlvblVzKCkKLy8gYXMgaXQgYWNxdWlyZXMgbG9j
a3MgYW5kIG1heSBxdWVyeSB0aGUgYXVkaW8gZHJpdmVyLgovLwovLyBTb21lIGNhbGxzIGNvdWxkIGNv
bmNlaXZhYmx5IHJldHJpZXZlIGV4dHJhcG9sYXRlZCBkYXRhIGluc3RlYWQgb2YKLy8gYWNjZXNzaW5n
IGdldFRpbWVzdGFtcCgpIG9yIGdldFBvc2l0aW9uKCkgZXZlcnkgdGltZSBhIGRhdGEgYnVmZmVyIHdp
dGgKLy8gYSBtZWRpYSB0aW1lIGlzIHJlY2VpdmVkLgovLwovLyBDYWxjdWxhdGUgZHVyYXRpb24gb2Yg
cGxheWVkIHNhbXBsZXMgaWYgcGxheWVkIGF0IG5vcm1hbCByYXRlIChpLmUuLCAxLjApLgppbnQ2NF90
IE1lZGlhUGxheWVyU2VydmljZTo6QXVkaW9PdXRwdXQ6OmdldFBsYXllZE91dER1cmF0aW9uVXMoaW50
NjRfdCBub3dVcykgY29uc3QKewogICAgTXV0ZXg6OkF1dG9sb2NrIGxvY2sobUxvY2spOwogICAgaWYg
KG1UcmFjayA9PSAwIHx8IG1TYW1wbGVSYXRlSHogPT0gMCkgewogICAgICAgIHJldHVybiAwOwogICAg
fQoKICAgIHVpbnQzMl90IG51bUZyYW1lc1BsYXllZDsKICAgIGludDY0X3QgbnVtRnJhbWVzUGxheWVk
QXRVczsKICAgIEF1ZGlvVGltZXN0YW1wIHRzOwoKICAgIHN0YXR1c190IHJlcyA9IG1UcmFjay0+Z2V0
VGltZXN0YW1wKHRzKTsKICAgIGlmIChyZXMgPT0gT0spIHsgICAgICAgICAgICAgICAgIC8vIGNhc2Ug
MTogbWl4aW5nIGF1ZGlvIHRyYWNrcyBhbmQgb2ZmbG9hZGVkIHRyYWNrcy4KICAgICAgICBudW1GcmFt
ZXNQbGF5ZWQgPSB0cy5tUG9zaXRpb247CiAgICAgICAgbnVtRnJhbWVzUGxheWVkQXRVcyA9IHRzLm1U
aW1lLnR2X3NlYyAqIDEwMDAwMDBMTCArIHRzLm1UaW1lLnR2X25zZWMgLyAxMDAwOwogICAgICAgIC8v
QUxPR0QoImdldFRpbWVzdGFtcDogT0sgJWQgJWxsZCIsIG51bUZyYW1lc1BsYXllZCwgKGxvbmcgbG9u
ZyludW1GcmFtZXNQbGF5ZWRBdFVzKTsKICAgIH0gZWxzZSBpZiAocmVzID09IFdPVUxEX0JMT0NLKSB7
IC8vIGNhc2UgMjogdHJhbnNpdG9yeSBzdGF0ZSBvbiBzdGFydCBvZiBhIG5ldyB0cmFjawogICAgICAg
IG51bUZyYW1lc1BsYXllZCA9IDA7CiAgICAgICAgbnVtRnJhbWVzUGxheWVkQXRVcyA9IG5vd1VzOwog
ICAgICAgIC8vQUxPR0QoImdldFRpbWVzdGFtcDogV09VTERfQkxPQ0sgJWQgJWxsZCIsCiAgICAgICAg
Ly8gICAgICAgIG51bUZyYW1lc1BsYXllZCwgKGxvbmcgbG9uZyludW1GcmFtZXNQbGF5ZWRBdFVzKTsK
ICAgIH0gZWxzZSB7ICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNhc2UgMzogdHJhbnNpdG9yeSBh
dCBuZXcgdHJhY2sgb3IgYXVkaW8gZmFzdCB0cmFja3MuCiAgICAgICAgcmVzID0gbVRyYWNrLT5nZXRQ
b3NpdGlvbigmbnVtRnJhbWVzUGxheWVkKTsKICAgICAgICBDSEVDS19FUShyZXMsIChzdGF0dXNfdClP
Syk7CiAgICAgICAgbnVtRnJhbWVzUGxheWVkQXRVcyA9IG5vd1VzOwogICAgICAgIG51bUZyYW1lc1Bs
YXllZEF0VXMgKz0gMTAwMExMICogbVRyYWNrLT5sYXRlbmN5KCkgLyAyOyAvKiBYWFggKi8KICAgICAg
ICAvL0FMT0dEKCJnZXRQb3NpdGlvbjogJXUgJWxsZCIsIG51bUZyYW1lc1BsYXllZCwgKGxvbmcgbG9u
ZyludW1GcmFtZXNQbGF5ZWRBdFVzKTsKICAgIH0KCiAgICAvLyBDSEVDS19FUShudW1GcmFtZXNQbGF5
ZWQgJiAoMSA8PCAzMSksIDApOyAgLy8gY2FuJ3QgYmUgbmVnYXRpdmUgdW50aWwgMTIuNCBocnMsIHRl
c3QKICAgIC8vIFRPRE86IHJlbW92ZSB0aGUgKGludDMyX3QpIGNhc3RpbmcgYmVsb3cgYXMgaXQgbWF5
IG92ZXJmbG93IGF0IDEyLjQgaG91cnMuCiAgICBpbnQ2NF90IGR1cmF0aW9uVXMgPSAoaW50NjRfdCko
KGludDMyX3QpbnVtRnJhbWVzUGxheWVkICogMTAwMDAwMExMIC8gbVNhbXBsZVJhdGVIeikKICAgICAg
ICAgICAgKyBub3dVcyAtIG51bUZyYW1lc1BsYXllZEF0VXM7CiAgICBpZiAoZHVyYXRpb25VcyA8IDAp
IHsKICAgICAgICAvLyBPY2N1cnMgd2hlbiBudW1GcmFtZXNQbGF5ZWQgcG9zaXRpb24gaXMgdmVyeSBz
bWFsbCBhbmQgdGhlIGZvbGxvd2luZzoKICAgICAgICAvLyAoMSkgSW4gY2FzZSAxLCB0aGUgdGltZSBu
b3dVcyBpcyBjb21wdXRlZCBiZWZvcmUgZ2V0VGltZXN0YW1wKCkgaXMgY2FsbGVkIGFuZAogICAgICAg
IC8vICAgICBudW1GcmFtZXNQbGF5ZWRBdFVzIGlzIGdyZWF0ZXIgdGhhbiBub3dVcyBieSB0aW1lIG1v
cmUgdGhhbiBudW1GcmFtZXNQbGF5ZWQuCiAgICAgICAgLy8gKDIpIEluIGNhc2UgMywgdXNpbmcgZ2V0
UG9zaXRpb24gYW5kIGFkZGluZyBtQXVkaW9TaW5rLT5sYXRlbmN5KCkgdG8KICAgICAgICAvLyAgICAg
bnVtRnJhbWVzUGxheWVkQXRVcywgYnkgYSB0aW1lIGFtb3VudCBncmVhdGVyIHRoYW4gbnVtRnJhbWVz
UGxheWVkLgogICAgICAgIC8vCiAgICAgICAgLy8gQm90aCBvZiB0aGVzZSBhcmUgdHJhbnNpdG9yeSBj
b25kaXRpb25zLgogICAgICAgIEFMT0dWKCJnZXRQbGF5ZWRPdXREdXJhdGlvblVzOiBuZWdhdGl2ZSBk
dXJhdGlvbiAlbGxkIHNldCB0byB6ZXJvIiwgKGxvbmcgbG9uZylkdXJhdGlvblVzKTsKICAgICAgICBk
dXJhdGlvblVzID0gMDsKICAgIH0KICAgIEFMT0dWKCJnZXRQbGF5ZWRPdXREdXJhdGlvblVzKCVsbGQp
IG5vd1VzKCVsbGQpIGZyYW1lcygldSkgZnJhbWVzQXQoJWxsZCkiLAogICAgICAgICAgICAobG9uZyBs
b25nKWR1cmF0aW9uVXMsIChsb25nIGxvbmcpbm93VXMsCiAgICAgICAgICAgIG51bUZyYW1lc1BsYXll
ZCwgKGxvbmcgbG9uZyludW1GcmFtZXNQbGF5ZWRBdFVzKTsKICAgIHJldHVybiBkdXJhdGlvblVzOwp9
CgpzdGF0dXNfdCBNZWRpYVBsYXllclNlcnZpY2U6OkF1ZGlvT3V0cHV0OjpnZXRGcmFtZXNXcml0dGVu
KHVpbnQzMl90ICpmcmFtZXN3cml0dGVuKSBjb25zdAp7CiAgICBNdXRleDo6QXV0b2xvY2sgbG9jayht
TG9jayk7CiAgICBpZiAobVRyYWNrID09IDApIHJldHVybiBOT19JTklUOwogICAgRXh0ZW5kZWRUaW1l
c3RhbXAgZXRzOwogICAgc3RhdHVzX3Qgc3RhdHVzID0gbVRyYWNrLT5nZXRUaW1lc3RhbXAoJmV0cyk7
CiAgICBpZiAoc3RhdHVzID09IE9LIHx8IHN0YXR1cyA9PSBXT1VMRF9CTE9DSykgewogICAgICAgICpm
cmFtZXN3cml0dGVuID0gKHVpbnQzMl90KWV0cy5tUG9zaXRpb25bRXh0ZW5kZWRUaW1lc3RhbXA6OkxP
Q0FUSU9OX0NMSUVOVF07CiAgICB9CiAgICByZXR1cm4gc3RhdHVzOwp9CgpzdGF0dXNfdCBNZWRpYVBs
YXllclNlcnZpY2U6OkF1ZGlvT3V0cHV0OjpzZXRQYXJhbWV0ZXJzKGNvbnN0IFN0cmluZzgmIGtleVZh
bHVlUGFpcnMpCnsKICAgIE11dGV4OjpBdXRvbG9jayBsb2NrKG1Mb2NrKTsKICAgIGlmIChtVHJhY2sg
PT0gMCkgcmV0dXJuIE5PX0lOSVQ7CiAgICByZXR1cm4gbVRyYWNrLT5zZXRQYXJhbWV0ZXJzKGtleVZh
bHVlUGFpcnMpOwp9CgpTdHJpbmc4ICBNZWRpYVBsYXllclNlcnZpY2U6OkF1ZGlvT3V0cHV0OjpnZXRQ
YXJhbWV0ZXJzKGNvbnN0IFN0cmluZzgmIGtleXMpCnsKICAgIE11dGV4OjpBdXRvbG9jayBsb2NrKG1M
b2NrKTsKICAgIGlmIChtVHJhY2sgPT0gMCkgcmV0dXJuIFN0cmluZzg6OmVtcHR5KCk7CiAgICByZXR1
cm4gbVRyYWNrLT5nZXRQYXJhbWV0ZXJzKGtleXMpOwp9Cgp2b2lkIE1lZGlhUGxheWVyU2VydmljZTo6
QXVkaW9PdXRwdXQ6OnNldEF1ZGlvQXR0cmlidXRlcyhjb25zdCBhdWRpb19hdHRyaWJ1dGVzX3QgKiBh
dHRyaWJ1dGVzKSB7CiAgICBNdXRleDo6QXV0b2xvY2sgbG9jayhtTG9jayk7CiAgICBpZiAoYXR0cmli
dXRlcyA9PSBOVUxMKSB7CiAgICAgICAgZnJlZShtQXR0cmlidXRlcyk7CiAgICAgICAgbUF0dHJpYnV0
ZXMgPSBOVUxMOwogICAgfSBlbHNlIHsKICAgICAgICBpZiAobUF0dHJpYnV0ZXMgPT0gTlVMTCkgewog
ICAgICAgICAgICBtQXR0cmlidXRlcyA9IChhdWRpb19hdHRyaWJ1dGVzX3QgKikgY2FsbG9jKDEsIHNp
emVvZihhdWRpb19hdHRyaWJ1dGVzX3QpKTsKICAgICAgICB9CiAgICAgICAgbWVtY3B5KG1BdHRyaWJ1
dGVzLCBhdHRyaWJ1dGVzLCBzaXplb2YoYXVkaW9fYXR0cmlidXRlc190KSk7CiAgICAgICAgbVN0cmVh
bVR5cGUgPSBhdWRpb19hdHRyaWJ1dGVzX3RvX3N0cmVhbV90eXBlKGF0dHJpYnV0ZXMpOwogICAgfQp9
Cgp2b2lkIE1lZGlhUGxheWVyU2VydmljZTo6QXVkaW9PdXRwdXQ6OnNldEF1ZGlvU3RyZWFtVHlwZShh
dWRpb19zdHJlYW1fdHlwZV90IHN0cmVhbVR5cGUpCnsKICAgIE11dGV4OjpBdXRvbG9jayBsb2NrKG1M
b2NrKTsKICAgIC8vIGRvIG5vdCBhbGxvdyBkaXJlY3Qgc3RyZWFtIHR5cGUgbW9kaWZpY2F0aW9uIGlm
IGF0dHJpYnV0ZXMgaGF2ZSBiZWVuIHNldAogICAgaWYgKG1BdHRyaWJ1dGVzID09IE5VTEwpIHsKICAg
ICAgICBtU3RyZWFtVHlwZSA9IHN0cmVhbVR5cGU7CiAgICB9Cn0KCnZvaWQgTWVkaWFQbGF5ZXJTZXJ2
aWNlOjpBdWRpb091dHB1dDo6ZGVsZXRlUmVjeWNsZWRUcmFja19sKCkKewogICAgQUxPR1YoImRlbGV0
ZVJlY3ljbGVkVHJhY2tfbCIpOwogICAgaWYgKG1SZWN5Y2xlZFRyYWNrICE9IDApIHsKCiAgICAgICAg
aWYgKG1DYWxsYmFja0RhdGEgIT0gTlVMTCkgewogICAgICAgICAgICBtQ2FsbGJhY2tEYXRhLT5zZXRP
dXRwdXQoTlVMTCk7CiAgICAgICAgICAgIG1DYWxsYmFja0RhdGEtPmVuZFRyYWNrU3dpdGNoKCk7CiAg
ICAgICAgfQoKICAgICAgICBpZiAoKG1SZWN5Y2xlZFRyYWNrLT5nZXRGbGFncygpICYgQVVESU9fT1VU
UFVUX0ZMQUdfQ09NUFJFU1NfT0ZGTE9BRCkgPT0gMCkgewogICAgICAgICAgICBpbnQzMl90IG1zZWMg
PSAwOwogICAgICAgICAgICBpZiAoIW1SZWN5Y2xlZFRyYWNrLT5zdG9wcGVkKCkpIHsgLy8gY2hlY2sg
aWYgYWN0aXZlCiAgICAgICAgICAgICAgICAgKHZvaWQpbVJlY3ljbGVkVHJhY2stPnBlbmRpbmdEdXJh
dGlvbigmbXNlYyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgbVJlY3ljbGVkVHJhY2stPnN0b3Ao
KTsgLy8gZW5zdXJlIGZ1bGwgZGF0YSBkcmFpbgogICAgICAgICAgICBBTE9HRCgiZGVsZXRpbmcgcmVj
eWNsZWQgdHJhY2ssIHdhaXRpbmcgZm9yIGRhdGEgZHJhaW4gKCVkIG1zZWMpIiwgbXNlYyk7CiAgICAg
ICAgICAgIGlmIChtc2VjID4gMCkgewogICAgICAgICAgICAgICAgc3RhdGljIGNvbnN0IGludDMyX3Qg
V0FJVF9MSU1JVF9NUyA9IDMwMDA7CiAgICAgICAgICAgICAgICBpZiAobXNlYyA+IFdBSVRfTElNSVRf
TVMpIHsKICAgICAgICAgICAgICAgICAgICBtc2VjID0gV0FJVF9MSU1JVF9NUzsKICAgICAgICAgICAg
ICAgIH0KICAgICAgICAgICAgICAgIHVzbGVlcChtc2VjICogMTAwMExMKTsKICAgICAgICAgICAgfQog
ICAgICAgIH0KICAgICAgICAvLyBBbiBvZmZsb2FkZWQgdHJhY2sgaXNuJ3QgZmx1c2hlZCBiZWNhdXNl
IHRoZSBTVFJFQU1fRU5EIGlzIHJlcG9ydGVkCiAgICAgICAgLy8gc2xpZ2h0bHkgcHJlbWF0dXJlbHkg
dG8gYWxsb3cgdGltZSBmb3IgdGhlIGdhcGxlc3MgdHJhY2sgc3dpdGNoCiAgICAgICAgLy8gYnV0IHRo
aXMgbWVhbnMgdGhhdCBpZiB3ZSBkZWNpZGUgbm90IHRvIHJlY3ljbGUgdGhlIHRyYWNrIHRoZXJlCiAg
ICAgICAgLy8gY291bGQgYmUgYSBzbWFsbCBhbW91bnQgb2YgcmVzaWR1YWwgZGF0YSBzdGlsbCBwbGF5
aW5nLiBXZSBsZWF2ZQogICAgICAgIC8vIEF1ZGlvRmxpbmdlciB0byBkcmFpbiB0aGUgdHJhY2suCgog
ICAgICAgIG1SZWN5Y2xlZFRyYWNrLmNsZWFyKCk7CiAgICAgICAgY2xvc2VfbCgpOwogICAgICAgIGRl
bGV0ZSBtQ2FsbGJhY2tEYXRhOwogICAgICAgIG1DYWxsYmFja0RhdGEgPSBOVUxMOwogICAgfQp9Cgp2
b2lkIE1lZGlhUGxheWVyU2VydmljZTo6QXVkaW9PdXRwdXQ6OmNsb3NlX2woKQp7CiAgICBtVHJhY2su
Y2xlYXIoKTsKfQoKc3RhdHVzX3QgTWVkaWFQbGF5ZXJTZXJ2aWNlOjpBdWRpb091dHB1dDo6b3BlbigK
ICAgICAgICB1aW50MzJfdCBzYW1wbGVSYXRlLCBpbnQgY2hhbm5lbENvdW50LCBhdWRpb19jaGFubmVs
X21hc2tfdCBjaGFubmVsTWFzaywKICAgICAgICBhdWRpb19mb3JtYXRfdCBmb3JtYXQsIGludCBidWZm
ZXJDb3VudCwKICAgICAgICBBdWRpb0NhbGxiYWNrIGNiLCB2b2lkICpjb29raWUsCiAgICAgICAgYXVk
aW9fb3V0cHV0X2ZsYWdzX3QgZmxhZ3MsCiAgICAgICAgY29uc3QgYXVkaW9fb2ZmbG9hZF9pbmZvX3Qg
Km9mZmxvYWRJbmZvLAogICAgICAgIGJvb2wgZG9Ob3RSZWNvbm5lY3QsCiAgICAgICAgdWludDMyX3Qg
c3VnZ2VzdGVkRnJhbWVDb3VudCkKewogICAgQUxPR1YoIm9wZW4oJXUsICVkLCAweCV4LCAweCV4LCAl
ZCwgJWQgMHgleCkiLCBzYW1wbGVSYXRlLCBjaGFubmVsQ291bnQsIGNoYW5uZWxNYXNrLAogICAgICAg
ICAgICAgICAgZm9ybWF0LCBidWZmZXJDb3VudCwgbVNlc3Npb25JZCwgZmxhZ3MpOwoKICAgIC8vIG9m
ZmxvYWRpbmcgaXMgb25seSBzdXBwb3J0ZWQgaW4gY2FsbGJhY2sgbW9kZSBmb3Igbm93LgogICAgLy8g
b2ZmbG9hZEluZm8gbXVzdCBiZSBwcmVzZW50IGlmIG9mZmxvYWQgZmxhZyBpcyBzZXQKICAgIGlmICgo
KGZsYWdzICYgQVVESU9fT1VUUFVUX0ZMQUdfQ09NUFJFU1NfT0ZGTE9BRCkgIT0gMCkgJiYKICAgICAg
ICAgICAgKChjYiA9PSBOVUxMKSB8fCAob2ZmbG9hZEluZm8gPT0gTlVMTCkpKSB7CiAgICAgICAgcmV0
dXJuIEJBRF9WQUxVRTsKICAgIH0KCiAgICAvLyBjb21wdXRlIGZyYW1lIGNvdW50IGZvciB0aGUgQXVk
aW9UcmFjayBpbnRlcm5hbCBidWZmZXIKICAgIHNpemVfdCBmcmFtZUNvdW50OwogICAgaWYgKChmbGFn
cyAmIEFVRElPX09VVFBVVF9GTEFHX0NPTVBSRVNTX09GRkxPQUQpICE9IDApIHsKICAgICAgICBmcmFt
ZUNvdW50ID0gMDsgLy8gQXVkaW9UcmFjayB3aWxsIGdldCBmcmFtZSBjb3VudCBmcm9tIEF1ZGlvRmxp
bmdlcgogICAgfSBlbHNlIHsKICAgICAgICAvLyB0cnkgdG8gZXN0aW1hdGUgdGhlIGJ1ZmZlciBwcm9j
ZXNzaW5nIGZldGNoIHNpemUgZnJvbSBBdWRpb0ZsaW5nZXIuCiAgICAgICAgLy8gZnJhbWVzUGVyQnVm
ZmVyIGlzIGFwcHJveGltYXRlIGFuZCBnZW5lcmFsbHkgY29ycmVjdCwgZXhjZXB0IHdoZW4gaXQncyBu
b3QgOi0pLgogICAgICAgIHVpbnQzMl90IGFmU2FtcGxlUmF0ZTsKICAgICAgICBzaXplX3QgYWZGcmFt
ZUNvdW50OwogICAgICAgIGlmIChBdWRpb1N5c3RlbTo6Z2V0T3V0cHV0RnJhbWVDb3VudCgmYWZGcmFt
ZUNvdW50LCBtU3RyZWFtVHlwZSkgIT0gTk9fRVJST1IpIHsKICAgICAgICAgICAgcmV0dXJuIE5PX0lO
SVQ7CiAgICAgICAgfQogICAgICAgIGlmIChBdWRpb1N5c3RlbTo6Z2V0T3V0cHV0U2FtcGxpbmdSYXRl
KCZhZlNhbXBsZVJhdGUsIG1TdHJlYW1UeXBlKSAhPSBOT19FUlJPUikgewogICAgICAgICAgICByZXR1
cm4gTk9fSU5JVDsKICAgICAgICB9CiAgICAgICAgY29uc3Qgc2l6ZV90IGZyYW1lc1BlckJ1ZmZlciA9
CiAgICAgICAgICAgICAgICAodW5zaWduZWQgbG9uZyBsb25nKXNhbXBsZVJhdGUgKiBhZkZyYW1lQ291
bnQgLyBhZlNhbXBsZVJhdGU7CgogICAgICAgIGlmIChidWZmZXJDb3VudCA9PSAwKSB7CiAgICAgICAg
ICAgIC8vIHVzZSBzdWdnZXN0ZWRGcmFtZUNvdW50CiAgICAgICAgICAgIGJ1ZmZlckNvdW50ID0gKHN1
Z2dlc3RlZEZyYW1lQ291bnQgKyBmcmFtZXNQZXJCdWZmZXIgLSAxKSAvIGZyYW1lc1BlckJ1ZmZlcjsK
ICAgICAgICB9CiAgICAgICAgLy8gQ2hlY2sgYXJndW1lbnQgYnVmZmVyQ291bnQgYWdhaW5zdCB0aGUg
bWluaW51bSBidWZmZXIgY291bnQKICAgICAgICBpZiAoYnVmZmVyQ291bnQgIT0gMCAmJiBidWZmZXJD
b3VudCA8IG1NaW5CdWZmZXJDb3VudCkgewogICAgICAgICAgICBBTE9HVigiYnVmZmVyQ291bnQgKCVk
KSBpbmNyZWFzZWQgdG8gJWQiLCBidWZmZXJDb3VudCwgbU1pbkJ1ZmZlckNvdW50KTsKICAgICAgICAg
ICAgYnVmZmVyQ291bnQgPSBtTWluQnVmZmVyQ291bnQ7CiAgICAgICAgfQogICAgICAgIC8vIGlmIGZy
YW1lQ291bnQgaXMgMCwgdGhlbiBBdWRpb1RyYWNrIHdpbGwgZ2V0IGZyYW1lIGNvdW50IGZyb20gQXVk
aW9GbGluZ2VyCiAgICAgICAgLy8gd2hpY2ggd2lsbCBiZSB0aGUgbWluaW11bSBzaXplIHBlcm1pdHRl
ZC4KICAgICAgICBmcmFtZUNvdW50ID0gYnVmZmVyQ291bnQgKiBmcmFtZXNQZXJCdWZmZXI7CiAgICB9
CgogICAgaWYgKGNoYW5uZWxNYXNrID09IENIQU5ORUxfTUFTS19VU0VfQ0hBTk5FTF9PUkRFUikgewog
ICAgICAgIGNoYW5uZWxNYXNrID0gYXVkaW9fY2hhbm5lbF9vdXRfbWFza19mcm9tX2NvdW50KGNoYW5u
ZWxDb3VudCk7CiAgICAgICAgaWYgKDAgPT0gY2hhbm5lbE1hc2spIHsKICAgICAgICAgICAgQUxPR0Uo
Im9wZW4oKSBlcnJvciwgY2FuXCd0IGRlcml2ZSBtYXNrIGZvciAlZCBhdWRpbyBjaGFubmVscyIsIGNo
YW5uZWxDb3VudCk7CiAgICAgICAgICAgIHJldHVybiBOT19JTklUOwogICAgICAgIH0KICAgIH0KCiAg
ICBNdXRleDo6QXV0b2xvY2sgbG9jayhtTG9jayk7CiAgICBtQ2FsbGJhY2sgPSBjYjsKICAgIG1DYWxs
YmFja0Nvb2tpZSA9IGNvb2tpZTsKCiAgICAvLyBDaGVjayB3aGV0aGVyIHdlIGNhbiByZWN5Y2xlIHRo
ZSB0cmFjawogICAgYm9vbCByZXVzZSA9IGZhbHNlOwogICAgYm9vbCBib3RoT2ZmbG9hZGVkID0gZmFs
c2U7CgogICAgaWYgKG1SZWN5Y2xlZFRyYWNrICE9IDApIHsKICAgICAgICAvLyBjaGVjayB3aGV0aGVy
IHdlIGFyZSBzd2l0Y2hpbmcgYmV0d2VlbiB0d28gb2ZmbG9hZGVkIHRyYWNrcwogICAgICAgIGJvdGhP
ZmZsb2FkZWQgPSAoZmxhZ3MgJiBtUmVjeWNsZWRUcmFjay0+Z2V0RmxhZ3MoKQogICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICYgQVVESU9fT1VUUFVUX0ZMQUdfQ09NUFJFU1NfT0ZGTE9BRCkgIT0g
MDsKCiAgICAgICAgLy8gY2hlY2sgaWYgdGhlIGV4aXN0aW5nIHRyYWNrIGNhbiBiZSByZXVzZWQgYXMt
aXMsIG9yIGlmIGEgbmV3IHRyYWNrIG5lZWRzIHRvIGJlIGNyZWF0ZWQuCiAgICAgICAgcmV1c2UgPSB0
cnVlOwoKICAgICAgICBpZiAoKG1DYWxsYmFja0RhdGEgPT0gTlVMTCAmJiBtQ2FsbGJhY2sgIT0gTlVM
TCkgfHwKICAgICAgICAgICAgICAgIChtQ2FsbGJhY2tEYXRhICE9IE5VTEwgJiYgbUNhbGxiYWNrID09
IE5VTEwpKSB7CiAgICAgICAgICAgIC8vIHJlY3ljbGVkIHRyYWNrIHVzZXMgY2FsbGJhY2tzIGJ1dCB0
aGUgY2FsbGVyIHdhbnRzIHRvIHVzZSB3cml0ZXMsIG9yIHZpY2UgdmVyc2EKICAgICAgICAgICAgQUxP
R1YoImNhbid0IGNoYWluIGNhbGxiYWNrIGFuZCB3cml0ZSIpOwogICAgICAgICAgICByZXVzZSA9IGZh
bHNlOwogICAgICAgIH0gZWxzZSBpZiAoKG1SZWN5Y2xlZFRyYWNrLT5nZXRTYW1wbGVSYXRlKCkgIT0g
c2FtcGxlUmF0ZSkgfHwKICAgICAgICAgICAgICAgIChtUmVjeWNsZWRUcmFjay0+Y2hhbm5lbENvdW50
KCkgIT0gKHVpbnQzMl90KWNoYW5uZWxDb3VudCkgKSB7CiAgICAgICAgICAgIEFMT0dWKCJzYW1wbGVy
YXRlLCBjaGFubmVsY291bnQgZGlmZmVyOiAldS8ldSBIeiwgJXUvJWQgY2giLAogICAgICAgICAgICAg
ICAgICBtUmVjeWNsZWRUcmFjay0+Z2V0U2FtcGxlUmF0ZSgpLCBzYW1wbGVSYXRlLAogICAgICAgICAg
ICAgICAgICBtUmVjeWNsZWRUcmFjay0+Y2hhbm5lbENvdW50KCksIGNoYW5uZWxDb3VudCk7CiAgICAg
ICAgICAgIHJldXNlID0gZmFsc2U7CiAgICAgICAgfSBlbHNlIGlmIChmbGFncyAhPSBtRmxhZ3MpIHsK
ICAgICAgICAgICAgQUxPR1YoIm91dHB1dCBmbGFncyBkaWZmZXIgJTA4eC8lMDh4IiwgZmxhZ3MsIG1G
bGFncyk7CiAgICAgICAgICAgIHJldXNlID0gZmFsc2U7CiAgICAgICAgfSBlbHNlIGlmIChtUmVjeWNs
ZWRUcmFjay0+Zm9ybWF0KCkgIT0gZm9ybWF0KSB7CiAgICAgICAgICAgIHJldXNlID0gZmFsc2U7CiAg
ICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgICBBTE9HVigibm8gdHJhY2sgYXZhaWxhYmxlIHRvIHJl
Y3ljbGUiKTsKICAgIH0KCiAgICBBTE9HVl9JRihib3RoT2ZmbG9hZGVkLCAiYm90aCB0cmFja3Mgb2Zm
bG9hZGVkIik7CgogICAgLy8gSWYgd2UgY2FuJ3QgcmVjeWNsZSBhbmQgYm90aCB0cmFja3MgYXJlIG9m
ZmxvYWRlZAogICAgLy8gd2UgbXVzdCBjbG9zZSB0aGUgcHJldmlvdXMgb3V0cHV0IGJlZm9yZSBvcGVu
aW5nIGEgbmV3IG9uZQogICAgaWYgKGJvdGhPZmZsb2FkZWQgJiYgIXJldXNlKSB7CiAgICAgICAgQUxP
R1YoImJvdGggb2ZmbG9hZGVkIGFuZCBub3QgcmVjeWNsaW5nIik7CiAgICAgICAgZGVsZXRlUmVjeWNs
ZWRUcmFja19sKCk7CiAgICB9CgogICAgc3A8QXVkaW9UcmFjaz4gdDsKICAgIENhbGxiYWNrRGF0YSAq
bmV3Y2JkID0gTlVMTDsKCiAgICAvLyBXZSBkb24ndCBhdHRlbXB0IHRvIGNyZWF0ZSBhIG5ldyB0cmFj
ayBpZiB3ZSBhcmUgcmVjeWNsaW5nIGFuCiAgICAvLyBvZmZsb2FkZWQgdHJhY2suIEJ1dCwgaWYgd2Ug
YXJlIHJlY3ljbGluZyBhIG5vbi1vZmZsb2FkZWQgb3Igd2UKICAgIC8vIGFyZSBzd2l0Y2hpbmcgd2hl
cmUgb25lIGlzIG9mZmxvYWRlZCBhbmQgb25lIGlzbid0IHRoZW4gd2UgY3JlYXRlCiAgICAvLyB0aGUg
bmV3IHRyYWNrIGluIGFkdmFuY2Ugc28gdGhhdCB3ZSBjYW4gcmVhZCBhZGRpdGlvbmFsIHN0cmVhbSBp
bmZvCgogICAgaWYgKCEocmV1c2UgJiYgYm90aE9mZmxvYWRlZCkpIHsKICAgICAgICBBTE9HVigiY3Jl
YXRpbmcgbmV3IEF1ZGlvVHJhY2siKTsKCiAgICAgICAgaWYgKG1DYWxsYmFjayAhPSBOVUxMKSB7CiAg
ICAgICAgICAgIG5ld2NiZCA9IG5ldyBDYWxsYmFja0RhdGEodGhpcyk7CiAgICAgICAgICAgIHQgPSBu
ZXcgQXVkaW9UcmFjaygKICAgICAgICAgICAgICAgICAgICBtU3RyZWFtVHlwZSwKICAgICAgICAgICAg
ICAgICAgICBzYW1wbGVSYXRlLAogICAgICAgICAgICAgICAgICAgIGZvcm1hdCwKICAgICAgICAgICAg
ICAgICAgICBjaGFubmVsTWFzaywKICAgICAgICAgICAgICAgICAgICBmcmFtZUNvdW50LAogICAgICAg
ICAgICAgICAgICAgIGZsYWdzLAogICAgICAgICAgICAgICAgICAgIENhbGxiYWNrV3JhcHBlciwKICAg
ICAgICAgICAgICAgICAgICBuZXdjYmQsCiAgICAgICAgICAgICAgICAgICAgMCwgIC8vIG5vdGlmaWNh
dGlvbiBmcmFtZXMKICAgICAgICAgICAgICAgICAgICBtU2Vzc2lvbklkLAogICAgICAgICAgICAgICAg
ICAgIEF1ZGlvVHJhY2s6OlRSQU5TRkVSX0NBTExCQUNLLAogICAgICAgICAgICAgICAgICAgIG9mZmxv
YWRJbmZvLAogICAgICAgICAgICAgICAgICAgIG1VaWQsCiAgICAgICAgICAgICAgICAgICAgbVBpZCwK
ICAgICAgICAgICAgICAgICAgICBtQXR0cmlidXRlcywKICAgICAgICAgICAgICAgICAgICBkb05vdFJl
Y29ubmVjdCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgLy8gVE9ETzogRHVlIHRvIGJ1ZmZl
ciBtZW1vcnkgY29uY2VybnMsIHdlIHVzZSBhIG1heCB0YXJnZXQgcGxheWJhY2sgc3BlZWQKICAgICAg
ICAgICAgLy8gYmFzZWQgb24gbVBsYXliYWNrUmF0ZSBhdCB0aGUgdGltZSBvZiBvcGVuIChpbnN0ZWFk
IG9mIGtNYXhSZXF1aXJlZFNwZWVkKSwKICAgICAgICAgICAgLy8gYWxzbyBjbGFtcGluZyB0aGUgdGFy
Z2V0IHNwZWVkIHRvIDEuMCA8PSB0YXJnZXRTcGVlZCA8PSBrTWF4UmVxdWlyZWRTcGVlZC4KICAgICAg
ICAgICAgY29uc3QgZmxvYXQgdGFyZ2V0U3BlZWQgPQogICAgICAgICAgICAgICAgICAgIHN0ZDo6bWlu
KHN0ZDo6bWF4KG1QbGF5YmFja1JhdGUubVNwZWVkLCAxLjBmKSwga01heFJlcXVpcmVkU3BlZWQpOwog
ICAgICAgICAgICBBTE9HV19JRih0YXJnZXRTcGVlZCAhPSBtUGxheWJhY2tSYXRlLm1TcGVlZCwKICAg
ICAgICAgICAgICAgICAgICAidHJhY2sgdGFyZ2V0IHNwZWVkOiVmIGNsYW1wZWQgZnJvbSBwbGF5YmFj
ayBzcGVlZDolZiIsCiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0U3BlZWQsIG1QbGF5YmFja1JhdGUu
bVNwZWVkKTsKICAgICAgICAgICAgdCA9IG5ldyBBdWRpb1RyYWNrKAogICAgICAgICAgICAgICAgICAg
IG1TdHJlYW1UeXBlLAogICAgICAgICAgICAgICAgICAgIHNhbXBsZVJhdGUsCiAgICAgICAgICAgICAg
ICAgICAgZm9ybWF0LAogICAgICAgICAgICAgICAgICAgIGNoYW5uZWxNYXNrLAogICAgICAgICAgICAg
ICAgICAgIGZyYW1lQ291bnQsCiAgICAgICAgICAgICAgICAgICAgZmxhZ3MsCiAgICAgICAgICAgICAg
ICAgICAgTlVMTCwgLy8gY2FsbGJhY2sKICAgICAgICAgICAgICAgICAgICBOVUxMLCAvLyB1c2VyIGRh
dGEKICAgICAgICAgICAgICAgICAgICAwLCAvLyBub3RpZmljYXRpb24gZnJhbWVzCiAgICAgICAgICAg
ICAgICAgICAgbVNlc3Npb25JZCwKICAgICAgICAgICAgICAgICAgICBBdWRpb1RyYWNrOjpUUkFOU0ZF
Ul9ERUZBVUxULAogICAgICAgICAgICAgICAgICAgIE5VTEwsIC8vIG9mZmxvYWQgaW5mbwogICAgICAg
ICAgICAgICAgICAgIG1VaWQsCiAgICAgICAgICAgICAgICAgICAgbVBpZCwKICAgICAgICAgICAgICAg
ICAgICBtQXR0cmlidXRlcywKICAgICAgICAgICAgICAgICAgICBkb05vdFJlY29ubmVjdCwKICAgICAg
ICAgICAgICAgICAgICB0YXJnZXRTcGVlZCk7CiAgICAgICAgfQoKICAgICAgICBpZiAoKHQgPT0gMCkg
fHwgKHQtPmluaXRDaGVjaygpICE9IE5PX0VSUk9SKSkgewogICAgICAgICAgICBBTE9HRSgiVW5hYmxl
IHRvIGNyZWF0ZSBhdWRpbyB0cmFjayIpOwogICAgICAgICAgICBkZWxldGUgbmV3Y2JkOwogICAgICAg
ICAgICAvLyB0IGdvZXMgb3V0IG9mIHNjb3BlLCBzbyByZWZlcmVuY2UgY291bnQgZHJvcHMgdG8gemVy
bwogICAgICAgICAgICByZXR1cm4gTk9fSU5JVDsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAv
LyBzdWNjZXNzZnVsIEF1ZGlvVHJhY2sgaW5pdGlhbGl6YXRpb24gaW1wbGllcyBhIGxlZ2FjeSBzdHJl
YW0gdHlwZSB3YXMgZ2VuZXJhdGVkCiAgICAgICAgICAgIC8vIGZyb20gdGhlIGF1ZGlvIGF0dHJpYnV0
ZXMKICAgICAgICAgICAgbVN0cmVhbVR5cGUgPSB0LT5zdHJlYW1UeXBlKCk7CiAgICAgICAgfQogICAg
fQoKICAgIGlmIChyZXVzZSkgewogICAgICAgIENIRUNLKG1SZWN5Y2xlZFRyYWNrICE9IE5VTEwpOwoK
ICAgICAgICBpZiAoIWJvdGhPZmZsb2FkZWQpIHsKICAgICAgICAgICAgaWYgKG1SZWN5Y2xlZFRyYWNr
LT5mcmFtZUNvdW50KCkgIT0gdC0+ZnJhbWVDb3VudCgpKSB7CiAgICAgICAgICAgICAgICBBTE9HVigi
ZnJhbWVjb3VudCBkaWZmZXJzOiAlenUvJXp1IGZyYW1lcyIsCiAgICAgICAgICAgICAgICAgICAgICBt
UmVjeWNsZWRUcmFjay0+ZnJhbWVDb3VudCgpLCB0LT5mcmFtZUNvdW50KCkpOwogICAgICAgICAgICAg
ICAgcmV1c2UgPSBmYWxzZTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgaWYgKHJldXNl
KSB7CiAgICAgICAgICAgIEFMT0dWKCJjaGFpbmluZyB0byBuZXh0IG91dHB1dCBhbmQgcmVjeWNsaW5n
IHRyYWNrIik7CiAgICAgICAgICAgIGNsb3NlX2woKTsKICAgICAgICAgICAgbVRyYWNrID0gbVJlY3lj
bGVkVHJhY2s7CiAgICAgICAgICAgIG1SZWN5Y2xlZFRyYWNrLmNsZWFyKCk7CiAgICAgICAgICAgIGlm
IChtQ2FsbGJhY2tEYXRhICE9IE5VTEwpIHsKICAgICAgICAgICAgICAgIG1DYWxsYmFja0RhdGEtPnNl
dE91dHB1dCh0aGlzKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBkZWxldGUgbmV3Y2JkOwogICAg
ICAgICAgICByZXR1cm4gdXBkYXRlVHJhY2soKTsKICAgICAgICB9CiAgICB9CgogICAgLy8gd2UncmUg
bm90IGdvaW5nIHRvIHJldXNlIHRoZSB0cmFjaywgdW5ibG9jayBhbmQgZmx1c2ggaXQKICAgIC8vIHRo
aXMgd2FzIGRvbmUgZWFybGllciBpZiBib3RoIHRyYWNrcyBhcmUgb2ZmbG9hZGVkCiAgICBpZiAoIWJv
dGhPZmZsb2FkZWQpIHsKICAgICAgICBkZWxldGVSZWN5Y2xlZFRyYWNrX2woKTsKICAgIH0KCiAgICBD
SEVDSygodCAhPSBOVUxMKSAmJiAoKG1DYWxsYmFjayA9PSBOVUxMKSB8fCAobmV3Y2JkICE9IE5VTEwp
KSk7CgogICAgbUNhbGxiYWNrRGF0YSA9IG5ld2NiZDsKICAgIEFMT0dWKCJzZXRWb2x1bWUiKTsKICAg
IHQtPnNldFZvbHVtZShtTGVmdFZvbHVtZSwgbVJpZ2h0Vm9sdW1lKTsKCiAgICAvLyBSZXN0b3JlIFZv
bHVtZVNoYXBlcnMgZm9yIHRoZSBNZWRpYVBsYXllciBpbiBjYXNlIHRoZSB0cmFjayB3YXMgcmVjcmVh
dGVkCiAgICAvLyBkdWUgdG8gYW4gb3V0cHV0IHNpbmsgZXJyb3IgKGUuZy4gb2ZmbG9hZCB0byBub24t
b2ZmbG9hZCBzd2l0Y2gpLgogICAgbVZvbHVtZUhhbmRsZXItPmZvcmFsbChbJnRdKGNvbnN0IFZvbHVt
ZVNoYXBlciAmc2hhcGVyKSAtPiBWb2x1bWVTaGFwZXI6OlN0YXR1cyB7CiAgICAgICAgc3A8Vm9sdW1l
U2hhcGVyOjpPcGVyYXRpb24+IG9wZXJhdGlvblRvRW5kID0KICAgICAgICAgICAgICAgIG5ldyBWb2x1
bWVTaGFwZXI6Ok9wZXJhdGlvbihzaGFwZXIubU9wZXJhdGlvbik7CiAgICAgICAgLy8gVE9ETzogSWRl
YWxseSB3ZSB3b3VsZCByZXN0b3JlIHRvIHRoZSBleGFjdCB4T2Zmc2V0IHBvc2l0aW9uCiAgICAgICAg
Ly8gYXMgcmV0dXJuZWQgYnkgZ2V0Vm9sdW1lU2hhcGVyU3RhdGUoKSwgYnV0IHdlIGRvbid0IGhhdmUg
dGhhdAogICAgICAgIC8vIGluZm9ybWF0aW9uIHdoZW4gcmVzdG9yaW5nIGF0IHRoZSBjbGllbnQgdW5s
ZXNzIHdlIHBlcmlvZGljYWxseSBwb2xsCiAgICAgICAgLy8gdGhlIHNlcnZlciBvciBjcmVhdGUgc2hh
cmVkIG1lbW9yeSBzdGF0ZS4KICAgICAgICAvLwogICAgICAgIC8vIEZvciBub3csIHdlIHNpbXBseSBh
ZHZhbmNlIHRvIHRoZSBlbmQgb2YgdGhlIFZvbHVtZVNoYXBlciBlZmZlY3QKICAgICAgICAvLyBpZiBp
dCBoYXMgYmVlbiBzdGFydGVkLgogICAgICAgIGlmIChzaGFwZXIuaXNTdGFydGVkKCkpIHsKICAgICAg
ICAgICAgb3BlcmF0aW9uVG9FbmQtPnNldE5vcm1hbGl6ZWRUaW1lKDEuZik7CiAgICAgICAgfQogICAg
ICAgIHJldHVybiB0LT5hcHBseVZvbHVtZVNoYXBlcihzaGFwZXIubUNvbmZpZ3VyYXRpb24sIG9wZXJh
dGlvblRvRW5kKTsKICAgIH0pOwoKICAgIG1TYW1wbGVSYXRlSHogPSBzYW1wbGVSYXRlOwogICAgbUZs
YWdzID0gZmxhZ3M7CiAgICBtTXNlY3NQZXJGcmFtZSA9IDFFM2YgLyAobVBsYXliYWNrUmF0ZS5tU3Bl
ZWQgKiBzYW1wbGVSYXRlKTsKICAgIG1GcmFtZVNpemUgPSB0LT5mcmFtZVNpemUoKTsKICAgIG1UcmFj
ayA9IHQ7CgogICAgcmV0dXJuIHVwZGF0ZVRyYWNrKCk7Cn0KCnN0YXR1c190IE1lZGlhUGxheWVyU2Vy
dmljZTo6QXVkaW9PdXRwdXQ6OnVwZGF0ZVRyYWNrKCkgewogICAgaWYgKG1UcmFjayA9PSBOVUxMKSB7
CiAgICAgICAgcmV0dXJuIE5PX0VSUk9SOwogICAgfQoKICAgIHN0YXR1c190IHJlcyA9IE5PX0VSUk9S
OwogICAgLy8gTm90ZSBzb21lIG91dHB1dCBkZXZpY2VzIG1heSBnaXZlIHVzIGEgZGlyZWN0IHRyYWNr
IGV2ZW4gdGhvdWdoIHdlIGRvbid0IHNwZWNpZnkgaXQuCiAgICAvLyBFeGFtcGxlOiBMaW5lIGFwcGxp
Y2F0aW9uIGIvMTc0NTk5ODIuCiAgICBpZiAoKG1UcmFjay0+Z2V0RmxhZ3MoKQogICAgICAgICAgICAm
IChBVURJT19PVVRQVVRfRkxBR19DT01QUkVTU19PRkZMT0FEIHwgQVVESU9fT1VUUFVUX0ZMQUdfRElS
RUNUKSkgPT0gMCkgewogICAgICAgIHJlcyA9IG1UcmFjay0+c2V0UGxheWJhY2tSYXRlKG1QbGF5YmFj
a1JhdGUpOwogICAgICAgIGlmIChyZXMgPT0gTk9fRVJST1IpIHsKICAgICAgICAgICAgbVRyYWNrLT5z
ZXRBdXhFZmZlY3RTZW5kTGV2ZWwobVNlbmRMZXZlbCk7CiAgICAgICAgICAgIHJlcyA9IG1UcmFjay0+
YXR0YWNoQXV4RWZmZWN0KG1BdXhFZmZlY3RJZCk7CiAgICAgICAgfQogICAgfQogICAgQUxPR1YoInVw
ZGF0ZVRyYWNrKCkgRE9ORSBzdGF0dXMgJWQiLCByZXMpOwogICAgcmV0dXJuIHJlczsKfQoKc3RhdHVz
X3QgTWVkaWFQbGF5ZXJTZXJ2aWNlOjpBdWRpb091dHB1dDo6c3RhcnQoKQp7CiAgICBBTE9HVigic3Rh
cnQiKTsKICAgIE11dGV4OjpBdXRvbG9jayBsb2NrKG1Mb2NrKTsKICAgIGlmIChtQ2FsbGJhY2tEYXRh
ICE9IE5VTEwpIHsKICAgICAgICBtQ2FsbGJhY2tEYXRhLT5lbmRUcmFja1N3aXRjaCgpOwogICAgfQog
ICAgaWYgKG1UcmFjayAhPSAwKSB7CiAgICAgICAgbVRyYWNrLT5zZXRWb2x1bWUobUxlZnRWb2x1bWUs
IG1SaWdodFZvbHVtZSk7CiAgICAgICAgbVRyYWNrLT5zZXRBdXhFZmZlY3RTZW5kTGV2ZWwobVNlbmRM
ZXZlbCk7CiAgICAgICAgc3RhdHVzX3Qgc3RhdHVzID0gbVRyYWNrLT5zdGFydCgpOwogICAgICAgIGlm
IChzdGF0dXMgPT0gTk9fRVJST1IpIHsKICAgICAgICAgICAgbVZvbHVtZUhhbmRsZXItPnNldFN0YXJ0
ZWQoKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHN0YXR1czsKICAgIH0KICAgIHJldHVybiBOT19J
TklUOwp9Cgp2b2lkIE1lZGlhUGxheWVyU2VydmljZTo6QXVkaW9PdXRwdXQ6OnNldE5leHRPdXRwdXQo
Y29uc3Qgc3A8QXVkaW9PdXRwdXQ+JiBuZXh0T3V0cHV0KSB7CiAgICBNdXRleDo6QXV0b2xvY2sgbG9j
ayhtTG9jayk7CiAgICBtTmV4dE91dHB1dCA9IG5leHRPdXRwdXQ7Cn0KCnZvaWQgTWVkaWFQbGF5ZXJT
ZXJ2aWNlOjpBdWRpb091dHB1dDo6c3dpdGNoVG9OZXh0T3V0cHV0KCkgewogICAgQUxPR1YoInN3aXRj
aFRvTmV4dE91dHB1dCIpOwoKICAgIC8vIFRyeSB0byBhY3F1aXJlIHRoZSBjYWxsYmFjayBsb2NrIGJl
Zm9yZSBtb3ZpbmcgdHJhY2sgKHdpdGhvdXQgaW5jdXJyaW5nIGRlYWRsb2NrKS4KICAgIGNvbnN0IHVu
c2lnbmVkIGtNYXhTd2l0Y2hUcmllcyA9IDEwMDsKICAgIE11dGV4OjpBdXRvbG9jayBsb2NrKG1Mb2Nr
KTsKICAgIGZvciAodW5zaWduZWQgdHJpZXMgPSAwOzspIHsKICAgICAgICBpZiAobVRyYWNrID09IDAp
IHsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICBpZiAobU5leHRPdXRwdXQgIT0g
TlVMTCAmJiBtTmV4dE91dHB1dCAhPSB0aGlzKSB7CiAgICAgICAgICAgIGlmIChtQ2FsbGJhY2tEYXRh
ICE9IE5VTEwpIHsKICAgICAgICAgICAgICAgIC8vIHR3byBhbHRlcm5hdGl2ZSBhcHByb2FjaGVzCiNp
ZiAxCiAgICAgICAgICAgICAgICBDYWxsYmFja0RhdGEgKmNhbGxiYWNrRGF0YSA9IG1DYWxsYmFja0Rh
dGE7CiAgICAgICAgICAgICAgICBtTG9jay51bmxvY2soKTsKICAgICAgICAgICAgICAgIC8vIHByb3Bl
ciBhY3F1aXNpdGlvbiBzZXF1ZW5jZQogICAgICAgICAgICAgICAgY2FsbGJhY2tEYXRhLT5sb2NrKCk7
CiAgICAgICAgICAgICAgICBtTG9jay5sb2NrKCk7CiAgICAgICAgICAgICAgICAvLyBDYXV0aW9uOiBp
dCBpcyB1bmxpa2VseSB0aGF0IHNvbWVvbmUgZGVsZXRlZCBvdXIgY2FsbGJhY2sgb3IgY2hhbmdlZCBv
dXIgdGFyZ2V0CiAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2tEYXRhICE9IG1DYWxsYmFja0RhdGEg
fHwgbU5leHRPdXRwdXQgPT0gTlVMTCB8fCBtTmV4dE91dHB1dCA9PSB0aGlzKSB7CiAgICAgICAgICAg
ICAgICAgICAgLy8gZmF0YWwgaWYgd2UgYXJlIHN0YXJ2ZWQgb3V0LgogICAgICAgICAgICAgICAgICAg
IExPR19BTFdBWVNfRkFUQUxfSUYoKyt0cmllcyA+IGtNYXhTd2l0Y2hUcmllcywKICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICJzd2l0Y2hUb05leHRPdXRwdXQoKSBjYW5ub3Qgb2J0YWluIGNvcnJlY3Qg
bG9jayBzZXF1ZW5jZSIpOwogICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrRGF0YS0+dW5sb2NrKCk7
CiAgICAgICAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAg
ICAgICBjYWxsYmFja0RhdGEtPm1Td2l0Y2hpbmcgPSB0cnVlOyAvLyBiZWdpbiB0cmFjayBzd2l0Y2gK
ICAgICAgICAgICAgICAgIGNhbGxiYWNrRGF0YS0+c2V0T3V0cHV0KE5VTEwpOwojZWxzZQogICAgICAg
ICAgICAgICAgLy8gdHJ5QmVnaW5UcmFja1N3aXRjaCgpIHJldHVybnMgZmFsc2UgaWYgdGhlIGNhbGxi
YWNrIGhhcyB0aGUgbG9jay4KICAgICAgICAgICAgICAgIGlmICghbUNhbGxiYWNrRGF0YS0+dHJ5QmVn
aW5UcmFja1N3aXRjaCgpKSB7CiAgICAgICAgICAgICAgICAgICAgLy8gZmF0YWwgaWYgd2UgYXJlIHN0
YXJ2ZWQgb3V0LgogICAgICAgICAgICAgICAgICAgIExPR19BTFdBWVNfRkFUQUxfSUYoKyt0cmllcyA+
IGtNYXhTd2l0Y2hUcmllcywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJzd2l0Y2hUb05leHRP
dXRwdXQoKSBjYW5ub3Qgb2J0YWluIGNhbGxiYWNrIGxvY2siKTsKICAgICAgICAgICAgICAgICAgICBt
TG9jay51bmxvY2soKTsKICAgICAgICAgICAgICAgICAgICB1c2xlZXAoNSAqIDEwMDAgLyogdXNlYyAq
Lyk7IC8vIGFsbG93IGNhbGxiYWNrIHRvIHVzZSBBdWRpb091dHB1dAogICAgICAgICAgICAgICAgICAg
IG1Mb2NrLmxvY2soKTsKICAgICAgICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgICAg
IH0KI2VuZGlmCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIE11dGV4OjpBdXRvbG9jayBuZXh0TG9j
ayhtTmV4dE91dHB1dC0+bUxvY2spOwoKICAgICAgICAgICAgLy8gSWYgdGhlIG5leHQgb3V0cHV0IHRy
YWNrIGlzIG5vdCBOVUxMLCB0aGVuIGl0IGhhcyBiZWVuCiAgICAgICAgICAgIC8vIG9wZW5lZCBhbHJl
YWR5IGZvciBwbGF5YmFjay4KICAgICAgICAgICAgLy8gVGhpcyBpcyBwb3NzaWJsZSBldmVuIHdpdGhv
dXQgdGhlIG5leHQgcGxheWVyIGJlaW5nIHN0YXJ0ZWQsCiAgICAgICAgICAgIC8vIGZvciBleGFtcGxl
LCB0aGUgbmV4dCBwbGF5ZXIgY291bGQgYmUgcHJlcGFyZWQgYW5kIHNlZWtlZC4KICAgICAgICAgICAg
Ly8KICAgICAgICAgICAgLy8gUHJlc3VtaW5nIGl0IGlzbid0IGFkdmlzYWJsZSB0byBmb3JjZSB0aGUg
dHJhY2sgb3Zlci4KICAgICAgICAgICAgIGlmIChtTmV4dE91dHB1dC0+bVRyYWNrID09IE5VTEwpIHsK
ICAgICAgICAgICAgICAgIEFMT0dEKCJSZWN5Y2xpbmcgdHJhY2sgZm9yIGdhcGxlc3MgcGxheWJhY2si
KTsKICAgICAgICAgICAgICAgIGRlbGV0ZSBtTmV4dE91dHB1dC0+bUNhbGxiYWNrRGF0YTsKICAgICAg
ICAgICAgICAgIG1OZXh0T3V0cHV0LT5tQ2FsbGJhY2tEYXRhID0gbUNhbGxiYWNrRGF0YTsKICAgICAg
ICAgICAgICAgIG1OZXh0T3V0cHV0LT5tUmVjeWNsZWRUcmFjayA9IG1UcmFjazsKICAgICAgICAgICAg
ICAgIG1OZXh0T3V0cHV0LT5tU2FtcGxlUmF0ZUh6ID0gbVNhbXBsZVJhdGVIejsKICAgICAgICAgICAg
ICAgIG1OZXh0T3V0cHV0LT5tTXNlY3NQZXJGcmFtZSA9IG1Nc2Vjc1BlckZyYW1lOwogICAgICAgICAg
ICAgICAgbU5leHRPdXRwdXQtPm1GbGFncyA9IG1GbGFnczsKICAgICAgICAgICAgICAgIG1OZXh0T3V0
cHV0LT5tRnJhbWVTaXplID0gbUZyYW1lU2l6ZTsKICAgICAgICAgICAgICAgIGNsb3NlX2woKTsKICAg
ICAgICAgICAgICAgIG1DYWxsYmFja0RhdGEgPSBOVUxMOyAgLy8gZGVzdHJ1Y3Rpb24gaGFuZGxlZCBi
eSBtTmV4dE91dHB1dAogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgQUxPR1coIkln
bm9yaW5nIGdhcGxlc3MgcGxheWJhY2sgYmVjYXVzZSBuZXh0IHBsYXllciBoYXMgYWxyZWFkeSBzdGFy
dGVkIik7CiAgICAgICAgICAgICAgICAvLyByZW1vdmUgdHJhY2sgaW4gY2FzZSByZXNvdXJjZSBuZWVk
ZWQgZm9yIGZ1dHVyZSBwbGF5ZXJzLgogICAgICAgICAgICAgICAgaWYgKG1DYWxsYmFja0RhdGEgIT0g
TlVMTCkgewogICAgICAgICAgICAgICAgICAgIG1DYWxsYmFja0RhdGEtPmVuZFRyYWNrU3dpdGNoKCk7
ICAvLyByZWxlYXNlIGxvY2sgZm9yIGNhbGxiYWNrcyBiZWZvcmUgY2xvc2UuCiAgICAgICAgICAgICAg
ICB9CiAgICAgICAgICAgICAgICBjbG9zZV9sKCk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAg
ICAgYnJlYWs7CiAgICB9Cn0KCnNzaXplX3QgTWVkaWFQbGF5ZXJTZXJ2aWNlOjpBdWRpb091dHB1dDo6
d3JpdGUoY29uc3Qgdm9pZCogYnVmZmVyLCBzaXplX3Qgc2l6ZSwgYm9vbCBibG9ja2luZykKewogICAg
TXV0ZXg6OkF1dG9sb2NrIGxvY2sobUxvY2spOwogICAgTE9HX0FMV0FZU19GQVRBTF9JRihtQ2FsbGJh
Y2sgIT0gTlVMTCwgIkRvbid0IGNhbGwgd3JpdGUgaWYgc3VwcGx5aW5nIGEgY2FsbGJhY2suIik7Cgog
ICAgLy9BTE9HVigid3JpdGUoJXAsICV1KSIsIGJ1ZmZlciwgc2l6ZSk7CiAgICBpZiAobVRyYWNrICE9
IDApIHsKICAgICAgICByZXR1cm4gbVRyYWNrLT53cml0ZShidWZmZXIsIHNpemUsIGJsb2NraW5nKTsK
ICAgIH0KICAgIHJldHVybiBOT19JTklUOwp9Cgp2b2lkIE1lZGlhUGxheWVyU2VydmljZTo6QXVkaW9P
dXRwdXQ6OnN0b3AoKQp7CiAgICBBTE9HVigic3RvcCIpOwogICAgTXV0ZXg6OkF1dG9sb2NrIGxvY2so
bUxvY2spOwogICAgaWYgKG1UcmFjayAhPSAwKSBtVHJhY2stPnN0b3AoKTsKfQoKdm9pZCBNZWRpYVBs
YXllclNlcnZpY2U6OkF1ZGlvT3V0cHV0OjpmbHVzaCgpCnsKICAgIEFMT0dWKCJmbHVzaCIpOwogICAg
TXV0ZXg6OkF1dG9sb2NrIGxvY2sobUxvY2spOwogICAgaWYgKG1UcmFjayAhPSAwKSBtVHJhY2stPmZs
dXNoKCk7Cn0KCnZvaWQgTWVkaWFQbGF5ZXJTZXJ2aWNlOjpBdWRpb091dHB1dDo6cGF1c2UoKQp7CiAg
ICBBTE9HVigicGF1c2UiKTsKICAgIE11dGV4OjpBdXRvbG9jayBsb2NrKG1Mb2NrKTsKICAgIGlmICht
VHJhY2sgIT0gMCkgbVRyYWNrLT5wYXVzZSgpOwp9Cgp2b2lkIE1lZGlhUGxheWVyU2VydmljZTo6QXVk
aW9PdXRwdXQ6OmNsb3NlKCkKewogICAgQUxPR1YoImNsb3NlIik7CiAgICBzcDxBdWRpb1RyYWNrPiB0
cmFjazsKICAgIHsKICAgICAgICBNdXRleDo6QXV0b2xvY2sgbG9jayhtTG9jayk7CiAgICAgICAgdHJh
Y2sgPSBtVHJhY2s7CiAgICAgICAgY2xvc2VfbCgpOyAvLyBjbGVhcnMgbVRyYWNrCiAgICB9CiAgICAv
LyBkZXN0cnVjdGlvbiBvZiB0aGUgdHJhY2sgb2NjdXJzIG91dHNpZGUgb2YgbXV0ZXguCn0KCnZvaWQg
TWVkaWFQbGF5ZXJTZXJ2aWNlOjpBdWRpb091dHB1dDo6c2V0Vm9sdW1lKGZsb2F0IGxlZnQsIGZsb2F0
IHJpZ2h0KQp7CiAgICBBTE9HVigic2V0Vm9sdW1lKCVmLCAlZikiLCBsZWZ0LCByaWdodCk7CiAgICBN
dXRleDo6QXV0b2xvY2sgbG9jayhtTG9jayk7CiAgICBtTGVmdFZvbHVtZSA9IGxlZnQ7CiAgICBtUmln
aHRWb2x1bWUgPSByaWdodDsKICAgIGlmIChtVHJhY2sgIT0gMCkgewogICAgICAgIG1UcmFjay0+c2V0
Vm9sdW1lKGxlZnQsIHJpZ2h0KTsKICAgIH0KfQoKc3RhdHVzX3QgTWVkaWFQbGF5ZXJTZXJ2aWNlOjpB
dWRpb091dHB1dDo6c2V0UGxheWJhY2tSYXRlKGNvbnN0IEF1ZGlvUGxheWJhY2tSYXRlICZyYXRlKQp7
CiAgICBBTE9HVigic2V0UGxheWJhY2tSYXRlKCVmICVmICVkICVkKSIsCiAgICAgICAgICAgICAgICBy
YXRlLm1TcGVlZCwgcmF0ZS5tUGl0Y2gsIHJhdGUubUZhbGxiYWNrTW9kZSwgcmF0ZS5tU3RyZXRjaE1v
ZGUpOwogICAgTXV0ZXg6OkF1dG9sb2NrIGxvY2sobUxvY2spOwogICAgaWYgKG1UcmFjayA9PSAwKSB7
CiAgICAgICAgLy8gcmVtZW1iZXIgcmF0ZSBzbyB0aGF0IHdlIGNhbiBzZXQgaXQgd2hlbiB0aGUgdHJh
Y2sgaXMgb3BlbmVkCiAgICAgICAgbVBsYXliYWNrUmF0ZSA9IHJhdGU7CiAgICAgICAgcmV0dXJuIE9L
OwogICAgfQogICAgc3RhdHVzX3QgcmVzID0gbVRyYWNrLT5zZXRQbGF5YmFja1JhdGUocmF0ZSk7CiAg
ICBpZiAocmVzICE9IE5PX0VSUk9SKSB7CiAgICAgICAgcmV0dXJuIHJlczsKICAgIH0KICAgIC8vIHJh
dGUubVNwZWVkIGlzIGFsd2F5cyBncmVhdGVyIHRoYW4gMCBpZiBzZXRQbGF5YmFja1JhdGUgc3VjY2Vl
ZGVkCiAgICBDSEVDS19HVChyYXRlLm1TcGVlZCwgMC5mKTsKICAgIG1QbGF5YmFja1JhdGUgPSByYXRl
OwogICAgaWYgKG1TYW1wbGVSYXRlSHogIT0gMCkgewogICAgICAgIG1Nc2Vjc1BlckZyYW1lID0gMUUz
ZiAvIChyYXRlLm1TcGVlZCAqIG1TYW1wbGVSYXRlSHopOwogICAgfQogICAgcmV0dXJuIHJlczsKfQoK
c3RhdHVzX3QgTWVkaWFQbGF5ZXJTZXJ2aWNlOjpBdWRpb091dHB1dDo6Z2V0UGxheWJhY2tSYXRlKEF1
ZGlvUGxheWJhY2tSYXRlICpyYXRlKQp7CiAgICBBTE9HVigic2V0UGxheWJhY2tSYXRlIik7CiAgICBN
dXRleDo6QXV0b2xvY2sgbG9jayhtTG9jayk7CiAgICBpZiAobVRyYWNrID09IDApIHsKICAgICAgICBy
ZXR1cm4gTk9fSU5JVDsKICAgIH0KICAgICpyYXRlID0gbVRyYWNrLT5nZXRQbGF5YmFja1JhdGUoKTsK
ICAgIHJldHVybiBOT19FUlJPUjsKfQoKc3RhdHVzX3QgTWVkaWFQbGF5ZXJTZXJ2aWNlOjpBdWRpb091
dHB1dDo6c2V0QXV4RWZmZWN0U2VuZExldmVsKGZsb2F0IGxldmVsKQp7CiAgICBBTE9HVigic2V0QXV4
RWZmZWN0U2VuZExldmVsKCVmKSIsIGxldmVsKTsKICAgIE11dGV4OjpBdXRvbG9jayBsb2NrKG1Mb2Nr
KTsKICAgIG1TZW5kTGV2ZWwgPSBsZXZlbDsKICAgIGlmIChtVHJhY2sgIT0gMCkgewogICAgICAgIHJl
dHVybiBtVHJhY2stPnNldEF1eEVmZmVjdFNlbmRMZXZlbChsZXZlbCk7CiAgICB9CiAgICByZXR1cm4g
Tk9fRVJST1I7Cn0KCnN0YXR1c190IE1lZGlhUGxheWVyU2VydmljZTo6QXVkaW9PdXRwdXQ6OmF0dGFj
aEF1eEVmZmVjdChpbnQgZWZmZWN0SWQpCnsKICAgIEFMT0dWKCJhdHRhY2hBdXhFZmZlY3QoJWQpIiwg
ZWZmZWN0SWQpOwogICAgTXV0ZXg6OkF1dG9sb2NrIGxvY2sobUxvY2spOwogICAgbUF1eEVmZmVjdElk
ID0gZWZmZWN0SWQ7CiAgICBpZiAobVRyYWNrICE9IDApIHsKICAgICAgICByZXR1cm4gbVRyYWNrLT5h
dHRhY2hBdXhFZmZlY3QoZWZmZWN0SWQpOwogICAgfQogICAgcmV0dXJuIE5PX0VSUk9SOwp9CgpWb2x1
bWVTaGFwZXI6OlN0YXR1cyBNZWRpYVBsYXllclNlcnZpY2U6OkF1ZGlvT3V0cHV0OjphcHBseVZvbHVt
ZVNoYXBlcigKICAgICAgICAgICAgICAgIGNvbnN0IHNwPFZvbHVtZVNoYXBlcjo6Q29uZmlndXJhdGlv
bj4mIGNvbmZpZ3VyYXRpb24sCiAgICAgICAgICAgICAgICBjb25zdCBzcDxWb2x1bWVTaGFwZXI6Ok9w
ZXJhdGlvbj4mIG9wZXJhdGlvbikKewogICAgTXV0ZXg6OkF1dG9sb2NrIGxvY2sobUxvY2spOwogICAg
QUxPR1YoIkF1ZGlvT3V0cHV0OjphcHBseVZvbHVtZVNoYXBlciIpOwoKICAgIG1Wb2x1bWVIYW5kbGVy
LT5zZXRJZElmTmVjZXNzYXJ5KGNvbmZpZ3VyYXRpb24pOwoKICAgIFZvbHVtZVNoYXBlcjo6U3RhdHVz
IHN0YXR1czsKICAgIGlmIChtVHJhY2sgIT0gMCkgewogICAgICAgIHN0YXR1cyA9IG1UcmFjay0+YXBw
bHlWb2x1bWVTaGFwZXIoY29uZmlndXJhdGlvbiwgb3BlcmF0aW9uKTsKICAgICAgICBpZiAoc3RhdHVz
ID49IDApIHsKICAgICAgICAgICAgKHZvaWQpbVZvbHVtZUhhbmRsZXItPmFwcGx5Vm9sdW1lU2hhcGVy
KGNvbmZpZ3VyYXRpb24sIG9wZXJhdGlvbik7CiAgICAgICAgICAgIGlmIChtVHJhY2stPmlzUGxheWlu
ZygpKSB7IC8vIG1hdGNoIGxvY2FsIEF1ZGlvVHJhY2sgdG8gcHJvcGVybHkgcmVzdG9yZS4KICAgICAg
ICAgICAgICAgIG1Wb2x1bWVIYW5kbGVyLT5zZXRTdGFydGVkKCk7CiAgICAgICAgICAgIH0KICAgICAg
ICB9CiAgICB9IGVsc2UgewogICAgICAgIHN0YXR1cyA9IG1Wb2x1bWVIYW5kbGVyLT5hcHBseVZvbHVt
ZVNoYXBlcihjb25maWd1cmF0aW9uLCBvcGVyYXRpb24pOwogICAgfQogICAgcmV0dXJuIHN0YXR1czsK
fQoKc3A8Vm9sdW1lU2hhcGVyOjpTdGF0ZT4gTWVkaWFQbGF5ZXJTZXJ2aWNlOjpBdWRpb091dHB1dDo6
Z2V0Vm9sdW1lU2hhcGVyU3RhdGUoaW50IGlkKQp7CiAgICBNdXRleDo6QXV0b2xvY2sgbG9jayhtTG9j
ayk7CiAgICBpZiAobVRyYWNrICE9IDApIHsKICAgICAgICByZXR1cm4gbVRyYWNrLT5nZXRWb2x1bWVT
aGFwZXJTdGF0ZShpZCk7CiAgICB9IGVsc2UgewogICAgICAgIHJldHVybiBtVm9sdW1lSGFuZGxlci0+
Z2V0Vm9sdW1lU2hhcGVyU3RhdGUoaWQpOwogICAgfQp9CgovLyBzdGF0aWMKdm9pZCBNZWRpYVBsYXll
clNlcnZpY2U6OkF1ZGlvT3V0cHV0OjpDYWxsYmFja1dyYXBwZXIoCiAgICAgICAgaW50IGV2ZW50LCB2
b2lkICpjb29raWUsIHZvaWQgKmluZm8pIHsKICAgIC8vQUxPR1YoImNhbGxiYWNrd3JhcHBlciIpOwog
ICAgQ2FsbGJhY2tEYXRhICpkYXRhID0gKENhbGxiYWNrRGF0YSopY29va2llOwogICAgLy8gbG9jayB0
byBlbnN1cmUgd2UgYXJlbid0IGNhdWdodCBpbiB0aGUgbWlkZGxlIG9mIGEgdHJhY2sgc3dpdGNoLgog
ICAgZGF0YS0+bG9jaygpOwogICAgQXVkaW9PdXRwdXQgKm1lID0gZGF0YS0+Z2V0T3V0cHV0KCk7CiAg
ICBBdWRpb1RyYWNrOjpCdWZmZXIgKmJ1ZmZlciA9IChBdWRpb1RyYWNrOjpCdWZmZXIgKilpbmZvOwog
ICAgaWYgKG1lID09IE5VTEwpIHsKICAgICAgICAvLyBubyBvdXRwdXQgc2V0LCBsaWtlbHkgYmVjYXVz
ZSB0aGUgdHJhY2sgd2FzIHNjaGVkdWxlZCB0byBiZSByZXVzZWQKICAgICAgICAvLyBieSBhbm90aGVy
IHBsYXllciwgYnV0IHRoZSBmb3JtYXQgdHVybmVkIG91dCB0byBiZSBpbmNvbXBhdGlibGUuCiAgICAg
ICAgZGF0YS0+dW5sb2NrKCk7CiAgICAgICAgaWYgKGJ1ZmZlciAhPSBOVUxMKSB7CiAgICAgICAgICAg
IGJ1ZmZlci0+c2l6ZSA9IDA7CiAgICAgICAgfQogICAgICAgIHJldHVybjsKICAgIH0KCiAgICBzd2l0
Y2goZXZlbnQpIHsKICAgIGNhc2UgQXVkaW9UcmFjazo6RVZFTlRfTU9SRV9EQVRBOiB7CiAgICAgICAg
c2l6ZV90IGFjdHVhbFNpemUgPSAoKm1lLT5tQ2FsbGJhY2spKAogICAgICAgICAgICAgICAgbWUsIGJ1
ZmZlci0+cmF3LCBidWZmZXItPnNpemUsIG1lLT5tQ2FsbGJhY2tDb29raWUsCiAgICAgICAgICAgICAg
ICBDQl9FVkVOVF9GSUxMX0JVRkZFUik7CgogICAgICAgIC8vIExvZyB3aGVuIG5vIGRhdGEgaXMgcmV0
dXJuZWQgZnJvbSB0aGUgY2FsbGJhY2suCiAgICAgICAgLy8gKDEpIFdlIG1heSBoYXZlIG5vIGRhdGEg
KGVzcGVjaWFsbHkgd2l0aCBuZXR3b3JrIHN0cmVhbWluZyBzb3VyY2VzKS4KICAgICAgICAvLyAoMikg
V2UgbWF5IGhhdmUgcmVhY2hlZCB0aGUgRU9TIGFuZCB0aGUgYXVkaW8gdHJhY2sgaXMgbm90IHN0b3Bw
ZWQgeWV0LgogICAgICAgIC8vIE5vdGUgdGhhdCBBd2Vzb21lUGxheWVyL0F1ZGlvUGxheWVyIHdpbGwg
b25seSByZXR1cm4gemVybyBzaXplIHdoZW4gaXQgcmVhY2hlcyB0aGUgRU9TLgogICAgICAgIC8vIE51
UGxheWVyUmVuZGVyZXIgd2lsbCByZXR1cm4gemVybyB3aGVuIGl0IGRvZXNuJ3QgaGF2ZSBkYXRhIChp
dCBkb2Vzbid0IGJsb2NrIHRvIGZpbGwpLgogICAgICAgIC8vCiAgICAgICAgLy8gVGhpcyBpcyBhIGJl
bmlnbiBidXN5LXdhaXQsIHdpdGggdGhlIG5leHQgZGF0YSByZXF1ZXN0IGdlbmVyYXRlZCAxMCBtcyBv
ciBtb3JlIGxhdGVyOwogICAgICAgIC8vIG5ldmVydGhlbGVzcyBmb3IgcG93ZXIgcmVhc29ucywgd2Ug
ZG9uJ3Qgd2FudCB0byBzZWUgdG9vIG1hbnkgb2YgdGhlc2UuCgogICAgICAgIEFMT0dWX0lGKGFjdHVh
bFNpemUgPT0gMCAmJiBidWZmZXItPnNpemUgPiAwLCAiY2FsbGJhY2t3cmFwcGVyOiBlbXB0eSBidWZm
ZXIgcmV0dXJuZWQiKTsKCiAgICAgICAgYnVmZmVyLT5zaXplID0gYWN0dWFsU2l6ZTsKICAgICAgICB9
IGJyZWFrOwoKICAgIGNhc2UgQXVkaW9UcmFjazo6RVZFTlRfU1RSRUFNX0VORDoKICAgICAgICAvLyBj
dXJyZW50bHkgb25seSBvY2N1cnMgZm9yIG9mZmxvYWRlZCBjYWxsYmFja3MKICAgICAgICBBTE9HVigi
Y2FsbGJhY2t3cmFwcGVyOiBkZWxpdmVyIEVWRU5UX1NUUkVBTV9FTkQiKTsKICAgICAgICAoKm1lLT5t
Q2FsbGJhY2spKG1lLCBOVUxMIC8qIGJ1ZmZlciAqLywgMCAvKiBzaXplICovLAogICAgICAgICAgICAg
ICAgbWUtPm1DYWxsYmFja0Nvb2tpZSwgQ0JfRVZFTlRfU1RSRUFNX0VORCk7CiAgICAgICAgYnJlYWs7
CgogICAgY2FzZSBBdWRpb1RyYWNrOjpFVkVOVF9ORVdfSUFVRElPVFJBQ0sgOgogICAgICAgIEFMT0dW
KCJjYWxsYmFja3dyYXBwZXI6IGRlbGl2ZXIgRVZFTlRfVEVBUl9ET1dOIik7CiAgICAgICAgKCptZS0+
bUNhbGxiYWNrKShtZSwgIE5VTEwgLyogYnVmZmVyICovLCAwIC8qIHNpemUgKi8sCiAgICAgICAgICAg
ICAgICBtZS0+bUNhbGxiYWNrQ29va2llLCBDQl9FVkVOVF9URUFSX0RPV04pOwogICAgICAgIGJyZWFr
OwoKICAgIGNhc2UgQXVkaW9UcmFjazo6RVZFTlRfVU5ERVJSVU46CiAgICAgICAgLy8gVGhpcyBvY2N1
cnMgd2hlbiB0aGVyZSBpcyBubyBkYXRhIGF2YWlsYWJsZSwgdHlwaWNhbGx5CiAgICAgICAgLy8gd2hl
biB0aGVyZSBpcyBhIGZhaWx1cmUgdG8gc3VwcGx5IGRhdGEgdG8gdGhlIEF1ZGlvVHJhY2suICBJdCBj
YW4gYWxzbwogICAgICAgIC8vIG9jY3VyIGluIG5vbi1vZmZsb2FkZWQgbW9kZSB3aGVuIHRoZSBhdWRp
byBkZXZpY2UgY29tZXMgb3V0IG9mIHN0YW5kYnkuCiAgICAgICAgLy8KICAgICAgICAvLyBJZiBhbiBB
dWRpb1RyYWNrIHVuZGVycnVucyBpdCBvdXRwdXRzIHNpbGVuY2UuIFNpbmNlIHRoaXMgaGFwcGVucyBz
dWRkZW5seQogICAgICAgIC8vIGl0IG1heSBzb3VuZCBsaWtlIGFuIGF1ZGlibGUgcG9wIG9yIGdsaXRj
aC4KICAgICAgICAvLwogICAgICAgIC8vIFRoZSB1bmRlcnJ1biBldmVudCBpcyBzZW50IG9uY2UgcGVy
IHRyYWNrIHVuZGVycnVuOyB0aGUgY29uZGl0aW9uIGlzIHJlc2V0CiAgICAgICAgLy8gd2hlbiBtb3Jl
IGRhdGEgaXMgc2VudCB0byB0aGUgQXVkaW9UcmFjay4KICAgICAgICBBTE9HRCgiY2FsbGJhY2t3cmFw
cGVyOiBFVkVOVF9VTkRFUlJVTiAoZGlzY2FyZGVkKSIpOwogICAgICAgIGJyZWFrOwoKICAgIGRlZmF1
bHQ6CiAgICAgICAgQUxPR0UoInJlY2VpdmVkIHVua25vd24gZXZlbnQgdHlwZTogJWQgaW5zaWRlIENh
bGxiYWNrV3JhcHBlciAhIiwgZXZlbnQpOwogICAgfQoKICAgIGRhdGEtPnVubG9jaygpOwp9CgphdWRp
b19zZXNzaW9uX3QgTWVkaWFQbGF5ZXJTZXJ2aWNlOjpBdWRpb091dHB1dDo6Z2V0U2Vzc2lvbklkKCkg
Y29uc3QKewogICAgTXV0ZXg6OkF1dG9sb2NrIGxvY2sobUxvY2spOwogICAgcmV0dXJuIG1TZXNzaW9u
SWQ7Cn0KCnVpbnQzMl90IE1lZGlhUGxheWVyU2VydmljZTo6QXVkaW9PdXRwdXQ6OmdldFNhbXBsZVJh
dGUoKSBjb25zdAp7CiAgICBNdXRleDo6QXV0b2xvY2sgbG9jayhtTG9jayk7CiAgICBpZiAobVRyYWNr
ID09IDApIHJldHVybiAwOwogICAgcmV0dXJuIG1UcmFjay0+Z2V0U2FtcGxlUmF0ZSgpOwp9CgppbnQ2
NF90IE1lZGlhUGxheWVyU2VydmljZTo6QXVkaW9PdXRwdXQ6OmdldEJ1ZmZlckR1cmF0aW9uSW5Vcygp
IGNvbnN0CnsKICAgIE11dGV4OjpBdXRvbG9jayBsb2NrKG1Mb2NrKTsKICAgIGlmIChtVHJhY2sgPT0g
MCkgewogICAgICAgIHJldHVybiAwOwogICAgfQogICAgaW50NjRfdCBkdXJhdGlvbjsKICAgIGlmICht
VHJhY2stPmdldEJ1ZmZlckR1cmF0aW9uSW5VcygmZHVyYXRpb24pICE9IE9LKSB7CiAgICAgICAgcmV0
dXJuIDA7CiAgICB9CiAgICByZXR1cm4gZHVyYXRpb247Cn0KCi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8v
Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCgpz
dHJ1Y3QgQ2FsbGJhY2tUaHJlYWQgOiBwdWJsaWMgVGhyZWFkIHsKICAgIENhbGxiYWNrVGhyZWFkKGNv
bnN0IHdwPE1lZGlhUGxheWVyQmFzZTo6QXVkaW9TaW5rPiAmc2luaywKICAgICAgICAgICAgICAgICAg
IE1lZGlhUGxheWVyQmFzZTo6QXVkaW9TaW5rOjpBdWRpb0NhbGxiYWNrIGNiLAogICAgICAgICAgICAg
ICAgICAgdm9pZCAqY29va2llKTsKCnByb3RlY3RlZDoKICAgIHZpcnR1YWwgfkNhbGxiYWNrVGhyZWFk
KCk7CgogICAgdmlydHVhbCBib29sIHRocmVhZExvb3AoKTsKCnByaXZhdGU6CiAgICB3cDxNZWRpYVBs
YXllckJhc2U6OkF1ZGlvU2luaz4gbVNpbms7CiAgICBNZWRpYVBsYXllckJhc2U6OkF1ZGlvU2luazo6
QXVkaW9DYWxsYmFjayBtQ2FsbGJhY2s7CiAgICB2b2lkICptQ29va2llOwogICAgdm9pZCAqbUJ1ZmZl
cjsKICAgIHNpemVfdCBtQnVmZmVyU2l6ZTsKCiAgICBDYWxsYmFja1RocmVhZChjb25zdCBDYWxsYmFj
a1RocmVhZCAmKTsKICAgIENhbGxiYWNrVGhyZWFkICZvcGVyYXRvcj0oY29uc3QgQ2FsbGJhY2tUaHJl
YWQgJik7Cn07CgpDYWxsYmFja1RocmVhZDo6Q2FsbGJhY2tUaHJlYWQoCiAgICAgICAgY29uc3Qgd3A8
TWVkaWFQbGF5ZXJCYXNlOjpBdWRpb1Npbms+ICZzaW5rLAogICAgICAgIE1lZGlhUGxheWVyQmFzZTo6
QXVkaW9TaW5rOjpBdWRpb0NhbGxiYWNrIGNiLAogICAgICAgIHZvaWQgKmNvb2tpZSkKICAgIDogbVNp
bmsoc2luayksCiAgICAgIG1DYWxsYmFjayhjYiksCiAgICAgIG1Db29raWUoY29va2llKSwKICAgICAg
bUJ1ZmZlcihOVUxMKSwKICAgICAgbUJ1ZmZlclNpemUoMCkgewp9CgpDYWxsYmFja1RocmVhZDo6fkNh
bGxiYWNrVGhyZWFkKCkgewogICAgaWYgKG1CdWZmZXIpIHsKICAgICAgICBmcmVlKG1CdWZmZXIpOwog
ICAgICAgIG1CdWZmZXIgPSBOVUxMOwogICAgfQp9Cgpib29sIENhbGxiYWNrVGhyZWFkOjp0aHJlYWRM
b29wKCkgewogICAgc3A8TWVkaWFQbGF5ZXJCYXNlOjpBdWRpb1Npbms+IHNpbmsgPSBtU2luay5wcm9t
b3RlKCk7CiAgICBpZiAoc2luayA9PSBOVUxMKSB7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQoK
ICAgIGlmIChtQnVmZmVyID09IE5VTEwpIHsKICAgICAgICBtQnVmZmVyU2l6ZSA9IHNpbmstPmJ1ZmZl
clNpemUoKTsKICAgICAgICBtQnVmZmVyID0gbWFsbG9jKG1CdWZmZXJTaXplKTsKICAgIH0KCiAgICBz
aXplX3QgYWN0dWFsU2l6ZSA9CiAgICAgICAgKCptQ2FsbGJhY2spKHNpbmsuZ2V0KCksIG1CdWZmZXIs
IG1CdWZmZXJTaXplLCBtQ29va2llLAogICAgICAgICAgICAgICAgTWVkaWFQbGF5ZXJCYXNlOjpBdWRp
b1Npbms6OkNCX0VWRU5UX0ZJTExfQlVGRkVSKTsKCiAgICBpZiAoYWN0dWFsU2l6ZSA+IDApIHsKICAg
ICAgICBzaW5rLT53cml0ZShtQnVmZmVyLCBhY3R1YWxTaXplKTsKICAgICAgICAvLyBDb3VsZCByZXR1
cm4gZmFsc2Ugb24gc2luay0+d3JpdGUoKSBlcnJvciBvciBzaG9ydCBjb3VudC4KICAgICAgICAvLyBO
b3QgbmVjZXNzYXJpbHkgYXBwcm9wcmlhdGUgYnV0IHdvdWxkIHdvcmsgZm9yIEF1ZGlvQ2FjaGUgYmVo
YXZpb3IuCiAgICB9CgogICAgcmV0dXJuIHRydWU7Cn0KCi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8v
Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCgp2b2lk
IE1lZGlhUGxheWVyU2VydmljZTo6YWRkQmF0dGVyeURhdGEodWludDMyX3QgcGFyYW1zKSB7CiAgICBt
QmF0dGVyeVRyYWNrZXIuYWRkQmF0dGVyeURhdGEocGFyYW1zKTsKfQoKc3RhdHVzX3QgTWVkaWFQbGF5
ZXJTZXJ2aWNlOjpwdWxsQmF0dGVyeURhdGEoUGFyY2VsKiByZXBseSkgewogICAgcmV0dXJuIG1CYXR0
ZXJ5VHJhY2tlci5wdWxsQmF0dGVyeURhdGEocmVwbHkpOwp9CgpNZWRpYVBsYXllclNlcnZpY2U6OkJh
dHRlcnlUcmFja2VyOjpCYXR0ZXJ5VHJhY2tlcigpIHsKICAgIG1CYXR0ZXJ5QXVkaW8ucmVmQ291bnQg
PSAwOwogICAgZm9yIChpbnQgaSA9IDA7IGkgPCBOVU1fQVVESU9fREVWSUNFUzsgaSsrKSB7CiAgICAg
ICAgbUJhdHRlcnlBdWRpby5kZXZpY2VPbltpXSA9IDA7CiAgICAgICAgbUJhdHRlcnlBdWRpby5sYXN0
VGltZVtpXSA9IDA7CiAgICAgICAgbUJhdHRlcnlBdWRpby50b3RhbFRpbWVbaV0gPSAwOwogICAgfQog
ICAgLy8gc3BlYWtlciBpcyBvbiBieSBkZWZhdWx0CiAgICBtQmF0dGVyeUF1ZGlvLmRldmljZU9uW1NQ
RUFLRVJdID0gMTsKCiAgICAvLyByZXNldCBiYXR0ZXJ5IHN0YXRzCiAgICAvLyBpZiB0aGUgbWVkaWFz
ZXJ2ZXIgaGFzIGNyYXNoZWQsIGJhdHRlcnkgc3RhdHMgY291bGQgYmUgbGVmdAogICAgLy8gaW4gYmFk
IHN0YXRlLCByZXNldCB0aGUgc3RhdGUgdXBvbiBzZXJ2aWNlIHN0YXJ0LgogICAgQmF0dGVyeU5vdGlm
aWVyOjpnZXRJbnN0YW5jZSgpLm5vdGVSZXNldFZpZGVvKCk7Cn0KCnZvaWQgTWVkaWFQbGF5ZXJTZXJ2
aWNlOjpCYXR0ZXJ5VHJhY2tlcjo6YWRkQmF0dGVyeURhdGEodWludDMyX3QgcGFyYW1zKQp7CiAgICBN
dXRleDo6QXV0b2xvY2sgbG9jayhtTG9jayk7CgogICAgaW50MzJfdCB0aW1lID0gc3lzdGVtVGltZSgp
IC8gMTAwMDAwMEw7CgogICAgLy8gY2hhbmdlIGF1ZGlvIG91dHB1dCBkZXZpY2VzLiBUaGlzIG5vdGlm
aWNhdGlvbiBjb21lcyBmcm9tIEF1ZGlvRmxpbmdlcgogICAgaWYgKChwYXJhbXMgJiBrQmF0dGVyeURh
dGFTcGVha2VyT24pCiAgICAgICAgICAgIHx8IChwYXJhbXMgJiBrQmF0dGVyeURhdGFPdGhlckF1ZGlv
RGV2aWNlT24pKSB7CgogICAgICAgIGludCBkZXZpY2VPbltOVU1fQVVESU9fREVWSUNFU107CiAgICAg
ICAgZm9yIChpbnQgaSA9IDA7IGkgPCBOVU1fQVVESU9fREVWSUNFUzsgaSsrKSB7CiAgICAgICAgICAg
IGRldmljZU9uW2ldID0gMDsKICAgICAgICB9CgogICAgICAgIGlmICgocGFyYW1zICYga0JhdHRlcnlE
YXRhU3BlYWtlck9uKQogICAgICAgICAgICAgICAgJiYgKHBhcmFtcyAmIGtCYXR0ZXJ5RGF0YU90aGVy
QXVkaW9EZXZpY2VPbikpIHsKICAgICAgICAgICAgZGV2aWNlT25bU1BFQUtFUl9BTkRfT1RIRVJdID0g
MTsKICAgICAgICB9IGVsc2UgaWYgKHBhcmFtcyAmIGtCYXR0ZXJ5RGF0YVNwZWFrZXJPbikgewogICAg
ICAgICAgICBkZXZpY2VPbltTUEVBS0VSXSA9IDE7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAg
ZGV2aWNlT25bT1RIRVJfQVVESU9fREVWSUNFXSA9IDE7CiAgICAgICAgfQoKICAgICAgICBmb3IgKGlu
dCBpID0gMDsgaSA8IE5VTV9BVURJT19ERVZJQ0VTOyBpKyspIHsKICAgICAgICAgICAgaWYgKG1CYXR0
ZXJ5QXVkaW8uZGV2aWNlT25baV0gIT0gZGV2aWNlT25baV0pewoKICAgICAgICAgICAgICAgIGlmICht
QmF0dGVyeUF1ZGlvLnJlZkNvdW50ID4gMCkgeyAvLyBpZiBwbGF5aW5nIGF1ZGlvCiAgICAgICAgICAg
ICAgICAgICAgaWYgKCFkZXZpY2VPbltpXSkgewogICAgICAgICAgICAgICAgICAgICAgICBtQmF0dGVy
eUF1ZGlvLmxhc3RUaW1lW2ldICs9IHRpbWU7CiAgICAgICAgICAgICAgICAgICAgICAgIG1CYXR0ZXJ5
QXVkaW8udG90YWxUaW1lW2ldICs9IG1CYXR0ZXJ5QXVkaW8ubGFzdFRpbWVbaV07CiAgICAgICAgICAg
ICAgICAgICAgICAgIG1CYXR0ZXJ5QXVkaW8ubGFzdFRpbWVbaV0gPSAwOwogICAgICAgICAgICAgICAg
ICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIG1CYXR0ZXJ5QXVkaW8ubGFzdFRpbWVb
aV0gPSAwIC0gdGltZTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CgogICAg
ICAgICAgICAgICAgbUJhdHRlcnlBdWRpby5kZXZpY2VPbltpXSA9IGRldmljZU9uW2ldOwogICAgICAg
ICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybjsKICAgIH0KCiAgICAvLyBhbiBhdWRpbyBzdHJl
YW0gaXMgc3RhcnRlZAogICAgaWYgKHBhcmFtcyAmIGtCYXR0ZXJ5RGF0YUF1ZGlvRmxpbmdlclN0YXJ0
KSB7CiAgICAgICAgLy8gcmVjb3JkIHRoZSBzdGFydCB0aW1lIG9ubHkgaWYgY3VycmVudGx5IG5vIG90
aGVyIGF1ZGlvCiAgICAgICAgLy8gaXMgYmVpbmcgcGxheWVkCiAgICAgICAgaWYgKG1CYXR0ZXJ5QXVk
aW8ucmVmQ291bnQgPT0gMCkgewogICAgICAgICAgICBmb3IgKGludCBpID0gMDsgaSA8IE5VTV9BVURJ
T19ERVZJQ0VTOyBpKyspIHsKICAgICAgICAgICAgICAgIGlmIChtQmF0dGVyeUF1ZGlvLmRldmljZU9u
W2ldKSB7CiAgICAgICAgICAgICAgICAgICAgbUJhdHRlcnlBdWRpby5sYXN0VGltZVtpXSAtPSB0aW1l
OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBtQmF0dGVy
eUF1ZGlvLnJlZkNvdW50ICsrOwogICAgICAgIHJldHVybjsKCiAgICB9IGVsc2UgaWYgKHBhcmFtcyAm
IGtCYXR0ZXJ5RGF0YUF1ZGlvRmxpbmdlclN0b3ApIHsKICAgICAgICBpZiAobUJhdHRlcnlBdWRpby5y
ZWZDb3VudCA8PSAwKSB7CiAgICAgICAgICAgIEFMT0dXKCJCYXR0ZXJ5IHRyYWNrIHdhcm5pbmc6IHJl
ZkNvdW50IGlzIDw9IDAiKTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KCiAgICAgICAgLy8g
cmVjb3JkIHRoZSBzdG9wIHRpbWUgb25seSBpZiBjdXJyZW50bHkgdGhpcyBpcyB0aGUgb25seQogICAg
ICAgIC8vIGF1ZGlvIGJlaW5nIHBsYXllZAogICAgICAgIGlmIChtQmF0dGVyeUF1ZGlvLnJlZkNvdW50
ID09IDEpIHsKICAgICAgICAgICAgZm9yIChpbnQgaSA9IDA7IGkgPCBOVU1fQVVESU9fREVWSUNFUzsg
aSsrKSB7CiAgICAgICAgICAgICAgICBpZiAobUJhdHRlcnlBdWRpby5kZXZpY2VPbltpXSkgewogICAg
ICAgICAgICAgICAgICAgIG1CYXR0ZXJ5QXVkaW8ubGFzdFRpbWVbaV0gKz0gdGltZTsKICAgICAgICAg
ICAgICAgICAgICBtQmF0dGVyeUF1ZGlvLnRvdGFsVGltZVtpXSArPSBtQmF0dGVyeUF1ZGlvLmxhc3RU
aW1lW2ldOwogICAgICAgICAgICAgICAgICAgIG1CYXR0ZXJ5QXVkaW8ubGFzdFRpbWVbaV0gPSAwOwog
ICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBtQmF0dGVyeUF1
ZGlvLnJlZkNvdW50IC0tOwogICAgICAgIHJldHVybjsKICAgIH0KCiAgICB1aWRfdCB1aWQgPSBJUENU
aHJlYWRTdGF0ZTo6c2VsZigpLT5nZXRDYWxsaW5nVWlkKCk7CiAgICBpZiAodWlkID09IEFJRF9NRURJ
QSkgewogICAgICAgIHJldHVybjsKICAgIH0KICAgIGludCBpbmRleCA9IG1CYXR0ZXJ5RGF0YS5pbmRl
eE9mS2V5KHVpZCk7CgogICAgaWYgKGluZGV4IDwgMCkgeyAvLyBjcmVhdGUgYSBuZXcgZW50cnkgZm9y
IHRoaXMgVUlECiAgICAgICAgQmF0dGVyeVVzYWdlSW5mbyBpbmZvOwogICAgICAgIGluZm8uYXVkaW9U
b3RhbFRpbWUgPSAwOwogICAgICAgIGluZm8udmlkZW9Ub3RhbFRpbWUgPSAwOwogICAgICAgIGluZm8u
YXVkaW9MYXN0VGltZSA9IDA7CiAgICAgICAgaW5mby52aWRlb0xhc3RUaW1lID0gMDsKICAgICAgICBp
bmZvLnJlZkNvdW50ID0gMDsKCiAgICAgICAgaWYgKG1CYXR0ZXJ5RGF0YS5hZGQodWlkLCBpbmZvKSA9
PSBOT19NRU1PUlkpIHsKICAgICAgICAgICAgQUxPR0UoIkJhdHRlcnkgdHJhY2sgZXJyb3I6IG5vIG1l
bW9yeSBmb3IgbmV3IGFwcCIpOwogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgfQoKICAg
IEJhdHRlcnlVc2FnZUluZm8gJmluZm8gPSBtQmF0dGVyeURhdGEuZWRpdFZhbHVlRm9yKHVpZCk7Cgog
ICAgaWYgKHBhcmFtcyAmIGtCYXR0ZXJ5RGF0YUNvZGVjU3RhcnRlZCkgewogICAgICAgIGlmIChwYXJh
bXMgJiBrQmF0dGVyeURhdGFUcmFja0F1ZGlvKSB7CiAgICAgICAgICAgIGluZm8uYXVkaW9MYXN0VGlt
ZSAtPSB0aW1lOwogICAgICAgICAgICBpbmZvLnJlZkNvdW50ICsrOwogICAgICAgIH0KICAgICAgICBp
ZiAocGFyYW1zICYga0JhdHRlcnlEYXRhVHJhY2tWaWRlbykgewogICAgICAgICAgICBpbmZvLnZpZGVv
TGFzdFRpbWUgLT0gdGltZTsKICAgICAgICAgICAgaW5mby5yZWZDb3VudCArKzsKICAgICAgICB9CiAg
ICB9IGVsc2UgewogICAgICAgIGlmIChpbmZvLnJlZkNvdW50ID09IDApIHsKICAgICAgICAgICAgQUxP
R1coIkJhdHRlcnkgdHJhY2sgd2FybmluZzogcmVmQ291bnQgaXMgYWxyZWFkeSAwIik7CiAgICAgICAg
ICAgIHJldHVybjsKICAgICAgICB9IGVsc2UgaWYgKGluZm8ucmVmQ291bnQgPCAwKSB7CiAgICAgICAg
ICAgIEFMT0dFKCJCYXR0ZXJ5IHRyYWNrIGVycm9yOiByZWZDb3VudCA8IDAiKTsKICAgICAgICAgICAg
bUJhdHRlcnlEYXRhLnJlbW92ZUl0ZW0odWlkKTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0K
CiAgICAgICAgaWYgKHBhcmFtcyAmIGtCYXR0ZXJ5RGF0YVRyYWNrQXVkaW8pIHsKICAgICAgICAgICAg
aW5mby5hdWRpb0xhc3RUaW1lICs9IHRpbWU7CiAgICAgICAgICAgIGluZm8ucmVmQ291bnQgLS07CiAg
ICAgICAgfQogICAgICAgIGlmIChwYXJhbXMgJiBrQmF0dGVyeURhdGFUcmFja1ZpZGVvKSB7CiAgICAg
ICAgICAgIGluZm8udmlkZW9MYXN0VGltZSArPSB0aW1lOwogICAgICAgICAgICBpbmZvLnJlZkNvdW50
IC0tOwogICAgICAgIH0KCiAgICAgICAgLy8gbm8gc3RyZWFtIGlzIGJlaW5nIHBsYXllZCBieSB0aGlz
IFVJRAogICAgICAgIGlmIChpbmZvLnJlZkNvdW50ID09IDApIHsKICAgICAgICAgICAgaW5mby5hdWRp
b1RvdGFsVGltZSArPSBpbmZvLmF1ZGlvTGFzdFRpbWU7CiAgICAgICAgICAgIGluZm8uYXVkaW9MYXN0
VGltZSA9IDA7CiAgICAgICAgICAgIGluZm8udmlkZW9Ub3RhbFRpbWUgKz0gaW5mby52aWRlb0xhc3RU
aW1lOwogICAgICAgICAgICBpbmZvLnZpZGVvTGFzdFRpbWUgPSAwOwogICAgICAgIH0KICAgIH0KfQoK
c3RhdHVzX3QgTWVkaWFQbGF5ZXJTZXJ2aWNlOjpCYXR0ZXJ5VHJhY2tlcjo6cHVsbEJhdHRlcnlEYXRh
KFBhcmNlbCogcmVwbHkpIHsKICAgIE11dGV4OjpBdXRvbG9jayBsb2NrKG1Mb2NrKTsKCiAgICAvLyBh
dWRpbyBvdXRwdXQgZGV2aWNlcyB1c2FnZQogICAgaW50MzJfdCB0aW1lID0gc3lzdGVtVGltZSgpIC8g
MTAwMDAwMEw7IC8vaW4gbXMKICAgIGludDMyX3QgdG90YWxUaW1lOwoKICAgIGZvciAoaW50IGkgPSAw
OyBpIDwgTlVNX0FVRElPX0RFVklDRVM7IGkrKykgewogICAgICAgIHRvdGFsVGltZSA9IG1CYXR0ZXJ5
QXVkaW8udG90YWxUaW1lW2ldOwoKICAgICAgICBpZiAobUJhdHRlcnlBdWRpby5kZXZpY2VPbltpXQog
ICAgICAgICAgICAmJiAobUJhdHRlcnlBdWRpby5sYXN0VGltZVtpXSAhPSAwKSkgewogICAgICAgICAg
ICAgICAgaW50MzJfdCB0bXBUaW1lID0gbUJhdHRlcnlBdWRpby5sYXN0VGltZVtpXSArIHRpbWU7CiAg
ICAgICAgICAgICAgICB0b3RhbFRpbWUgKz0gdG1wVGltZTsKICAgICAgICB9CgogICAgICAgIHJlcGx5
LT53cml0ZUludDMyKHRvdGFsVGltZSk7CiAgICAgICAgLy8gcmVzZXQgdGhlIHRvdGFsIHRpbWUKICAg
ICAgICBtQmF0dGVyeUF1ZGlvLnRvdGFsVGltZVtpXSA9IDA7CiAgIH0KCiAgICAvLyBjb2RlYyB1c2Fn
ZQogICAgQmF0dGVyeVVzYWdlSW5mbyBpbmZvOwogICAgaW50IHNpemUgPSBtQmF0dGVyeURhdGEuc2l6
ZSgpOwoKICAgIHJlcGx5LT53cml0ZUludDMyKHNpemUpOwogICAgaW50IGkgPSAwOwoKICAgIHdoaWxl
IChpIDwgc2l6ZSkgewogICAgICAgIGluZm8gPSBtQmF0dGVyeURhdGEudmFsdWVBdChpKTsKCiAgICAg
ICAgcmVwbHktPndyaXRlSW50MzIobUJhdHRlcnlEYXRhLmtleUF0KGkpKTsgLy9VSUQKICAgICAgICBy
ZXBseS0+d3JpdGVJbnQzMihpbmZvLmF1ZGlvVG90YWxUaW1lKTsKICAgICAgICByZXBseS0+d3JpdGVJ
bnQzMihpbmZvLnZpZGVvVG90YWxUaW1lKTsKCiAgICAgICAgaW5mby5hdWRpb1RvdGFsVGltZSA9IDA7
CiAgICAgICAgaW5mby52aWRlb1RvdGFsVGltZSA9IDA7CgogICAgICAgIC8vIHJlbW92ZSB0aGUgVUlE
IGVudHJ5IHdoZXJlIG5vIHN0cmVhbSBpcyBiZWluZyBwbGF5ZWQKICAgICAgICBpZiAoaW5mby5yZWZD
b3VudCA8PSAwKSB7CiAgICAgICAgICAgIG1CYXR0ZXJ5RGF0YS5yZW1vdmVJdGVtc0F0KGkpOwogICAg
ICAgICAgICBzaXplIC0tOwogICAgICAgICAgICBpIC0tOwogICAgICAgIH0KICAgICAgICBpKys7CiAg
ICB9CiAgICByZXR1cm4gTk9fRVJST1I7Cn0KfSAvLyBuYW1lc3BhY2UgYW5kcm9pZAo=</data><mime>application/octet-stream</mime><width>0</width><height>0</height><duration>0</duration><resource-attributes><file-name>MediaPlayerService.cp</file-name></resource-attributes></resource><resource><data encoding="base64">LyoKICogQ29weXJpZ2h0IChDKSAyMDA4IFRoZSBBbmRyb2lkIE9wZW4gU291cmNlIFByb2plY3QKICoK
ICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNl
bnNlIik7CiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0
aCB0aGUgTGljZW5zZS4KICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0CiAq
CiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wCiAqCiAqIFVu
bGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29m
dHdhcmUKICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4g
IkFTIElTIiBCQVNJUywKICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJ
TkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuCiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNw
ZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQKICogbGltaXRhdGlvbnMgdW5k
ZXIgdGhlIExpY2Vuc2UuCiAqLwoKI2lmbmRlZiBBTkRST0lEX0lCSU5ERVJfSAojZGVmaW5lIEFORFJP
SURfSUJJTkRFUl9ICgojaW5jbHVkZSA8dXRpbHMvRXJyb3JzLmg+CiNpbmNsdWRlIDx1dGlscy9SZWZC
YXNlLmg+CiNpbmNsdWRlIDx1dGlscy9TdHJpbmcxNi5oPgojaW5jbHVkZSA8dXRpbHMvVmVjdG9yLmg+
CgoKLy8gbGludXgvYmluZGVyLmggYWxyZWFkeSBkZWZpbmVzIHRoaXMsIGJ1dCB3ZSBjYW4ndCBqdXN0
IGluY2x1ZGUgaXQgZnJvbSB0aGVyZQovLyBiZWNhdXNlIHRoZXJlIGFyZSBob3N0IGJ1aWxkcyB0aGF0
IGluY2x1ZGUgdGhpcyBmaWxlLgojaWZuZGVmIEJfUEFDS19DSEFSUwojZGVmaW5lIEJfUEFDS19DSEFS
UyhjMSwgYzIsIGMzLCBjNCkgXAogICAgKCgoKGMxKTw8MjQpKSB8ICgoKGMyKTw8MTYpKSB8ICgoKGMz
KTw8OCkpIHwgKGM0KSkKI2VuZGlmICAvLyBCX1BBQ0tfQ0hBUlMKCi8vIC0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQpu
YW1lc3BhY2UgYW5kcm9pZCB7CgpjbGFzcyBCQmluZGVyOwpjbGFzcyBCcEJpbmRlcjsKY2xhc3MgSUlu
dGVyZmFjZTsKY2xhc3MgUGFyY2VsOwpjbGFzcyBJUmVzdWx0UmVjZWl2ZXI7CmNsYXNzIElTaGVsbENh
bGxiYWNrOwoKLyoqCiAqIEJhc2UgY2xhc3MgYW5kIGxvdy1sZXZlbCBwcm90b2NvbCBmb3IgYSByZW1v
dGFibGUgb2JqZWN0LgogKiBZb3UgY2FuIGRlcml2ZSBmcm9tIHRoaXMgY2xhc3MgdG8gY3JlYXRlIGFu
IG9iamVjdCBmb3Igd2hpY2ggb3RoZXIKICogcHJvY2Vzc2VzIGNhbiBob2xkIHJlZmVyZW5jZXMgdG8g
aXQuICBDb21tdW5pY2F0aW9uIGJldHdlZW4gcHJvY2Vzc2VzCiAqIChtZXRob2QgY2FsbHMsIHByb3Bl
cnR5IGdldCBhbmQgc2V0KSBpcyBkb3duIHRocm91Z2ggYSBsb3ctbGV2ZWwKICogcHJvdG9jb2wgaW1w
bGVtZW50ZWQgb24gdG9wIG9mIHRoZSB0cmFuc2FjdCgpIEFQSS4KICovCmNsYXNzIElCaW5kZXIgOiBw
dWJsaWMgdmlydHVhbCBSZWZCYXNlCnsKcHVibGljOgogICAgZW51bSB7CiAgICAgICAgRklSU1RfQ0FM
TF9UUkFOU0FDVElPTiAgPSAweDAwMDAwMDAxLAogICAgICAgIExBU1RfQ0FMTF9UUkFOU0FDVElPTiAg
ID0gMHgwMGZmZmZmZiwKCiAgICAgICAgUElOR19UUkFOU0FDVElPTiAgICAgICAgPSBCX1BBQ0tfQ0hB
UlMoJ18nLCdQJywnTicsJ0cnKSwKICAgICAgICBEVU1QX1RSQU5TQUNUSU9OICAgICAgICA9IEJfUEFD
S19DSEFSUygnXycsJ0QnLCdNJywnUCcpLAogICAgICAgIFNIRUxMX0NPTU1BTkRfVFJBTlNBQ1RJT04g
PSBCX1BBQ0tfQ0hBUlMoJ18nLCdDJywnTScsJ0QnKSwKICAgICAgICBJTlRFUkZBQ0VfVFJBTlNBQ1RJ
T04gICA9IEJfUEFDS19DSEFSUygnXycsICdOJywgJ1QnLCAnRicpLAogICAgICAgIFNZU1BST1BTX1RS
QU5TQUNUSU9OICAgID0gQl9QQUNLX0NIQVJTKCdfJywgJ1MnLCAnUCcsICdSJyksCgogICAgICAgIC8v
IENvcnJlc3BvbmRzIHRvIFRGX09ORV9XQVkgLS0gYW4gYXN5bmNocm9ub3VzIGNhbGwuCiAgICAgICAg
RkxBR19PTkVXQVkgICAgICAgICAgICAgPSAweDAwMDAwMDAxCiAgICB9OwoKICAgICAgICAgICAgICAg
ICAgICAgICAgICBJQmluZGVyKCk7CgogICAgLyoqCiAgICAgKiBDaGVjayBpZiB0aGlzIElCaW5kZXIg
aW1wbGVtZW50cyB0aGUgaW50ZXJmYWNlIG5hbWVkIGJ5CiAgICAgKiBAYSBkZXNjcmlwdG9yLiAgSWYg
aXQgZG9lcywgdGhlIGJhc2UgcG9pbnRlciB0byBpdCBpcyByZXR1cm5lZCwKICAgICAqIHdoaWNoIHlv
dSBjYW4gc2FmZWx5IHN0YXRpY19jYXN0PD4gdG8gdGhlIGNvbmNyZXRlIEMrKyBpbnRlcmZhY2UuCiAg
ICAgKi8KICAgIHZpcnR1YWwgc3A8SUludGVyZmFjZT4gIHF1ZXJ5TG9jYWxJbnRlcmZhY2UoY29uc3Qg
U3RyaW5nMTYmIGRlc2NyaXB0b3IpOwoKICAgIC8qKgogICAgICogUmV0dXJuIHRoZSBjYW5vbmljYWwg
bmFtZSBvZiB0aGUgaW50ZXJmYWNlIHByb3ZpZGVkIGJ5IHRoaXMgSUJpbmRlcgogICAgICogb2JqZWN0
LgogICAgICovCiAgICB2aXJ0dWFsIGNvbnN0IFN0cmluZzE2JiBnZXRJbnRlcmZhY2VEZXNjcmlwdG9y
KCkgY29uc3QgPSAwOwoKICAgIHZpcnR1YWwgYm9vbCAgICAgICAgICAgIGlzQmluZGVyQWxpdmUoKSBj
b25zdCA9IDA7CiAgICB2aXJ0dWFsIHN0YXR1c190ICAgICAgICBwaW5nQmluZGVyKCkgPSAwOwogICAg
dmlydHVhbCBzdGF0dXNfdCAgICAgICAgZHVtcChpbnQgZmQsIGNvbnN0IFZlY3RvcjxTdHJpbmcxNj4m
IGFyZ3MpID0gMDsKICAgIHN0YXRpYyAgc3RhdHVzX3QgICAgICAgIHNoZWxsQ29tbWFuZChjb25zdCBz
cDxJQmluZGVyPiYgdGFyZ2V0LCBpbnQgaW4sIGludCBvdXQsIGludCBlcnIsCiAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgVmVjdG9yPFN0cmluZzE2PiYgYXJncywgY29uc3Qgc3A8
SVNoZWxsQ2FsbGJhY2s+JiBjYWxsYmFjaywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICBjb25zdCBzcDxJUmVzdWx0UmVjZWl2ZXI+JiByZXN1bHRSZWNlaXZlcik7CgogICAgdmly
dHVhbCBzdGF0dXNfdCAgICAgICAgdHJhbnNhY3QoICAgdWludDMyX3QgY29kZSwKICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IFBhcmNlbCYgZGF0YSwKICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBhcmNlbCogcmVwbHksCiAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICB1aW50MzJfdCBmbGFncyA9IDApID0gMDsKCiAgICAvLyBEZWF0
aFJlY2lwaWVudCBpcyBwdXJlIGFic3RyYWN0LCB0aGVyZSBpcyBubyB2aXJ0dWFsIG1ldGhvZAogICAg
Ly8gaW1wbGVtZW50YXRpb24gdG8gcHV0IGluIGEgdHJhbnNsYXRpb24gdW5pdCBpbiBvcmRlciB0byBz
aWxlbmNlIHRoZQogICAgLy8gd2VhayB2dGFibGVzIHdhcm5pbmcuCiAgICAjaWYgZGVmaW5lZChfX2Ns
YW5nX18pCiAgICAjcHJhZ21hIGNsYW5nIGRpYWdub3N0aWMgcHVzaAogICAgI3ByYWdtYSBjbGFuZyBk
aWFnbm9zdGljIGlnbm9yZWQgIi1Xd2Vhay12dGFibGVzIgogICAgI2VuZGlmCgogICAgY2xhc3MgRGVh
dGhSZWNpcGllbnQgOiBwdWJsaWMgdmlydHVhbCBSZWZCYXNlCiAgICB7CiAgICBwdWJsaWM6CiAgICAg
ICAgdmlydHVhbCB2b2lkIGJpbmRlckRpZWQoY29uc3Qgd3A8SUJpbmRlcj4mIHdobykgPSAwOwogICAg
fTsKCiAgICAjaWYgZGVmaW5lZChfX2NsYW5nX18pCiAgICAjcHJhZ21hIGNsYW5nIGRpYWdub3N0aWMg
cG9wCiAgICAjZW5kaWYKCiAgICAvKioKICAgICAqIFJlZ2lzdGVyIHRoZSBAYSByZWNpcGllbnQgZm9y
IGEgbm90aWZpY2F0aW9uIGlmIHRoaXMgYmluZGVyCiAgICAgKiBnb2VzIGF3YXkuICBJZiB0aGlzIGJp
bmRlciBvYmplY3QgdW5leHBlY3RlZGx5IGdvZXMgYXdheQogICAgICogKHR5cGljYWxseSBiZWNhdXNl
IGl0cyBob3N0aW5nIHByb2Nlc3MgaGFzIGJlZW4ga2lsbGVkKSwKICAgICAqIHRoZW4gRGVhdGhSZWNp
cGllbnQ6OmJpbmRlckRpZWQoKSB3aWxsIGJlIGNhbGxlZCB3aXRoIGEgcmVmZXJlbmNlCiAgICAgKiB0
byB0aGlzLgogICAgICoKICAgICAqIFRoZSBAYSBjb29raWUgaXMgb3B0aW9uYWwgLS0gaWYgbm9uLU5V
TEwsIGl0IHNob3VsZCBiZSBhCiAgICAgKiBtZW1vcnkgYWRkcmVzcyB0aGF0IHlvdSBvd24gKHRoYXQg
aXMsIHlvdSBrbm93IGl0IGlzIHVuaXF1ZSkuCiAgICAgKgogICAgICogQG5vdGUgWW91IHdpbGwgb25s
eSByZWNlaXZlIGRlYXRoIG5vdGlmaWNhdGlvbnMgZm9yIHJlbW90ZSBiaW5kZXJzLAogICAgICogYXMg
bG9jYWwgYmluZGVycyBieSBkZWZpbml0aW9uIGNhbid0IGRpZSB3aXRob3V0IHlvdSBkeWluZyBhcyB3
ZWxsLgogICAgICogVHJ5aW5nIHRvIHVzZSB0aGlzIGZ1bmN0aW9uIG9uIGEgbG9jYWwgYmluZGVyIHdp
bGwgcmVzdWx0IGluIGFuCiAgICAgKiBJTlZBTElEX09QRVJBVElPTiBjb2RlIGJlaW5nIHJldHVybmVk
IGFuZCBub3RoaW5nIGhhcHBlbmluZy4KICAgICAqCiAgICAgKiBAbm90ZSBUaGlzIGxpbmsgYWx3YXlz
IGhvbGRzIGEgd2VhayByZWZlcmVuY2UgdG8gaXRzIHJlY2lwaWVudC4KICAgICAqCiAgICAgKiBAbm90
ZSBZb3Ugd2lsbCBvbmx5IHJlY2VpdmUgYSB3ZWFrIHJlZmVyZW5jZSB0byB0aGUgZGVhZAogICAgICog
YmluZGVyLiAgWW91IHNob3VsZCBub3QgdHJ5IHRvIHByb21vdGUgdGhpcyB0byBhIHN0cm9uZyByZWZl
cmVuY2UuCiAgICAgKiAoTm9yIHNob3VsZCB5b3UgbmVlZCB0bywgYXMgdGhlcmUgaXMgbm90aGluZyB1
c2VmdWwgeW91IGNhbgogICAgICogZGlyZWN0bHkgZG8gd2l0aCBpdCBub3cgdGhhdCBpdCBoYXMgcGFz
c2VkIG9uLikKICAgICAqLwogICAgdmlydHVhbCBzdGF0dXNfdCAgICAgICAgbGlua1RvRGVhdGgoY29u
c3Qgc3A8RGVhdGhSZWNpcGllbnQ+JiByZWNpcGllbnQsCiAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICB2b2lkKiBjb29raWUgPSBOVUxMLAogICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgdWludDMyX3QgZmxhZ3MgPSAwKSA9IDA7CgogICAgLyoqCiAgICAgKiBSZW1v
dmUgYSBwcmV2aW91c2x5IHJlZ2lzdGVyZWQgZGVhdGggbm90aWZpY2F0aW9uLgogICAgICogVGhlIEBh
IHJlY2lwaWVudCB3aWxsIG5vIGxvbmdlciBiZSBjYWxsZWQgaWYgdGhpcyBvYmplY3QKICAgICAqIGRp
ZXMuICBUaGUgQGEgY29va2llIGlzIG9wdGlvbmFsLiAgSWYgbm9uLU5VTEwsIHlvdSBjYW4KICAgICAq
IHN1cHBseSBhIE5VTEwgQGEgcmVjaXBpZW50LCBhbmQgdGhlIHJlY2lwaWVudCBwcmV2aW91c2x5CiAg
ICAgKiBhZGRlZCB3aXRoIHRoYXQgY29va2llIHdpbGwgYmUgdW5saW5rZWQuCiAgICAgKi8KICAgIHZp
cnR1YWwgc3RhdHVzX3QgICAgICAgIHVubGlua1RvRGVhdGgoICBjb25zdCB3cDxEZWF0aFJlY2lwaWVu
dD4mIHJlY2lwaWVudCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2
b2lkKiBjb29raWUgPSBOVUxMLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgIHVpbnQzMl90IGZsYWdzID0gMCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICB3cDxEZWF0aFJlY2lwaWVudD4qIG91dFJlY2lwaWVudCA9IE5VTEwpID0gMDsKCiAgICB2
aXJ0dWFsIGJvb2wgICAgICAgICAgICBjaGVja1N1YmNsYXNzKGNvbnN0IHZvaWQqIHN1YmNsYXNzSUQp
IGNvbnN0OwoKICAgIHR5cGVkZWYgdm9pZCAoKm9iamVjdF9jbGVhbnVwX2Z1bmMpKGNvbnN0IHZvaWQq
IGlkLCB2b2lkKiBvYmosIHZvaWQqIGNsZWFudXBDb29raWUpOwoKICAgIHZpcnR1YWwgdm9pZCAgICAg
ICAgICAgIGF0dGFjaE9iamVjdCggICBjb25zdCB2b2lkKiBvYmplY3RJRCwKICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2b2lkKiBvYmplY3QsCiAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgdm9pZCogY2xlYW51cENvb2tpZSwKICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmplY3RfY2xlYW51cF9mdW5jIGZ1bmMpID0g
MDsKICAgIHZpcnR1YWwgdm9pZCogICAgICAgICAgIGZpbmRPYmplY3QoY29uc3Qgdm9pZCogb2JqZWN0
SUQpIGNvbnN0ID0gMDsKICAgIHZpcnR1YWwgdm9pZCAgICAgICAgICAgIGRldGFjaE9iamVjdChjb25z
dCB2b2lkKiBvYmplY3RJRCkgPSAwOwoKICAgIHZpcnR1YWwgQkJpbmRlciogICAgICAgIGxvY2FsQmlu
ZGVyKCk7CiAgICB2aXJ0dWFsIEJwQmluZGVyKiAgICAgICByZW1vdGVCaW5kZXIoKTsKCnByb3RlY3Rl
ZDoKICAgIHZpcnR1YWwgICAgICAgICAgfklCaW5kZXIoKTsKCnByaXZhdGU6Cn07Cgp9OyAvLyBuYW1l
c3BhY2UgYW5kcm9pZAoKLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgojZW5kaWYgLy8gQU5EUk9JRF9JQklOREVS
X0gK</data><mime>application/octet-stream</mime><width>0</width><height>0</height><duration>0</duration><resource-attributes><file-name>IBinder.h</file-name></resource-attributes></resource><resource><data encoding="base64">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
A2OasbtxlnGF8Q0ToomjSbrJdpMOU9TUzjTVtNz0qhlqZm/GM9tu1jmJMMlpEn9SxaTb5lRzT/Nc82rz
bguGRYhFvkW9xavJ+pMTJq+f3Dr5q6WdZYblXsv7VkpWQVb5Vo1Wb6xNrdnW5dY3bGg2fjZLbBpsXtua
2XJtd9jesaPbTbVbYdds98XewV5oX2Pf56DvkOiwzeG2o7JjuONqx4tOBCcvpyVOTU4fne2dc5yPOP/l
Yu6S7nLA5fkUoyncKXun9LjqurJcd7t2uTHdEt12uXW567iz3CvcH3voeXA89nk88zTxTPM86PnKy9JL
6HXc6723s/ci7zM+mI+/T5FPu6+Sb7TvVt9Hfrp+KX7VfgP+dv4L/M8EEAKCA9YH3A7UDGQHVgUOBDkE
LQpqCaYGRwZvDX4cYhoiDGmcik4Nmrph6oNQg1B+aH0YCAsM2xD2MNwoPCv8t2nEaeHTyqc9jbCKWBjR
GkmPnB15IHIoyitqbdT9aONoUXRzjHzMjJiqmPexPrElsV1xk+MWxV2JV4/nxTckkBJiEvYlDE73nb5p
eu8MuxmFM27NNJo5b+alWeqzMmadnC0/mzX7aCIhMTbxQOJnVhirgjWYFJi0LWmA7c3ezH7J8eBs5PRx
Xbkl3GfJrsklyc9TXFM2pPSluqeWpvbzvHlbea/TAtJ2pr1PD0vfnz6SEZtRm0nOTMw8wVfip/Nb5mjN
mTenU2AmKBR0ZTlnbcoaEAYL92Uj2TOzG3KU4VGnTWQs+knUneuWW577YW7M3KPzFOfx57XNN52/av6z
PL+8XxbgC9gLmhfqLFy2sHuR56Ldi5HFSYubl+gtKVjSu9R/aeUyyrL0Zb/nW+aX5L9bHru8sUCzYGlB
z0/+P1UXyhUKC2+vcFmxcyW+kreyfZXNqi2rvhZxii4XWxaXFn9ezV59+Wern8t+HlmTvKZ9rf3aHeuI
6/jrbq13X19ZoliSV9KzYeqGuo3MjUUb322avelSqW3pzs2UzaLNXWUhZQ1b9Les2/J5a+rWm+Ve5bXb
NLat2vZ+O2f7tR0eO2p2au4s3vlpF2/Xnd3+u+sqDCtK9xD35O55ujdmb+svjr9U7VPfV7zvy37+/q7K
iMqWKoeqqgMaB9ZWo9Wi6r6DMw52HPI51FBjXrO7llFbfBgcFh1+8Wvir7eOBB9pPup4tOaYwbFtx+nH
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
HnYKDYprRDDRLft5u93MyeOEF8tGe1G3u/KqKxyKQUV5qVu+9EV3kHhJlovisXb1K+4db3u7W/bSMvXU
IEzwbqCsPCtKNArr9EmTXIMop8uXLFGr99xzz1UF5I477lCPxOzZs92sWbOEFzn38EMPuT//+c/uhOOP
dw8/+JD7/ne/6z70kY+4Fctf1n0XBM4pbzjJPSe8Bp7C74RFx7v169c7NtKxqt/97ndr/IPCE+FzKDq0
hfJ94YUXukn0p0pcsWKh8JxRmSyqblGS2KYQwkoJOR/PrDXDP6F/TT7uff6Qep0KibpoufCBtS33eH4J
fYCQkXaVsjA4j1/WUONmzprhHvjj/XJaqcIlaivkwZhGd+ftt6vpz+A/9S//4r7zne+ogGDjqaWu2V1z
zTXukve+z20XbQBJe9NNN7nDFhzqaupqlfBB1qQJE3WBshBg6suWvuQ2b9zkviCM4oK3nuf+eO997gMf
+ID7yuVXuNNPP90tkUlkgd/z+z8oM8BK+trXvuZqZSMKwXDCcYscpl599Rh3yfve5+69+x535513aj/v
vOPn7uSTT3a/+c1v3Fe/+lX3k5t+rEIUxCFYfvjDH7oxcrqN+i4Wotq9facyjdtlnBAJ+e++5x59dkHw
rQseXNnCt2u793FakNcwNHiShcnbTGOBzlisQI8gATzgz6UKPySdewvj6eomkoUendJyMnc1qnlv27bV
PffsM275spfcG994pnv66afckuefV5MfS6Ne5u53Mrcnn3yKu//eP7rjRFlpb25127dvd//vP/5DXZ6N
QmMXXnSRu/qqq9wNYrVw0AN62rxpk9soSs8nP/EJtWSeePQx9+Mf/9h95StfUcsErRIre+mSF9xTTz2l
C/mKL31ZBcdPb7nVfeYzn3Gf+KePucsuu0wZhE8DyaEqHqJRRziJX1s+4v01adfpQrAdj7d6R3MIfWHR
yuFudcez+b7utQ2q8BwliudDwugRHKefcqr7/e9+5x596M9urLgMX1q8RNf8s88/5y6/8gr3/775H+7Y
Rce5VStWuilTD3K/uPMu5TP/88MfuTe++U3uvnvuVfc2fKtCXO14NT73fz4vymaJ7mMddeRC97Of3u5w
lU6ZOlXdj9AWivLNN9/s/v0z/+Y+/tGPuptvu8196covuq9dfbXyn3fKJvr999+vz6ncd9996t3561//
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
9j35kEKuLgAAAABJRU5ErkJggg==</data><mime>image/png</mime><width>403</width><height>768</height><duration>0</duration><resource-attributes/></resource><resource><data encoding="base64">LyoKICogQ29weXJpZ2h0IChDKSAyMDA1IFRoZSBBbmRyb2lkIE9wZW4gU291cmNlIFByb2plY3QKICoK
ICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNl
bnNlIik7CiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0
aCB0aGUgTGljZW5zZS4KICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0CiAq
CiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wCiAqCiAqIFVu
bGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29m
dHdhcmUKICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4g
IkFTIElTIiBCQVNJUywKICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJ
TkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuCiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNw
ZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQKICogbGltaXRhdGlvbnMgdW5k
ZXIgdGhlIExpY2Vuc2UuCiAqLwoKI2RlZmluZSBMT0dfVEFHICJJUENUaHJlYWRTdGF0ZSIKCiNpbmNs
dWRlIDxiaW5kZXIvSVBDVGhyZWFkU3RhdGUuaD4KCiNpbmNsdWRlIDxiaW5kZXIvQmluZGVyLmg+CiNp
bmNsdWRlIDxiaW5kZXIvQnBCaW5kZXIuaD4KI2luY2x1ZGUgPGJpbmRlci9UZXh0T3V0cHV0Lmg+Cgoj
aW5jbHVkZSA8Y3V0aWxzL3NjaGVkX3BvbGljeS5oPgojaW5jbHVkZSA8dXRpbHMvTG9nLmg+CiNpbmNs
dWRlIDx1dGlscy9TeXN0ZW1DbG9jay5oPgojaW5jbHVkZSA8dXRpbHMvdGhyZWFkcy5oPgoKI2luY2x1
ZGUgPHByaXZhdGUvYmluZGVyL2JpbmRlcl9tb2R1bGUuaD4KI2luY2x1ZGUgPHByaXZhdGUvYmluZGVy
L1N0YXRpYy5oPgoKI2luY2x1ZGUgPGVycm5vLmg+CiNpbmNsdWRlIDxpbnR0eXBlcy5oPgojaW5jbHVk
ZSA8cHRocmVhZC5oPgojaW5jbHVkZSA8c2NoZWQuaD4KI2luY2x1ZGUgPHNpZ25hbC5oPgojaW5jbHVk
ZSA8c3RkaW8uaD4KI2luY2x1ZGUgPHN5cy9pb2N0bC5oPgojaW5jbHVkZSA8c3lzL3Jlc291cmNlLmg+
CiNpbmNsdWRlIDx1bmlzdGQuaD4KCiNpZiBMT0dfTkRFQlVHCgojZGVmaW5lIElGX0xPR19UUkFOU0FD
VElPTlMoKSBpZiAoZmFsc2UpCiNkZWZpbmUgSUZfTE9HX0NPTU1BTkRTKCkgaWYgKGZhbHNlKQojZGVm
aW5lIExPR19SRU1PVEVSRUZTKC4uLikgCiNkZWZpbmUgSUZfTE9HX1JFTU9URVJFRlMoKSBpZiAoZmFs
c2UpCgojZGVmaW5lIExPR19USFJFQURQT09MKC4uLikgCiNkZWZpbmUgTE9HX09ORVdBWSguLi4pIAoK
I2Vsc2UKCiNkZWZpbmUgSUZfTE9HX1RSQU5TQUNUSU9OUygpIElGX0FMT0coTE9HX1ZFUkJPU0UsICJ0
cmFuc2FjdCIpCiNkZWZpbmUgSUZfTE9HX0NPTU1BTkRTKCkgSUZfQUxPRyhMT0dfVkVSQk9TRSwgImlw
YyIpCiNkZWZpbmUgTE9HX1JFTU9URVJFRlMoLi4uKSBBTE9HKExPR19ERUJVRywgInJlbW90ZXJlZnMi
LCBfX1ZBX0FSR1NfXykKI2RlZmluZSBJRl9MT0dfUkVNT1RFUkVGUygpIElGX0FMT0coTE9HX0RFQlVH
LCAicmVtb3RlcmVmcyIpCiNkZWZpbmUgTE9HX1RIUkVBRFBPT0woLi4uKSBBTE9HKExPR19ERUJVRywg
InRocmVhZHBvb2wiLCBfX1ZBX0FSR1NfXykKI2RlZmluZSBMT0dfT05FV0FZKC4uLikgQUxPRyhMT0df
REVCVUcsICJpcGMiLCBfX1ZBX0FSR1NfXykKCiNlbmRpZgoKLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgpuYW1l
c3BhY2UgYW5kcm9pZCB7CgovLyBTdGF0aWMgY29uc3QgYW5kIGZ1bmN0aW9ucyB3aWxsIGJlIG9wdGlt
aXplZCBvdXQgaWYgbm90IHVzZWQsCi8vIHdoZW4gTE9HX05ERUJVRyBhbmQgcmVmZXJlbmNlcyBpbiBJ
Rl9MT0dfQ09NTUFORFMoKSBhcmUgb3B0aW1pemVkIG91dC4Kc3RhdGljIGNvbnN0IGNoYXIgKmtSZXR1
cm5TdHJpbmdzW10gPSB7CiAgICAiQlJfRVJST1IiLAogICAgIkJSX09LIiwKICAgICJCUl9UUkFOU0FD
VElPTiIsCiAgICAiQlJfUkVQTFkiLAogICAgIkJSX0FDUVVJUkVfUkVTVUxUIiwKICAgICJCUl9ERUFE
X1JFUExZIiwKICAgICJCUl9UUkFOU0FDVElPTl9DT01QTEVURSIsCiAgICAiQlJfSU5DUkVGUyIsCiAg
ICAiQlJfQUNRVUlSRSIsCiAgICAiQlJfUkVMRUFTRSIsCiAgICAiQlJfREVDUkVGUyIsCiAgICAiQlJf
QVRURU1QVF9BQ1FVSVJFIiwKICAgICJCUl9OT09QIiwKICAgICJCUl9TUEFXTl9MT09QRVIiLAogICAg
IkJSX0ZJTklTSEVEIiwKICAgICJCUl9ERUFEX0JJTkRFUiIsCiAgICAiQlJfQ0xFQVJfREVBVEhfTk9U
SUZJQ0FUSU9OX0RPTkUiLAogICAgIkJSX0ZBSUxFRF9SRVBMWSIKfTsKCnN0YXRpYyBjb25zdCBjaGFy
ICprQ29tbWFuZFN0cmluZ3NbXSA9IHsKICAgICJCQ19UUkFOU0FDVElPTiIsCiAgICAiQkNfUkVQTFki
LAogICAgIkJDX0FDUVVJUkVfUkVTVUxUIiwKICAgICJCQ19GUkVFX0JVRkZFUiIsCiAgICAiQkNfSU5D
UkVGUyIsCiAgICAiQkNfQUNRVUlSRSIsCiAgICAiQkNfUkVMRUFTRSIsCiAgICAiQkNfREVDUkVGUyIs
CiAgICAiQkNfSU5DUkVGU19ET05FIiwKICAgICJCQ19BQ1FVSVJFX0RPTkUiLAogICAgIkJDX0FUVEVN
UFRfQUNRVUlSRSIsCiAgICAiQkNfUkVHSVNURVJfTE9PUEVSIiwKICAgICJCQ19FTlRFUl9MT09QRVIi
LAogICAgIkJDX0VYSVRfTE9PUEVSIiwKICAgICJCQ19SRVFVRVNUX0RFQVRIX05PVElGSUNBVElPTiIs
CiAgICAiQkNfQ0xFQVJfREVBVEhfTk9USUZJQ0FUSU9OIiwKICAgICJCQ19ERUFEX0JJTkRFUl9ET05F
Igp9OwoKc3RhdGljIGNvbnN0IGNoYXIqIGdldFJldHVyblN0cmluZyh1aW50MzJfdCBjbWQpCnsKICAg
IHNpemVfdCBpZHggPSBjbWQgJiAweGZmOwogICAgaWYgKGlkeCA8IHNpemVvZihrUmV0dXJuU3RyaW5n
cykgLyBzaXplb2Yoa1JldHVyblN0cmluZ3NbMF0pKQogICAgICAgIHJldHVybiBrUmV0dXJuU3RyaW5n
c1tpZHhdOwogICAgZWxzZQogICAgICAgIHJldHVybiAidW5rbm93biI7Cn0KCnN0YXRpYyBjb25zdCB2
b2lkKiBwcmludEJpbmRlclRyYW5zYWN0aW9uRGF0YShUZXh0T3V0cHV0JiBvdXQsIGNvbnN0IHZvaWQq
IGRhdGEpCnsKICAgIGNvbnN0IGJpbmRlcl90cmFuc2FjdGlvbl9kYXRhKiBidGQgPQogICAgICAgIChj
b25zdCBiaW5kZXJfdHJhbnNhY3Rpb25fZGF0YSopZGF0YTsKICAgIGlmIChidGQtPnRhcmdldC5oYW5k
bGUgPCAxMDI0KSB7CiAgICAgICAgLyogd2FudCB0byBwcmludCBkZXNjcmlwdG9ycyBpbiBkZWNpbWFs
OyBndWVzcyBiYXNlZCBvbiB2YWx1ZSAqLwogICAgICAgIG91dCA8PCAidGFyZ2V0LmRlc2M9IiA8PCBi
dGQtPnRhcmdldC5oYW5kbGU7CiAgICB9IGVsc2UgewogICAgICAgIG91dCA8PCAidGFyZ2V0LnB0cj0i
IDw8IGJ0ZC0+dGFyZ2V0LnB0cjsKICAgIH0KICAgIG91dCA8PCAiIChjb29raWUgIiA8PCBidGQtPmNv
b2tpZSA8PCAiKSIgPDwgZW5kbAogICAgICAgIDw8ICJjb2RlPSIgPDwgVHlwZUNvZGUoYnRkLT5jb2Rl
KSA8PCAiLCBmbGFncz0iIDw8ICh2b2lkKikobG9uZylidGQtPmZsYWdzIDw8IGVuZGwKICAgICAgICA8
PCAiZGF0YT0iIDw8IGJ0ZC0+ZGF0YS5wdHIuYnVmZmVyIDw8ICIgKCIgPDwgKHZvaWQqKWJ0ZC0+ZGF0
YV9zaXplCiAgICAgICAgPDwgIiBieXRlcykiIDw8IGVuZGwKICAgICAgICA8PCAib2Zmc2V0cz0iIDw8
IGJ0ZC0+ZGF0YS5wdHIub2Zmc2V0cyA8PCAiICgiIDw8ICh2b2lkKilidGQtPm9mZnNldHNfc2l6ZQog
ICAgICAgIDw8ICIgYnl0ZXMpIjsKICAgIHJldHVybiBidGQrMTsKfQoKc3RhdGljIGNvbnN0IHZvaWQq
IHByaW50UmV0dXJuQ29tbWFuZChUZXh0T3V0cHV0JiBvdXQsIGNvbnN0IHZvaWQqIF9jbWQpCnsKICAg
IHN0YXRpYyBjb25zdCBzaXplX3QgTiA9IHNpemVvZihrUmV0dXJuU3RyaW5ncykvc2l6ZW9mKGtSZXR1
cm5TdHJpbmdzWzBdKTsKICAgIGNvbnN0IGludDMyX3QqIGNtZCA9IChjb25zdCBpbnQzMl90KilfY21k
OwogICAgdWludDMyX3QgY29kZSA9ICh1aW50MzJfdCkqY21kKys7CiAgICBzaXplX3QgY21kSW5kZXgg
PSBjb2RlICYgMHhmZjsKICAgIGlmIChjb2RlID09IEJSX0VSUk9SKSB7CiAgICAgICAgb3V0IDw8ICJC
Ul9FUlJPUjogIiA8PCAodm9pZCopKGxvbmcpKCpjbWQrKykgPDwgZW5kbDsKICAgICAgICByZXR1cm4g
Y21kOwogICAgfSBlbHNlIGlmIChjbWRJbmRleCA+PSBOKSB7CiAgICAgICAgb3V0IDw8ICJVbmtub3du
IHJlcGx5OiAiIDw8IGNvZGUgPDwgZW5kbDsKICAgICAgICByZXR1cm4gY21kOwogICAgfQogICAgb3V0
IDw8IGtSZXR1cm5TdHJpbmdzW2NtZEluZGV4XTsKCiAgICBzd2l0Y2ggKGNvZGUpIHsKICAgICAgICBj
YXNlIEJSX1RSQU5TQUNUSU9OOgogICAgICAgIGNhc2UgQlJfUkVQTFk6IHsKICAgICAgICAgICAgb3V0
IDw8ICI6ICIgPDwgaW5kZW50OwogICAgICAgICAgICBjbWQgPSAoY29uc3QgaW50MzJfdCAqKXByaW50
QmluZGVyVHJhbnNhY3Rpb25EYXRhKG91dCwgY21kKTsKICAgICAgICAgICAgb3V0IDw8IGRlZGVudDsK
ICAgICAgICB9IGJyZWFrOwoKICAgICAgICBjYXNlIEJSX0FDUVVJUkVfUkVTVUxUOiB7CiAgICAgICAg
ICAgIGNvbnN0IGludDMyX3QgcmVzID0gKmNtZCsrOwogICAgICAgICAgICBvdXQgPDwgIjogIiA8PCBy
ZXMgPDwgKHJlcyA/ICIgKFNVQ0NFU1MpIiA6ICIgKEZBSUxVUkUpIik7CiAgICAgICAgfSBicmVhazsK
CiAgICAgICAgY2FzZSBCUl9JTkNSRUZTOgogICAgICAgIGNhc2UgQlJfQUNRVUlSRToKICAgICAgICBj
YXNlIEJSX1JFTEVBU0U6CiAgICAgICAgY2FzZSBCUl9ERUNSRUZTOiB7CiAgICAgICAgICAgIGNvbnN0
IGludDMyX3QgYiA9ICpjbWQrKzsKICAgICAgICAgICAgY29uc3QgaW50MzJfdCBjID0gKmNtZCsrOwog
ICAgICAgICAgICBvdXQgPDwgIjogdGFyZ2V0PSIgPDwgKHZvaWQqKShsb25nKWIgPDwgIiAoY29va2ll
ICIgPDwgKHZvaWQqKShsb25nKWMgPDwgIikiOwogICAgICAgIH0gYnJlYWs7CgogICAgICAgIGNhc2Ug
QlJfQVRURU1QVF9BQ1FVSVJFOiB7CiAgICAgICAgICAgIGNvbnN0IGludDMyX3QgcCA9ICpjbWQrKzsK
ICAgICAgICAgICAgY29uc3QgaW50MzJfdCBiID0gKmNtZCsrOwogICAgICAgICAgICBjb25zdCBpbnQz
Ml90IGMgPSAqY21kKys7CiAgICAgICAgICAgIG91dCA8PCAiOiB0YXJnZXQ9IiA8PCAodm9pZCopKGxv
bmcpYiA8PCAiIChjb29raWUgIiA8PCAodm9pZCopKGxvbmcpYwogICAgICAgICAgICAgICAgPDwgIiks
IHByaT0iIDw8IHA7CiAgICAgICAgfSBicmVhazsKCiAgICAgICAgY2FzZSBCUl9ERUFEX0JJTkRFUjoK
ICAgICAgICBjYXNlIEJSX0NMRUFSX0RFQVRIX05PVElGSUNBVElPTl9ET05FOiB7CiAgICAgICAgICAg
IGNvbnN0IGludDMyX3QgYyA9ICpjbWQrKzsKICAgICAgICAgICAgb3V0IDw8ICI6IGRlYXRoIGNvb2tp
ZSAiIDw8ICh2b2lkKikobG9uZyljOwogICAgICAgIH0gYnJlYWs7CgogICAgICAgIGRlZmF1bHQ6CiAg
ICAgICAgICAgIC8vIG5vIGRldGFpbHMgdG8gc2hvdyBmb3I6IEJSX09LLCBCUl9ERUFEX1JFUExZLAog
ICAgICAgICAgICAvLyBCUl9UUkFOU0FDVElPTl9DT01QTEVURSwgQlJfRklOSVNIRUQKICAgICAgICAg
ICAgYnJlYWs7CiAgICB9CgogICAgb3V0IDw8IGVuZGw7CiAgICByZXR1cm4gY21kOwp9CgpzdGF0aWMg
Y29uc3Qgdm9pZCogcHJpbnRDb21tYW5kKFRleHRPdXRwdXQmIG91dCwgY29uc3Qgdm9pZCogX2NtZCkK
ewogICAgc3RhdGljIGNvbnN0IHNpemVfdCBOID0gc2l6ZW9mKGtDb21tYW5kU3RyaW5ncykvc2l6ZW9m
KGtDb21tYW5kU3RyaW5nc1swXSk7CiAgICBjb25zdCBpbnQzMl90KiBjbWQgPSAoY29uc3QgaW50MzJf
dCopX2NtZDsKICAgIHVpbnQzMl90IGNvZGUgPSAodWludDMyX3QpKmNtZCsrOwogICAgc2l6ZV90IGNt
ZEluZGV4ID0gY29kZSAmIDB4ZmY7CgogICAgaWYgKGNtZEluZGV4ID49IE4pIHsKICAgICAgICBvdXQg
PDwgIlVua25vd24gY29tbWFuZDogIiA8PCBjb2RlIDw8IGVuZGw7CiAgICAgICAgcmV0dXJuIGNtZDsK
ICAgIH0KICAgIG91dCA8PCBrQ29tbWFuZFN0cmluZ3NbY21kSW5kZXhdOwoKICAgIHN3aXRjaCAoY29k
ZSkgewogICAgICAgIGNhc2UgQkNfVFJBTlNBQ1RJT046CiAgICAgICAgY2FzZSBCQ19SRVBMWTogewog
ICAgICAgICAgICBvdXQgPDwgIjogIiA8PCBpbmRlbnQ7CiAgICAgICAgICAgIGNtZCA9IChjb25zdCBp
bnQzMl90ICopcHJpbnRCaW5kZXJUcmFuc2FjdGlvbkRhdGEob3V0LCBjbWQpOwogICAgICAgICAgICBv
dXQgPDwgZGVkZW50OwogICAgICAgIH0gYnJlYWs7CgogICAgICAgIGNhc2UgQkNfQUNRVUlSRV9SRVNV
TFQ6IHsKICAgICAgICAgICAgY29uc3QgaW50MzJfdCByZXMgPSAqY21kKys7CiAgICAgICAgICAgIG91
dCA8PCAiOiAiIDw8IHJlcyA8PCAocmVzID8gIiAoU1VDQ0VTUykiIDogIiAoRkFJTFVSRSkiKTsKICAg
ICAgICB9IGJyZWFrOwoKICAgICAgICBjYXNlIEJDX0ZSRUVfQlVGRkVSOiB7CiAgICAgICAgICAgIGNv
bnN0IGludDMyX3QgYnVmID0gKmNtZCsrOwogICAgICAgICAgICBvdXQgPDwgIjogYnVmZmVyPSIgPDwg
KHZvaWQqKShsb25nKWJ1ZjsKICAgICAgICB9IGJyZWFrOwoKICAgICAgICBjYXNlIEJDX0lOQ1JFRlM6
CiAgICAgICAgY2FzZSBCQ19BQ1FVSVJFOgogICAgICAgIGNhc2UgQkNfUkVMRUFTRToKICAgICAgICBj
YXNlIEJDX0RFQ1JFRlM6IHsKICAgICAgICAgICAgY29uc3QgaW50MzJfdCBkID0gKmNtZCsrOwogICAg
ICAgICAgICBvdXQgPDwgIjogZGVzYz0iIDw8IGQ7CiAgICAgICAgfSBicmVhazsKCiAgICAgICAgY2Fz
ZSBCQ19JTkNSRUZTX0RPTkU6CiAgICAgICAgY2FzZSBCQ19BQ1FVSVJFX0RPTkU6IHsKICAgICAgICAg
ICAgY29uc3QgaW50MzJfdCBiID0gKmNtZCsrOwogICAgICAgICAgICBjb25zdCBpbnQzMl90IGMgPSAq
Y21kKys7CiAgICAgICAgICAgIG91dCA8PCAiOiB0YXJnZXQ9IiA8PCAodm9pZCopKGxvbmcpYiA8PCAi
IChjb29raWUgIiA8PCAodm9pZCopKGxvbmcpYyA8PCAiKSI7CiAgICAgICAgfSBicmVhazsKCiAgICAg
ICAgY2FzZSBCQ19BVFRFTVBUX0FDUVVJUkU6IHsKICAgICAgICAgICAgY29uc3QgaW50MzJfdCBwID0g
KmNtZCsrOwogICAgICAgICAgICBjb25zdCBpbnQzMl90IGQgPSAqY21kKys7CiAgICAgICAgICAgIG91
dCA8PCAiOiBkZXNjPSIgPDwgZCA8PCAiLCBwcmk9IiA8PCBwOwogICAgICAgIH0gYnJlYWs7CgogICAg
ICAgIGNhc2UgQkNfUkVRVUVTVF9ERUFUSF9OT1RJRklDQVRJT046CiAgICAgICAgY2FzZSBCQ19DTEVB
Ul9ERUFUSF9OT1RJRklDQVRJT046IHsKICAgICAgICAgICAgY29uc3QgaW50MzJfdCBoID0gKmNtZCsr
OwogICAgICAgICAgICBjb25zdCBpbnQzMl90IGMgPSAqY21kKys7CiAgICAgICAgICAgIG91dCA8PCAi
OiBoYW5kbGU9IiA8PCBoIDw8ICIgKGRlYXRoIGNvb2tpZSAiIDw8ICh2b2lkKikobG9uZyljIDw8ICIp
IjsKICAgICAgICB9IGJyZWFrOwoKICAgICAgICBjYXNlIEJDX0RFQURfQklOREVSX0RPTkU6IHsKICAg
ICAgICAgICAgY29uc3QgaW50MzJfdCBjID0gKmNtZCsrOwogICAgICAgICAgICBvdXQgPDwgIjogZGVh
dGggY29va2llICIgPDwgKHZvaWQqKShsb25nKWM7CiAgICAgICAgfSBicmVhazsKCiAgICAgICAgZGVm
YXVsdDoKICAgICAgICAgICAgLy8gbm8gZGV0YWlscyB0byBzaG93IGZvcjogQkNfUkVHSVNURVJfTE9P
UEVSLCBCQ19FTlRFUl9MT09QRVIsCiAgICAgICAgICAgIC8vIEJDX0VYSVRfTE9PUEVSCiAgICAgICAg
ICAgIGJyZWFrOwogICAgfQoKICAgIG91dCA8PCBlbmRsOwogICAgcmV0dXJuIGNtZDsKfQoKc3RhdGlj
IHB0aHJlYWRfbXV0ZXhfdCBnVExTTXV0ZXggPSBQVEhSRUFEX01VVEVYX0lOSVRJQUxJWkVSOwpzdGF0
aWMgYm9vbCBnSGF2ZVRMUyA9IGZhbHNlOwpzdGF0aWMgcHRocmVhZF9rZXlfdCBnVExTID0gMDsKc3Rh
dGljIGJvb2wgZ1NodXRkb3duID0gZmFsc2U7CnN0YXRpYyBib29sIGdEaXNhYmxlQmFja2dyb3VuZFNj
aGVkdWxpbmcgPSBmYWxzZTsKCklQQ1RocmVhZFN0YXRlKiBJUENUaHJlYWRTdGF0ZTo6c2VsZigpCnsK
ICAgIGlmIChnSGF2ZVRMUykgewpyZXN0YXJ0OgogICAgICAgIGNvbnN0IHB0aHJlYWRfa2V5X3QgayA9
IGdUTFM7CiAgICAgICAgSVBDVGhyZWFkU3RhdGUqIHN0ID0gKElQQ1RocmVhZFN0YXRlKilwdGhyZWFk
X2dldHNwZWNpZmljKGspOwogICAgICAgIGlmIChzdCkgcmV0dXJuIHN0OwogICAgICAgIHJldHVybiBu
ZXcgSVBDVGhyZWFkU3RhdGU7CiAgICB9CgogICAgaWYgKGdTaHV0ZG93bikgewogICAgICAgIEFMT0dX
KCJDYWxsaW5nIElQQ1RocmVhZFN0YXRlOjpzZWxmKCkgZHVyaW5nIHNodXRkb3duIGlzIGRhbmdlcm91
cywgZXhwZWN0IGEgY3Jhc2guXG4iKTsKICAgICAgICByZXR1cm4gTlVMTDsKICAgIH0KCiAgICBwdGhy
ZWFkX211dGV4X2xvY2soJmdUTFNNdXRleCk7CiAgICBpZiAoIWdIYXZlVExTKSB7CiAgICAgICAgaW50
IGtleV9jcmVhdGVfdmFsdWUgPSBwdGhyZWFkX2tleV9jcmVhdGUoJmdUTFMsIHRocmVhZERlc3RydWN0
b3IpOwogICAgICAgIGlmIChrZXlfY3JlYXRlX3ZhbHVlICE9IDApIHsKICAgICAgICAgICAgcHRocmVh
ZF9tdXRleF91bmxvY2soJmdUTFNNdXRleCk7CiAgICAgICAgICAgIEFMT0dXKCJJUENUaHJlYWRTdGF0
ZTo6c2VsZigpIHVuYWJsZSB0byBjcmVhdGUgVExTIGtleSwgZXhwZWN0IGEgY3Jhc2g6ICVzXG4iLAog
ICAgICAgICAgICAgICAgICAgIHN0cmVycm9yKGtleV9jcmVhdGVfdmFsdWUpKTsKICAgICAgICAgICAg
cmV0dXJuIE5VTEw7CiAgICAgICAgfQogICAgICAgIGdIYXZlVExTID0gdHJ1ZTsKICAgIH0KICAgIHB0
aHJlYWRfbXV0ZXhfdW5sb2NrKCZnVExTTXV0ZXgpOwogICAgZ290byByZXN0YXJ0Owp9CgpJUENUaHJl
YWRTdGF0ZSogSVBDVGhyZWFkU3RhdGU6OnNlbGZPck51bGwoKQp7CiAgICBpZiAoZ0hhdmVUTFMpIHsK
ICAgICAgICBjb25zdCBwdGhyZWFkX2tleV90IGsgPSBnVExTOwogICAgICAgIElQQ1RocmVhZFN0YXRl
KiBzdCA9IChJUENUaHJlYWRTdGF0ZSopcHRocmVhZF9nZXRzcGVjaWZpYyhrKTsKICAgICAgICByZXR1
cm4gc3Q7CiAgICB9CiAgICByZXR1cm4gTlVMTDsKfQoKdm9pZCBJUENUaHJlYWRTdGF0ZTo6c2h1dGRv
d24oKQp7CiAgICBnU2h1dGRvd24gPSB0cnVlOwoKICAgIGlmIChnSGF2ZVRMUykgewogICAgICAgIC8v
IFhYWCBOZWVkIHRvIHdhaXQgZm9yIGFsbCB0aHJlYWQgcG9vbCB0aHJlYWRzIHRvIGV4aXQhCiAgICAg
ICAgSVBDVGhyZWFkU3RhdGUqIHN0ID0gKElQQ1RocmVhZFN0YXRlKilwdGhyZWFkX2dldHNwZWNpZmlj
KGdUTFMpOwogICAgICAgIGlmIChzdCkgewogICAgICAgICAgICBkZWxldGUgc3Q7CiAgICAgICAgICAg
IHB0aHJlYWRfc2V0c3BlY2lmaWMoZ1RMUywgTlVMTCk7CiAgICAgICAgfQogICAgICAgIHB0aHJlYWRf
a2V5X2RlbGV0ZShnVExTKTsKICAgICAgICBnSGF2ZVRMUyA9IGZhbHNlOwogICAgfQp9Cgp2b2lkIElQ
Q1RocmVhZFN0YXRlOjpkaXNhYmxlQmFja2dyb3VuZFNjaGVkdWxpbmcoYm9vbCBkaXNhYmxlKQp7CiAg
ICBnRGlzYWJsZUJhY2tncm91bmRTY2hlZHVsaW5nID0gZGlzYWJsZTsKfQoKYm9vbCBJUENUaHJlYWRT
dGF0ZTo6YmFja2dyb3VuZFNjaGVkdWxpbmdEaXNhYmxlZCgpCnsKICAgIHJldHVybiBnRGlzYWJsZUJh
Y2tncm91bmRTY2hlZHVsaW5nOwp9CgpzcDxQcm9jZXNzU3RhdGU+IElQQ1RocmVhZFN0YXRlOjpwcm9j
ZXNzKCkKewogICAgcmV0dXJuIG1Qcm9jZXNzOwp9CgpzdGF0dXNfdCBJUENUaHJlYWRTdGF0ZTo6Y2xl
YXJMYXN0RXJyb3IoKQp7CiAgICBjb25zdCBzdGF0dXNfdCBlcnIgPSBtTGFzdEVycm9yOwogICAgbUxh
c3RFcnJvciA9IE5PX0VSUk9SOwogICAgcmV0dXJuIGVycjsKfQoKcGlkX3QgSVBDVGhyZWFkU3RhdGU6
OmdldENhbGxpbmdQaWQoKSBjb25zdAp7CiAgICByZXR1cm4gbUNhbGxpbmdQaWQ7Cn0KCnVpZF90IElQ
Q1RocmVhZFN0YXRlOjpnZXRDYWxsaW5nVWlkKCkgY29uc3QKewogICAgcmV0dXJuIG1DYWxsaW5nVWlk
Owp9CgppbnQ2NF90IElQQ1RocmVhZFN0YXRlOjpjbGVhckNhbGxpbmdJZGVudGl0eSgpCnsKICAgIGlu
dDY0X3QgdG9rZW4gPSAoKGludDY0X3QpbUNhbGxpbmdVaWQ8PDMyKSB8IG1DYWxsaW5nUGlkOwogICAg
Y2xlYXJDYWxsZXIoKTsKICAgIHJldHVybiB0b2tlbjsKfQoKdm9pZCBJUENUaHJlYWRTdGF0ZTo6c2V0
U3RyaWN0TW9kZVBvbGljeShpbnQzMl90IHBvbGljeSkKewogICAgbVN0cmljdE1vZGVQb2xpY3kgPSBw
b2xpY3k7Cn0KCmludDMyX3QgSVBDVGhyZWFkU3RhdGU6OmdldFN0cmljdE1vZGVQb2xpY3koKSBjb25z
dAp7CiAgICByZXR1cm4gbVN0cmljdE1vZGVQb2xpY3k7Cn0KCnZvaWQgSVBDVGhyZWFkU3RhdGU6OnNl
dExhc3RUcmFuc2FjdGlvbkJpbmRlckZsYWdzKGludDMyX3QgZmxhZ3MpCnsKICAgIG1MYXN0VHJhbnNh
Y3Rpb25CaW5kZXJGbGFncyA9IGZsYWdzOwp9CgppbnQzMl90IElQQ1RocmVhZFN0YXRlOjpnZXRMYXN0
VHJhbnNhY3Rpb25CaW5kZXJGbGFncygpIGNvbnN0CnsKICAgIHJldHVybiBtTGFzdFRyYW5zYWN0aW9u
QmluZGVyRmxhZ3M7Cn0KCnZvaWQgSVBDVGhyZWFkU3RhdGU6OnJlc3RvcmVDYWxsaW5nSWRlbnRpdHko
aW50NjRfdCB0b2tlbikKewogICAgbUNhbGxpbmdVaWQgPSAoaW50KSh0b2tlbj4+MzIpOwogICAgbUNh
bGxpbmdQaWQgPSAoaW50KXRva2VuOwp9Cgp2b2lkIElQQ1RocmVhZFN0YXRlOjpjbGVhckNhbGxlcigp
CnsKICAgIG1DYWxsaW5nUGlkID0gZ2V0cGlkKCk7CiAgICBtQ2FsbGluZ1VpZCA9IGdldHVpZCgpOwp9
Cgp2b2lkIElQQ1RocmVhZFN0YXRlOjpmbHVzaENvbW1hbmRzKCkKewogICAgaWYgKG1Qcm9jZXNzLT5t
RHJpdmVyRkQgPD0gMCkKICAgICAgICByZXR1cm47CiAgICB0YWxrV2l0aERyaXZlcihmYWxzZSk7Cn0K
CnZvaWQgSVBDVGhyZWFkU3RhdGU6OmJsb2NrVW50aWxUaHJlYWRBdmFpbGFibGUoKQp7CiAgICBwdGhy
ZWFkX211dGV4X2xvY2soJm1Qcm9jZXNzLT5tVGhyZWFkQ291bnRMb2NrKTsKICAgIHdoaWxlIChtUHJv
Y2Vzcy0+bUV4ZWN1dGluZ1RocmVhZHNDb3VudCA+PSBtUHJvY2Vzcy0+bU1heFRocmVhZHMpIHsKICAg
ICAgICBBTE9HVygiV2FpdGluZyBmb3IgdGhyZWFkIHRvIGJlIGZyZWUuIG1FeGVjdXRpbmdUaHJlYWRz
Q291bnQ9JWx1IG1NYXhUaHJlYWRzPSVsdVxuIiwKICAgICAgICAgICAgICAgIHN0YXRpY19jYXN0PHVu
c2lnbmVkIGxvbmc+KG1Qcm9jZXNzLT5tRXhlY3V0aW5nVGhyZWFkc0NvdW50KSwKICAgICAgICAgICAg
ICAgIHN0YXRpY19jYXN0PHVuc2lnbmVkIGxvbmc+KG1Qcm9jZXNzLT5tTWF4VGhyZWFkcykpOwogICAg
ICAgIHB0aHJlYWRfY29uZF93YWl0KCZtUHJvY2Vzcy0+bVRocmVhZENvdW50RGVjcmVtZW50LCAmbVBy
b2Nlc3MtPm1UaHJlYWRDb3VudExvY2spOwogICAgfQogICAgcHRocmVhZF9tdXRleF91bmxvY2soJm1Q
cm9jZXNzLT5tVGhyZWFkQ291bnRMb2NrKTsKfQoKc3RhdHVzX3QgSVBDVGhyZWFkU3RhdGU6OmdldEFu
ZEV4ZWN1dGVDb21tYW5kKCkKewogICAgc3RhdHVzX3QgcmVzdWx0OwogICAgaW50MzJfdCBjbWQ7Cgog
ICAgcmVzdWx0ID0gdGFsa1dpdGhEcml2ZXIoKTsKICAgIGlmIChyZXN1bHQgPj0gTk9fRVJST1IpIHsK
ICAgICAgICBzaXplX3QgSU4gPSBtSW4uZGF0YUF2YWlsKCk7CiAgICAgICAgaWYgKElOIDwgc2l6ZW9m
KGludDMyX3QpKSByZXR1cm4gcmVzdWx0OwogICAgICAgIGNtZCA9IG1Jbi5yZWFkSW50MzIoKTsKICAg
ICAgICBJRl9MT0dfQ09NTUFORFMoKSB7CiAgICAgICAgICAgIGFsb2cgPDwgIlByb2Nlc3NpbmcgdG9w
LWxldmVsIENvbW1hbmQ6ICIKICAgICAgICAgICAgICAgICA8PCBnZXRSZXR1cm5TdHJpbmcoY21kKSA8
PCBlbmRsOwogICAgICAgIH0KCiAgICAgICAgcHRocmVhZF9tdXRleF9sb2NrKCZtUHJvY2Vzcy0+bVRo
cmVhZENvdW50TG9jayk7CiAgICAgICAgbVByb2Nlc3MtPm1FeGVjdXRpbmdUaHJlYWRzQ291bnQrKzsK
ICAgICAgICBpZiAobVByb2Nlc3MtPm1FeGVjdXRpbmdUaHJlYWRzQ291bnQgPj0gbVByb2Nlc3MtPm1N
YXhUaHJlYWRzICYmCiAgICAgICAgICAgICAgICBtUHJvY2Vzcy0+bVN0YXJ2YXRpb25TdGFydFRpbWVN
cyA9PSAwKSB7CiAgICAgICAgICAgIG1Qcm9jZXNzLT5tU3RhcnZhdGlvblN0YXJ0VGltZU1zID0gdXB0
aW1lTWlsbGlzKCk7CiAgICAgICAgfQogICAgICAgIHB0aHJlYWRfbXV0ZXhfdW5sb2NrKCZtUHJvY2Vz
cy0+bVRocmVhZENvdW50TG9jayk7CgogICAgICAgIHJlc3VsdCA9IGV4ZWN1dGVDb21tYW5kKGNtZCk7
CgogICAgICAgIHB0aHJlYWRfbXV0ZXhfbG9jaygmbVByb2Nlc3MtPm1UaHJlYWRDb3VudExvY2spOwog
ICAgICAgIG1Qcm9jZXNzLT5tRXhlY3V0aW5nVGhyZWFkc0NvdW50LS07CiAgICAgICAgaWYgKG1Qcm9j
ZXNzLT5tRXhlY3V0aW5nVGhyZWFkc0NvdW50IDwgbVByb2Nlc3MtPm1NYXhUaHJlYWRzICYmCiAgICAg
ICAgICAgICAgICBtUHJvY2Vzcy0+bVN0YXJ2YXRpb25TdGFydFRpbWVNcyAhPSAwKSB7CiAgICAgICAg
ICAgIGludDY0X3Qgc3RhcnZhdGlvblRpbWVNcyA9IHVwdGltZU1pbGxpcygpIC0gbVByb2Nlc3MtPm1T
dGFydmF0aW9uU3RhcnRUaW1lTXM7CiAgICAgICAgICAgIGlmIChzdGFydmF0aW9uVGltZU1zID4gMTAw
KSB7CiAgICAgICAgICAgICAgICBBTE9HRSgiYmluZGVyIHRocmVhZCBwb29sICglenUgdGhyZWFkcykg
c3RhcnZlZCBmb3IgJSIgUFJJZDY0ICIgbXMiLAogICAgICAgICAgICAgICAgICAgICAgbVByb2Nlc3Mt
Pm1NYXhUaHJlYWRzLCBzdGFydmF0aW9uVGltZU1zKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBt
UHJvY2Vzcy0+bVN0YXJ2YXRpb25TdGFydFRpbWVNcyA9IDA7CiAgICAgICAgfQogICAgICAgIHB0aHJl
YWRfY29uZF9icm9hZGNhc3QoJm1Qcm9jZXNzLT5tVGhyZWFkQ291bnREZWNyZW1lbnQpOwogICAgICAg
IHB0aHJlYWRfbXV0ZXhfdW5sb2NrKCZtUHJvY2Vzcy0+bVRocmVhZENvdW50TG9jayk7CiAgICB9Cgog
ICAgcmV0dXJuIHJlc3VsdDsKfQoKLy8gV2hlbiB3ZSd2ZSBjbGVhcmVkIHRoZSBpbmNvbWluZyBjb21t
YW5kIHF1ZXVlLCBwcm9jZXNzIGFueSBwZW5kaW5nIGRlcmVmcwp2b2lkIElQQ1RocmVhZFN0YXRlOjpw
cm9jZXNzUGVuZGluZ0RlcmVmcygpCnsKICAgIGlmIChtSW4uZGF0YVBvc2l0aW9uKCkgPj0gbUluLmRh
dGFTaXplKCkpIHsKICAgICAgICBzaXplX3QgbnVtUGVuZGluZyA9IG1QZW5kaW5nV2Vha0RlcmVmcy5z
aXplKCk7CiAgICAgICAgaWYgKG51bVBlbmRpbmcgPiAwKSB7CiAgICAgICAgICAgIGZvciAoc2l6ZV90
IGkgPSAwOyBpIDwgbnVtUGVuZGluZzsgaSsrKSB7CiAgICAgICAgICAgICAgICBSZWZCYXNlOjp3ZWFr
cmVmX3R5cGUqIHJlZnMgPSBtUGVuZGluZ1dlYWtEZXJlZnNbaV07CiAgICAgICAgICAgICAgICByZWZz
LT5kZWNXZWFrKG1Qcm9jZXNzLmdldCgpKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBtUGVuZGlu
Z1dlYWtEZXJlZnMuY2xlYXIoKTsKICAgICAgICB9CgogICAgICAgIG51bVBlbmRpbmcgPSBtUGVuZGlu
Z1N0cm9uZ0RlcmVmcy5zaXplKCk7CiAgICAgICAgaWYgKG51bVBlbmRpbmcgPiAwKSB7CiAgICAgICAg
ICAgIGZvciAoc2l6ZV90IGkgPSAwOyBpIDwgbnVtUGVuZGluZzsgaSsrKSB7CiAgICAgICAgICAgICAg
ICBCQmluZGVyKiBvYmogPSBtUGVuZGluZ1N0cm9uZ0RlcmVmc1tpXTsKICAgICAgICAgICAgICAgIG9i
ai0+ZGVjU3Ryb25nKG1Qcm9jZXNzLmdldCgpKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBtUGVu
ZGluZ1N0cm9uZ0RlcmVmcy5jbGVhcigpOwogICAgICAgIH0KICAgIH0KfQoKdm9pZCBJUENUaHJlYWRT
dGF0ZTo6am9pblRocmVhZFBvb2woYm9vbCBpc01haW4pCnsKICAgIExPR19USFJFQURQT09MKCIqKioq
IFRIUkVBRCAlcCAoUElEICVkKSBJUyBKT0lOSU5HIFRIRSBUSFJFQUQgUE9PTFxuIiwgKHZvaWQqKXB0
aHJlYWRfc2VsZigpLCBnZXRwaWQoKSk7CgogICAgbU91dC53cml0ZUludDMyKGlzTWFpbiA/IEJDX0VO
VEVSX0xPT1BFUiA6IEJDX1JFR0lTVEVSX0xPT1BFUik7CgogICAgc3RhdHVzX3QgcmVzdWx0OwogICAg
ZG8gewogICAgICAgIHByb2Nlc3NQZW5kaW5nRGVyZWZzKCk7CiAgICAgICAgLy8gbm93IGdldCB0aGUg
bmV4dCBjb21tYW5kIHRvIGJlIHByb2Nlc3NlZCwgd2FpdGluZyBpZiBuZWNlc3NhcnkKICAgICAgICBy
ZXN1bHQgPSBnZXRBbmRFeGVjdXRlQ29tbWFuZCgpOwoKICAgICAgICBpZiAocmVzdWx0IDwgTk9fRVJS
T1IgJiYgcmVzdWx0ICE9IFRJTUVEX09VVCAmJiByZXN1bHQgIT0gLUVDT05OUkVGVVNFRCAmJiByZXN1
bHQgIT0gLUVCQURGKSB7CiAgICAgICAgICAgIEFMT0dFKCJnZXRBbmRFeGVjdXRlQ29tbWFuZChmZD0l
ZCkgcmV0dXJuZWQgdW5leHBlY3RlZCBlcnJvciAlZCwgYWJvcnRpbmciLAogICAgICAgICAgICAgICAg
ICBtUHJvY2Vzcy0+bURyaXZlckZELCByZXN1bHQpOwogICAgICAgICAgICBhYm9ydCgpOwogICAgICAg
IH0KCiAgICAgICAgLy8gTGV0IHRoaXMgdGhyZWFkIGV4aXQgdGhlIHRocmVhZCBwb29sIGlmIGl0IGlz
IG5vIGxvbmdlcgogICAgICAgIC8vIG5lZWRlZCBhbmQgaXQgaXMgbm90IHRoZSBtYWluIHByb2Nlc3Mg
dGhyZWFkLgogICAgICAgIGlmKHJlc3VsdCA9PSBUSU1FRF9PVVQgJiYgIWlzTWFpbikgewogICAgICAg
ICAgICBicmVhazsKICAgICAgICB9CiAgICB9IHdoaWxlIChyZXN1bHQgIT0gLUVDT05OUkVGVVNFRCAm
JiByZXN1bHQgIT0gLUVCQURGKTsKCiAgICBMT0dfVEhSRUFEUE9PTCgiKioqKiBUSFJFQUQgJXAgKFBJ
RCAlZCkgSVMgTEVBVklORyBUSEUgVEhSRUFEIFBPT0wgZXJyPSVkXG4iLAogICAgICAgICh2b2lkKilw
dGhyZWFkX3NlbGYoKSwgZ2V0cGlkKCksIHJlc3VsdCk7CgogICAgbU91dC53cml0ZUludDMyKEJDX0VY
SVRfTE9PUEVSKTsKICAgIHRhbGtXaXRoRHJpdmVyKGZhbHNlKTsKfQoKaW50IElQQ1RocmVhZFN0YXRl
OjpzZXR1cFBvbGxpbmcoaW50KiBmZCkKewogICAgaWYgKG1Qcm9jZXNzLT5tRHJpdmVyRkQgPD0gMCkg
ewogICAgICAgIHJldHVybiAtRUJBREY7CiAgICB9CgogICAgbU91dC53cml0ZUludDMyKEJDX0VOVEVS
X0xPT1BFUik7CiAgICAqZmQgPSBtUHJvY2Vzcy0+bURyaXZlckZEOwogICAgcmV0dXJuIDA7Cn0KCnN0
YXR1c190IElQQ1RocmVhZFN0YXRlOjpoYW5kbGVQb2xsZWRDb21tYW5kcygpCnsKICAgIHN0YXR1c190
IHJlc3VsdDsKCiAgICBkbyB7CiAgICAgICAgcmVzdWx0ID0gZ2V0QW5kRXhlY3V0ZUNvbW1hbmQoKTsK
ICAgIH0gd2hpbGUgKG1Jbi5kYXRhUG9zaXRpb24oKSA8IG1Jbi5kYXRhU2l6ZSgpKTsKCiAgICBwcm9j
ZXNzUGVuZGluZ0RlcmVmcygpOwogICAgZmx1c2hDb21tYW5kcygpOwogICAgcmV0dXJuIHJlc3VsdDsK
fQoKdm9pZCBJUENUaHJlYWRTdGF0ZTo6c3RvcFByb2Nlc3MoYm9vbCAvKmltbWVkaWF0ZSovKQp7CiAg
ICAvL0FMT0dJKCIqKioqIFNUT1BQSU5HIFBST0NFU1MiKTsKICAgIGZsdXNoQ29tbWFuZHMoKTsKICAg
IGludCBmZCA9IG1Qcm9jZXNzLT5tRHJpdmVyRkQ7CiAgICBtUHJvY2Vzcy0+bURyaXZlckZEID0gLTE7
CiAgICBjbG9zZShmZCk7CiAgICAvL2tpbGwoZ2V0cGlkKCksIFNJR0tJTEwpOwp9CgpzdGF0dXNfdCBJ
UENUaHJlYWRTdGF0ZTo6dHJhbnNhY3QoaW50MzJfdCBoYW5kbGUsCiAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICB1aW50MzJfdCBjb2RlLCBjb25zdCBQYXJjZWwmIGRhdGEsCiAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICBQYXJjZWwqIHJlcGx5LCB1aW50MzJfdCBmbGFncykKewogICAg
c3RhdHVzX3QgZXJyID0gZGF0YS5lcnJvckNoZWNrKCk7CgogICAgZmxhZ3MgfD0gVEZfQUNDRVBUX0ZE
UzsKCiAgICBJRl9MT0dfVFJBTlNBQ1RJT05TKCkgewogICAgICAgIFRleHRPdXRwdXQ6OkJ1bmRsZSBf
YihhbG9nKTsKICAgICAgICBhbG9nIDw8ICJCQ19UUkFOU0FDVElPTiB0aHIgIiA8PCAodm9pZCopcHRo
cmVhZF9zZWxmKCkgPDwgIiAvIGhhbmQgIgogICAgICAgICAgICA8PCBoYW5kbGUgPDwgIiAvIGNvZGUg
IiA8PCBUeXBlQ29kZShjb2RlKSA8PCAiOiAiCiAgICAgICAgICAgIDw8IGluZGVudCA8PCBkYXRhIDw8
IGRlZGVudCA8PCBlbmRsOwogICAgfQoKICAgIGlmIChlcnIgPT0gTk9fRVJST1IpIHsKICAgICAgICBM
T0dfT05FV0FZKCI+Pj4+IFNFTkQgZnJvbSBwaWQgJWQgdWlkICVkICVzIiwgZ2V0cGlkKCksIGdldHVp
ZCgpLAogICAgICAgICAgICAoZmxhZ3MgJiBURl9PTkVfV0FZKSA9PSAwID8gIlJFQUQgUkVQTFkiIDog
Ik9ORSBXQVkiKTsKICAgICAgICBlcnIgPSB3cml0ZVRyYW5zYWN0aW9uRGF0YShCQ19UUkFOU0FDVElP
TiwgZmxhZ3MsIGhhbmRsZSwgY29kZSwgZGF0YSwgTlVMTCk7CiAgICB9CgogICAgaWYgKGVyciAhPSBO
T19FUlJPUikgewogICAgICAgIGlmIChyZXBseSkgcmVwbHktPnNldEVycm9yKGVycik7CiAgICAgICAg
cmV0dXJuIChtTGFzdEVycm9yID0gZXJyKTsKICAgIH0KCiAgICBpZiAoKGZsYWdzICYgVEZfT05FX1dB
WSkgPT0gMCkgewogICAgICAgICNpZiAwCiAgICAgICAgaWYgKGNvZGUgPT0gNCkgeyAvLyByZWxheW91
dAogICAgICAgICAgICBBTE9HSSgiPj4+Pj4+IENBTExJTkcgdHJhbnNhY3Rpb24gNCIpOwogICAgICAg
IH0gZWxzZSB7CiAgICAgICAgICAgIEFMT0dJKCI+Pj4+Pj4gQ0FMTElORyB0cmFuc2FjdGlvbiAlZCIs
IGNvZGUpOwogICAgICAgIH0KICAgICAgICAjZW5kaWYKICAgICAgICBpZiAocmVwbHkpIHsKICAgICAg
ICAgICAgZXJyID0gd2FpdEZvclJlc3BvbnNlKHJlcGx5KTsKICAgICAgICB9IGVsc2UgewogICAgICAg
ICAgICBQYXJjZWwgZmFrZVJlcGx5OwogICAgICAgICAgICBlcnIgPSB3YWl0Rm9yUmVzcG9uc2UoJmZh
a2VSZXBseSk7CiAgICAgICAgfQogICAgICAgICNpZiAwCiAgICAgICAgaWYgKGNvZGUgPT0gNCkgeyAv
LyByZWxheW91dAogICAgICAgICAgICBBTE9HSSgiPDw8PDw8IFJFVFVSTklORyB0cmFuc2FjdGlvbiA0
Iik7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgQUxPR0koIjw8PDw8PCBSRVRVUk5JTkcgdHJh
bnNhY3Rpb24gJWQiLCBjb2RlKTsKICAgICAgICB9CiAgICAgICAgI2VuZGlmCgogICAgICAgIElGX0xP
R19UUkFOU0FDVElPTlMoKSB7CiAgICAgICAgICAgIFRleHRPdXRwdXQ6OkJ1bmRsZSBfYihhbG9nKTsK
ICAgICAgICAgICAgYWxvZyA8PCAiQlJfUkVQTFkgdGhyICIgPDwgKHZvaWQqKXB0aHJlYWRfc2VsZigp
IDw8ICIgLyBoYW5kICIKICAgICAgICAgICAgICAgIDw8IGhhbmRsZSA8PCAiOiAiOwogICAgICAgICAg
ICBpZiAocmVwbHkpIGFsb2cgPDwgaW5kZW50IDw8ICpyZXBseSA8PCBkZWRlbnQgPDwgZW5kbDsKICAg
ICAgICAgICAgZWxzZSBhbG9nIDw8ICIobm9uZSByZXF1ZXN0ZWQpIiA8PCBlbmRsOwogICAgICAgIH0K
ICAgIH0gZWxzZSB7CiAgICAgICAgZXJyID0gd2FpdEZvclJlc3BvbnNlKE5VTEwsIE5VTEwpOwogICAg
fQoKICAgIHJldHVybiBlcnI7Cn0KCnZvaWQgSVBDVGhyZWFkU3RhdGU6OmluY1N0cm9uZ0hhbmRsZShp
bnQzMl90IGhhbmRsZSkKewogICAgTE9HX1JFTU9URVJFRlMoIklQQ1RocmVhZFN0YXRlOjppbmNTdHJv
bmdIYW5kbGUoJWQpXG4iLCBoYW5kbGUpOwogICAgbU91dC53cml0ZUludDMyKEJDX0FDUVVJUkUpOwog
ICAgbU91dC53cml0ZUludDMyKGhhbmRsZSk7Cn0KCnZvaWQgSVBDVGhyZWFkU3RhdGU6OmRlY1N0cm9u
Z0hhbmRsZShpbnQzMl90IGhhbmRsZSkKewogICAgTE9HX1JFTU9URVJFRlMoIklQQ1RocmVhZFN0YXRl
OjpkZWNTdHJvbmdIYW5kbGUoJWQpXG4iLCBoYW5kbGUpOwogICAgbU91dC53cml0ZUludDMyKEJDX1JF
TEVBU0UpOwogICAgbU91dC53cml0ZUludDMyKGhhbmRsZSk7Cn0KCnZvaWQgSVBDVGhyZWFkU3RhdGU6
OmluY1dlYWtIYW5kbGUoaW50MzJfdCBoYW5kbGUpCnsKICAgIExPR19SRU1PVEVSRUZTKCJJUENUaHJl
YWRTdGF0ZTo6aW5jV2Vha0hhbmRsZSglZClcbiIsIGhhbmRsZSk7CiAgICBtT3V0LndyaXRlSW50MzIo
QkNfSU5DUkVGUyk7CiAgICBtT3V0LndyaXRlSW50MzIoaGFuZGxlKTsKfQoKdm9pZCBJUENUaHJlYWRT
dGF0ZTo6ZGVjV2Vha0hhbmRsZShpbnQzMl90IGhhbmRsZSkKewogICAgTE9HX1JFTU9URVJFRlMoIklQ
Q1RocmVhZFN0YXRlOjpkZWNXZWFrSGFuZGxlKCVkKVxuIiwgaGFuZGxlKTsKICAgIG1PdXQud3JpdGVJ
bnQzMihCQ19ERUNSRUZTKTsKICAgIG1PdXQud3JpdGVJbnQzMihoYW5kbGUpOwp9CgpzdGF0dXNfdCBJ
UENUaHJlYWRTdGF0ZTo6YXR0ZW1wdEluY1N0cm9uZ0hhbmRsZShpbnQzMl90IGhhbmRsZSkKewojaWYg
SEFTX0JDX0FUVEVNUFRfQUNRVUlSRQogICAgTE9HX1JFTU9URVJFRlMoIklQQ1RocmVhZFN0YXRlOjph
dHRlbXB0SW5jU3Ryb25nSGFuZGxlKCVkKVxuIiwgaGFuZGxlKTsKICAgIG1PdXQud3JpdGVJbnQzMihC
Q19BVFRFTVBUX0FDUVVJUkUpOwogICAgbU91dC53cml0ZUludDMyKDApOyAvLyB4eHggd2FzIHRocmVh
ZCBwcmlvcml0eQogICAgbU91dC53cml0ZUludDMyKGhhbmRsZSk7CiAgICBzdGF0dXNfdCByZXN1bHQg
PSBVTktOT1dOX0VSUk9SOwoKICAgIHdhaXRGb3JSZXNwb25zZShOVUxMLCAmcmVzdWx0KTsKCiNpZiBM
T0dfUkVGQ09VTlRTCiAgICBBTE9HVigiSVBDVGhyZWFkU3RhdGU6OmF0dGVtcHRJbmNTdHJvbmdIYW5k
bGUoJWxkKSA9ICVzXG4iLAogICAgICAgIGhhbmRsZSwgcmVzdWx0ID09IE5PX0VSUk9SID8gIlNVQ0NF
U1MiIDogIkZBSUxVUkUiKTsKI2VuZGlmCgogICAgcmV0dXJuIHJlc3VsdDsKI2Vsc2UKICAgICh2b2lk
KWhhbmRsZTsKICAgIEFMT0dFKCIlcyglZCk6IE5vdCBzdXBwb3J0ZWRcbiIsIF9fZnVuY19fLCBoYW5k
bGUpOwogICAgcmV0dXJuIElOVkFMSURfT1BFUkFUSU9OOwojZW5kaWYKfQoKdm9pZCBJUENUaHJlYWRT
dGF0ZTo6ZXhwdW5nZUhhbmRsZShpbnQzMl90IGhhbmRsZSwgSUJpbmRlciogYmluZGVyKQp7CiNpZiBM
T0dfUkVGQ09VTlRTCiAgICBBTE9HVigiSVBDVGhyZWFkU3RhdGU6OmV4cHVuZ2VIYW5kbGUoJWxkKVxu
IiwgaGFuZGxlKTsKI2VuZGlmCiAgICBzZWxmKCktPm1Qcm9jZXNzLT5leHB1bmdlSGFuZGxlKGhhbmRs
ZSwgYmluZGVyKTsKfQoKc3RhdHVzX3QgSVBDVGhyZWFkU3RhdGU6OnJlcXVlc3REZWF0aE5vdGlmaWNh
dGlvbihpbnQzMl90IGhhbmRsZSwgQnBCaW5kZXIqIHByb3h5KQp7CiAgICBtT3V0LndyaXRlSW50MzIo
QkNfUkVRVUVTVF9ERUFUSF9OT1RJRklDQVRJT04pOwogICAgbU91dC53cml0ZUludDMyKChpbnQzMl90
KWhhbmRsZSk7CiAgICBtT3V0LndyaXRlUG9pbnRlcigodWludHB0cl90KXByb3h5KTsKICAgIHJldHVy
biBOT19FUlJPUjsKfQoKc3RhdHVzX3QgSVBDVGhyZWFkU3RhdGU6OmNsZWFyRGVhdGhOb3RpZmljYXRp
b24oaW50MzJfdCBoYW5kbGUsIEJwQmluZGVyKiBwcm94eSkKewogICAgbU91dC53cml0ZUludDMyKEJD
X0NMRUFSX0RFQVRIX05PVElGSUNBVElPTik7CiAgICBtT3V0LndyaXRlSW50MzIoKGludDMyX3QpaGFu
ZGxlKTsKICAgIG1PdXQud3JpdGVQb2ludGVyKCh1aW50cHRyX3QpcHJveHkpOwogICAgcmV0dXJuIE5P
X0VSUk9SOwp9CgpJUENUaHJlYWRTdGF0ZTo6SVBDVGhyZWFkU3RhdGUoKQogICAgOiBtUHJvY2VzcyhQ
cm9jZXNzU3RhdGU6OnNlbGYoKSksCiAgICAgIG1TdHJpY3RNb2RlUG9saWN5KDApLAogICAgICBtTGFz
dFRyYW5zYWN0aW9uQmluZGVyRmxhZ3MoMCkKewogICAgcHRocmVhZF9zZXRzcGVjaWZpYyhnVExTLCB0
aGlzKTsKICAgIGNsZWFyQ2FsbGVyKCk7CiAgICBtSW4uc2V0RGF0YUNhcGFjaXR5KDI1Nik7CiAgICBt
T3V0LnNldERhdGFDYXBhY2l0eSgyNTYpOwp9CgpJUENUaHJlYWRTdGF0ZTo6fklQQ1RocmVhZFN0YXRl
KCkKewp9CgpzdGF0dXNfdCBJUENUaHJlYWRTdGF0ZTo6c2VuZFJlcGx5KGNvbnN0IFBhcmNlbCYgcmVw
bHksIHVpbnQzMl90IGZsYWdzKQp7CiAgICBzdGF0dXNfdCBlcnI7CiAgICBzdGF0dXNfdCBzdGF0dXNC
dWZmZXI7CiAgICBlcnIgPSB3cml0ZVRyYW5zYWN0aW9uRGF0YShCQ19SRVBMWSwgZmxhZ3MsIC0xLCAw
LCByZXBseSwgJnN0YXR1c0J1ZmZlcik7CiAgICBpZiAoZXJyIDwgTk9fRVJST1IpIHJldHVybiBlcnI7
CgogICAgcmV0dXJuIHdhaXRGb3JSZXNwb25zZShOVUxMLCBOVUxMKTsKfQoKc3RhdHVzX3QgSVBDVGhy
ZWFkU3RhdGU6OndhaXRGb3JSZXNwb25zZShQYXJjZWwgKnJlcGx5LCBzdGF0dXNfdCAqYWNxdWlyZVJl
c3VsdCkKewogICAgdWludDMyX3QgY21kOwogICAgaW50MzJfdCBlcnI7CgogICAgd2hpbGUgKDEpIHsK
ICAgICAgICBpZiAoKGVycj10YWxrV2l0aERyaXZlcigpKSA8IE5PX0VSUk9SKSBicmVhazsKICAgICAg
ICBlcnIgPSBtSW4uZXJyb3JDaGVjaygpOwogICAgICAgIGlmIChlcnIgPCBOT19FUlJPUikgYnJlYWs7
CiAgICAgICAgaWYgKG1Jbi5kYXRhQXZhaWwoKSA9PSAwKSBjb250aW51ZTsKCiAgICAgICAgY21kID0g
KHVpbnQzMl90KW1Jbi5yZWFkSW50MzIoKTsKCiAgICAgICAgSUZfTE9HX0NPTU1BTkRTKCkgewogICAg
ICAgICAgICBhbG9nIDw8ICJQcm9jZXNzaW5nIHdhaXRGb3JSZXNwb25zZSBDb21tYW5kOiAiCiAgICAg
ICAgICAgICAgICA8PCBnZXRSZXR1cm5TdHJpbmcoY21kKSA8PCBlbmRsOwogICAgICAgIH0KCiAgICAg
ICAgc3dpdGNoIChjbWQpIHsKICAgICAgICBjYXNlIEJSX1RSQU5TQUNUSU9OX0NPTVBMRVRFOgogICAg
ICAgICAgICBpZiAoIXJlcGx5ICYmICFhY3F1aXJlUmVzdWx0KSBnb3RvIGZpbmlzaDsKICAgICAgICAg
ICAgYnJlYWs7CgogICAgICAgIGNhc2UgQlJfREVBRF9SRVBMWToKICAgICAgICAgICAgZXJyID0gREVB
RF9PQkpFQ1Q7CiAgICAgICAgICAgIGdvdG8gZmluaXNoOwoKICAgICAgICBjYXNlIEJSX0ZBSUxFRF9S
RVBMWToKICAgICAgICAgICAgZXJyID0gRkFJTEVEX1RSQU5TQUNUSU9OOwogICAgICAgICAgICBnb3Rv
IGZpbmlzaDsKCiAgICAgICAgY2FzZSBCUl9BQ1FVSVJFX1JFU1VMVDoKICAgICAgICAgICAgewogICAg
ICAgICAgICAgICAgQUxPR19BU1NFUlQoYWNxdWlyZVJlc3VsdCAhPSBOVUxMLCAiVW5leHBlY3RlZCBi
ckFDUVVJUkVfUkVTVUxUIik7CiAgICAgICAgICAgICAgICBjb25zdCBpbnQzMl90IHJlc3VsdCA9IG1J
bi5yZWFkSW50MzIoKTsKICAgICAgICAgICAgICAgIGlmICghYWNxdWlyZVJlc3VsdCkgY29udGludWU7
CiAgICAgICAgICAgICAgICAqYWNxdWlyZVJlc3VsdCA9IHJlc3VsdCA/IE5PX0VSUk9SIDogSU5WQUxJ
RF9PUEVSQVRJT047CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZ290byBmaW5pc2g7CgogICAgICAg
IGNhc2UgQlJfUkVQTFk6CiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGJpbmRlcl90cmFuc2Fj
dGlvbl9kYXRhIHRyOwogICAgICAgICAgICAgICAgZXJyID0gbUluLnJlYWQoJnRyLCBzaXplb2YodHIp
KTsKICAgICAgICAgICAgICAgIEFMT0dfQVNTRVJUKGVyciA9PSBOT19FUlJPUiwgIk5vdCBlbm91Z2gg
Y29tbWFuZCBkYXRhIGZvciBiclJFUExZIik7CiAgICAgICAgICAgICAgICBpZiAoZXJyICE9IE5PX0VS
Uk9SKSBnb3RvIGZpbmlzaDsKCiAgICAgICAgICAgICAgICBpZiAocmVwbHkpIHsKICAgICAgICAgICAg
ICAgICAgICBpZiAoKHRyLmZsYWdzICYgVEZfU1RBVFVTX0NPREUpID09IDApIHsKICAgICAgICAgICAg
ICAgICAgICAgICAgcmVwbHktPmlwY1NldERhdGFSZWZlcmVuY2UoCiAgICAgICAgICAgICAgICAgICAg
ICAgICAgICByZWludGVycHJldF9jYXN0PGNvbnN0IHVpbnQ4X3QqPih0ci5kYXRhLnB0ci5idWZmZXIp
LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdHIuZGF0YV9zaXplLAogICAgICAgICAgICAgICAg
ICAgICAgICAgICAgcmVpbnRlcnByZXRfY2FzdDxjb25zdCBiaW5kZXJfc2l6ZV90Kj4odHIuZGF0YS5w
dHIub2Zmc2V0cyksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ci5vZmZzZXRzX3NpemUvc2l6
ZW9mKGJpbmRlcl9zaXplX3QpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJlZUJ1ZmZlciwg
dGhpcyk7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAg
ZXJyID0gKnJlaW50ZXJwcmV0X2Nhc3Q8Y29uc3Qgc3RhdHVzX3QqPih0ci5kYXRhLnB0ci5idWZmZXIp
OwogICAgICAgICAgICAgICAgICAgICAgICBmcmVlQnVmZmVyKE5VTEwsCiAgICAgICAgICAgICAgICAg
ICAgICAgICAgICByZWludGVycHJldF9jYXN0PGNvbnN0IHVpbnQ4X3QqPih0ci5kYXRhLnB0ci5idWZm
ZXIpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdHIuZGF0YV9zaXplLAogICAgICAgICAgICAg
ICAgICAgICAgICAgICAgcmVpbnRlcnByZXRfY2FzdDxjb25zdCBiaW5kZXJfc2l6ZV90Kj4odHIuZGF0
YS5wdHIub2Zmc2V0cyksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ci5vZmZzZXRzX3NpemUv
c2l6ZW9mKGJpbmRlcl9zaXplX3QpLCB0aGlzKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAg
ICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIGZyZWVCdWZmZXIoTlVMTCwKICAgICAg
ICAgICAgICAgICAgICAgICAgcmVpbnRlcnByZXRfY2FzdDxjb25zdCB1aW50OF90Kj4odHIuZGF0YS5w
dHIuYnVmZmVyKSwKICAgICAgICAgICAgICAgICAgICAgICAgdHIuZGF0YV9zaXplLAogICAgICAgICAg
ICAgICAgICAgICAgICByZWludGVycHJldF9jYXN0PGNvbnN0IGJpbmRlcl9zaXplX3QqPih0ci5kYXRh
LnB0ci5vZmZzZXRzKSwKICAgICAgICAgICAgICAgICAgICAgICAgdHIub2Zmc2V0c19zaXplL3NpemVv
ZihiaW5kZXJfc2l6ZV90KSwgdGhpcyk7CiAgICAgICAgICAgICAgICAgICAgY29udGludWU7CiAgICAg
ICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZ290byBmaW5pc2g7CgogICAgICAg
IGRlZmF1bHQ6CiAgICAgICAgICAgIGVyciA9IGV4ZWN1dGVDb21tYW5kKGNtZCk7CiAgICAgICAgICAg
IGlmIChlcnIgIT0gTk9fRVJST1IpIGdvdG8gZmluaXNoOwogICAgICAgICAgICBicmVhazsKICAgICAg
ICB9CiAgICB9CgpmaW5pc2g6CiAgICBpZiAoZXJyICE9IE5PX0VSUk9SKSB7CiAgICAgICAgaWYgKGFj
cXVpcmVSZXN1bHQpICphY3F1aXJlUmVzdWx0ID0gZXJyOwogICAgICAgIGlmIChyZXBseSkgcmVwbHkt
PnNldEVycm9yKGVycik7CiAgICAgICAgbUxhc3RFcnJvciA9IGVycjsKICAgIH0KCiAgICByZXR1cm4g
ZXJyOwp9CgpzdGF0dXNfdCBJUENUaHJlYWRTdGF0ZTo6dGFsa1dpdGhEcml2ZXIoYm9vbCBkb1JlY2Vp
dmUpCnsKICAgIGlmIChtUHJvY2Vzcy0+bURyaXZlckZEIDw9IDApIHsKICAgICAgICByZXR1cm4gLUVC
QURGOwogICAgfQoKICAgIGJpbmRlcl93cml0ZV9yZWFkIGJ3cjsKCiAgICAvLyBJcyB0aGUgcmVhZCBi
dWZmZXIgZW1wdHk/CiAgICBjb25zdCBib29sIG5lZWRSZWFkID0gbUluLmRhdGFQb3NpdGlvbigpID49
IG1Jbi5kYXRhU2l6ZSgpOwoKICAgIC8vIFdlIGRvbid0IHdhbnQgdG8gd3JpdGUgYW55dGhpbmcgaWYg
d2UgYXJlIHN0aWxsIHJlYWRpbmcKICAgIC8vIGZyb20gZGF0YSBsZWZ0IGluIHRoZSBpbnB1dCBidWZm
ZXIgYW5kIHRoZSBjYWxsZXIKICAgIC8vIGhhcyByZXF1ZXN0ZWQgdG8gcmVhZCB0aGUgbmV4dCBkYXRh
LgogICAgY29uc3Qgc2l6ZV90IG91dEF2YWlsID0gKCFkb1JlY2VpdmUgfHwgbmVlZFJlYWQpID8gbU91
dC5kYXRhU2l6ZSgpIDogMDsKCiAgICBid3Iud3JpdGVfc2l6ZSA9IG91dEF2YWlsOwogICAgYndyLndy
aXRlX2J1ZmZlciA9ICh1aW50cHRyX3QpbU91dC5kYXRhKCk7CgogICAgLy8gVGhpcyBpcyB3aGF0IHdl
J2xsIHJlYWQuCiAgICBpZiAoZG9SZWNlaXZlICYmIG5lZWRSZWFkKSB7CiAgICAgICAgYndyLnJlYWRf
c2l6ZSA9IG1Jbi5kYXRhQ2FwYWNpdHkoKTsKICAgICAgICBid3IucmVhZF9idWZmZXIgPSAodWludHB0
cl90KW1Jbi5kYXRhKCk7CiAgICB9IGVsc2UgewogICAgICAgIGJ3ci5yZWFkX3NpemUgPSAwOwogICAg
ICAgIGJ3ci5yZWFkX2J1ZmZlciA9IDA7CiAgICB9CgogICAgSUZfTE9HX0NPTU1BTkRTKCkgewogICAg
ICAgIFRleHRPdXRwdXQ6OkJ1bmRsZSBfYihhbG9nKTsKICAgICAgICBpZiAob3V0QXZhaWwgIT0gMCkg
ewogICAgICAgICAgICBhbG9nIDw8ICJTZW5kaW5nIGNvbW1hbmRzIHRvIGRyaXZlcjogIiA8PCBpbmRl
bnQ7CiAgICAgICAgICAgIGNvbnN0IHZvaWQqIGNtZHMgPSAoY29uc3Qgdm9pZCopYndyLndyaXRlX2J1
ZmZlcjsKICAgICAgICAgICAgY29uc3Qgdm9pZCogZW5kID0gKChjb25zdCB1aW50OF90KiljbWRzKSti
d3Iud3JpdGVfc2l6ZTsKICAgICAgICAgICAgYWxvZyA8PCBIZXhEdW1wKGNtZHMsIGJ3ci53cml0ZV9z
aXplKSA8PCBlbmRsOwogICAgICAgICAgICB3aGlsZSAoY21kcyA8IGVuZCkgY21kcyA9IHByaW50Q29t
bWFuZChhbG9nLCBjbWRzKTsKICAgICAgICAgICAgYWxvZyA8PCBkZWRlbnQ7CiAgICAgICAgfQogICAg
ICAgIGFsb2cgPDwgIlNpemUgb2YgcmVjZWl2ZSBidWZmZXI6ICIgPDwgYndyLnJlYWRfc2l6ZQogICAg
ICAgICAgICA8PCAiLCBuZWVkUmVhZDogIiA8PCBuZWVkUmVhZCA8PCAiLCBkb1JlY2VpdmU6ICIgPDwg
ZG9SZWNlaXZlIDw8IGVuZGw7CiAgICB9CgogICAgLy8gUmV0dXJuIGltbWVkaWF0ZWx5IGlmIHRoZXJl
IGlzIG5vdGhpbmcgdG8gZG8uCiAgICBpZiAoKGJ3ci53cml0ZV9zaXplID09IDApICYmIChid3IucmVh
ZF9zaXplID09IDApKSByZXR1cm4gTk9fRVJST1I7CgogICAgYndyLndyaXRlX2NvbnN1bWVkID0gMDsK
ICAgIGJ3ci5yZWFkX2NvbnN1bWVkID0gMDsKICAgIHN0YXR1c190IGVycjsKICAgIGRvIHsKICAgICAg
ICBJRl9MT0dfQ09NTUFORFMoKSB7CiAgICAgICAgICAgIGFsb2cgPDwgIkFib3V0IHRvIHJlYWQvd3Jp
dGUsIHdyaXRlIHNpemUgPSAiIDw8IG1PdXQuZGF0YVNpemUoKSA8PCBlbmRsOwogICAgICAgIH0KI2lm
IGRlZmluZWQoX19BTkRST0lEX18pCiAgICAgICAgaWYgKGlvY3RsKG1Qcm9jZXNzLT5tRHJpdmVyRkQs
IEJJTkRFUl9XUklURV9SRUFELCAmYndyKSA+PSAwKQogICAgICAgICAgICBlcnIgPSBOT19FUlJPUjsK
ICAgICAgICBlbHNlCiAgICAgICAgICAgIGVyciA9IC1lcnJubzsKI2Vsc2UKICAgICAgICBlcnIgPSBJ
TlZBTElEX09QRVJBVElPTjsKI2VuZGlmCiAgICAgICAgaWYgKG1Qcm9jZXNzLT5tRHJpdmVyRkQgPD0g
MCkgewogICAgICAgICAgICBlcnIgPSAtRUJBREY7CiAgICAgICAgfQogICAgICAgIElGX0xPR19DT01N
QU5EUygpIHsKICAgICAgICAgICAgYWxvZyA8PCAiRmluaXNoZWQgcmVhZC93cml0ZSwgd3JpdGUgc2l6
ZSA9ICIgPDwgbU91dC5kYXRhU2l6ZSgpIDw8IGVuZGw7CiAgICAgICAgfQogICAgfSB3aGlsZSAoZXJy
ID09IC1FSU5UUik7CgogICAgSUZfTE9HX0NPTU1BTkRTKCkgewogICAgICAgIGFsb2cgPDwgIk91ciBl
cnI6ICIgPDwgKHZvaWQqKShpbnRwdHJfdCllcnIgPDwgIiwgd3JpdGUgY29uc3VtZWQ6ICIKICAgICAg
ICAgICAgPDwgYndyLndyaXRlX2NvbnN1bWVkIDw8ICIgKG9mICIgPDwgbU91dC5kYXRhU2l6ZSgpCiAg
ICAgICAgICAgICAgICAgICAgICAgIDw8ICIpLCByZWFkIGNvbnN1bWVkOiAiIDw8IGJ3ci5yZWFkX2Nv
bnN1bWVkIDw8IGVuZGw7CiAgICB9CgogICAgaWYgKGVyciA+PSBOT19FUlJPUikgewogICAgICAgIGlm
IChid3Iud3JpdGVfY29uc3VtZWQgPiAwKSB7CiAgICAgICAgICAgIGlmIChid3Iud3JpdGVfY29uc3Vt
ZWQgPCBtT3V0LmRhdGFTaXplKCkpCiAgICAgICAgICAgICAgICBtT3V0LnJlbW92ZSgwLCBid3Iud3Jp
dGVfY29uc3VtZWQpOwogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICBtT3V0LnNldERhdGFT
aXplKDApOwogICAgICAgIH0KICAgICAgICBpZiAoYndyLnJlYWRfY29uc3VtZWQgPiAwKSB7CiAgICAg
ICAgICAgIG1Jbi5zZXREYXRhU2l6ZShid3IucmVhZF9jb25zdW1lZCk7CiAgICAgICAgICAgIG1Jbi5z
ZXREYXRhUG9zaXRpb24oMCk7CiAgICAgICAgfQogICAgICAgIElGX0xPR19DT01NQU5EUygpIHsKICAg
ICAgICAgICAgVGV4dE91dHB1dDo6QnVuZGxlIF9iKGFsb2cpOwogICAgICAgICAgICBhbG9nIDw8ICJS
ZW1haW5pbmcgZGF0YSBzaXplOiAiIDw8IG1PdXQuZGF0YVNpemUoKSA8PCBlbmRsOwogICAgICAgICAg
ICBhbG9nIDw8ICJSZWNlaXZlZCBjb21tYW5kcyBmcm9tIGRyaXZlcjogIiA8PCBpbmRlbnQ7CiAgICAg
ICAgICAgIGNvbnN0IHZvaWQqIGNtZHMgPSBtSW4uZGF0YSgpOwogICAgICAgICAgICBjb25zdCB2b2lk
KiBlbmQgPSBtSW4uZGF0YSgpICsgbUluLmRhdGFTaXplKCk7CiAgICAgICAgICAgIGFsb2cgPDwgSGV4
RHVtcChjbWRzLCBtSW4uZGF0YVNpemUoKSkgPDwgZW5kbDsKICAgICAgICAgICAgd2hpbGUgKGNtZHMg
PCBlbmQpIGNtZHMgPSBwcmludFJldHVybkNvbW1hbmQoYWxvZywgY21kcyk7CiAgICAgICAgICAgIGFs
b2cgPDwgZGVkZW50OwogICAgICAgIH0KICAgICAgICByZXR1cm4gTk9fRVJST1I7CiAgICB9CgogICAg
cmV0dXJuIGVycjsKfQoKc3RhdHVzX3QgSVBDVGhyZWFkU3RhdGU6OndyaXRlVHJhbnNhY3Rpb25EYXRh
KGludDMyX3QgY21kLCB1aW50MzJfdCBiaW5kZXJGbGFncywKICAgIGludDMyX3QgaGFuZGxlLCB1aW50
MzJfdCBjb2RlLCBjb25zdCBQYXJjZWwmIGRhdGEsIHN0YXR1c190KiBzdGF0dXNCdWZmZXIpCnsKICAg
IGJpbmRlcl90cmFuc2FjdGlvbl9kYXRhIHRyOwoKICAgIHRyLnRhcmdldC5wdHIgPSAwOyAvKiBEb24n
dCBwYXNzIHVuaW5pdGlhbGl6ZWQgc3RhY2sgZGF0YSB0byBhIHJlbW90ZSBwcm9jZXNzICovCiAgICB0
ci50YXJnZXQuaGFuZGxlID0gaGFuZGxlOwogICAgdHIuY29kZSA9IGNvZGU7CiAgICB0ci5mbGFncyA9
IGJpbmRlckZsYWdzOwogICAgdHIuY29va2llID0gMDsKICAgIHRyLnNlbmRlcl9waWQgPSAwOwogICAg
dHIuc2VuZGVyX2V1aWQgPSAwOwoKICAgIGNvbnN0IHN0YXR1c190IGVyciA9IGRhdGEuZXJyb3JDaGVj
aygpOwogICAgaWYgKGVyciA9PSBOT19FUlJPUikgewogICAgICAgIHRyLmRhdGFfc2l6ZSA9IGRhdGEu
aXBjRGF0YVNpemUoKTsKICAgICAgICB0ci5kYXRhLnB0ci5idWZmZXIgPSBkYXRhLmlwY0RhdGEoKTsK
ICAgICAgICB0ci5vZmZzZXRzX3NpemUgPSBkYXRhLmlwY09iamVjdHNDb3VudCgpKnNpemVvZihiaW5k
ZXJfc2l6ZV90KTsKICAgICAgICB0ci5kYXRhLnB0ci5vZmZzZXRzID0gZGF0YS5pcGNPYmplY3RzKCk7
CiAgICB9IGVsc2UgaWYgKHN0YXR1c0J1ZmZlcikgewogICAgICAgIHRyLmZsYWdzIHw9IFRGX1NUQVRV
U19DT0RFOwogICAgICAgICpzdGF0dXNCdWZmZXIgPSBlcnI7CiAgICAgICAgdHIuZGF0YV9zaXplID0g
c2l6ZW9mKHN0YXR1c190KTsKICAgICAgICB0ci5kYXRhLnB0ci5idWZmZXIgPSByZWludGVycHJldF9j
YXN0PHVpbnRwdHJfdD4oc3RhdHVzQnVmZmVyKTsKICAgICAgICB0ci5vZmZzZXRzX3NpemUgPSAwOwog
ICAgICAgIHRyLmRhdGEucHRyLm9mZnNldHMgPSAwOwogICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4g
KG1MYXN0RXJyb3IgPSBlcnIpOwogICAgfQoKICAgIG1PdXQud3JpdGVJbnQzMihjbWQpOwogICAgbU91
dC53cml0ZSgmdHIsIHNpemVvZih0cikpOwoKICAgIHJldHVybiBOT19FUlJPUjsKfQoKc3A8QkJpbmRl
cj4gdGhlX2NvbnRleHRfb2JqZWN0OwoKdm9pZCBzZXRUaGVDb250ZXh0T2JqZWN0KHNwPEJCaW5kZXI+
IG9iaikKewogICAgdGhlX2NvbnRleHRfb2JqZWN0ID0gb2JqOwp9CgpzdGF0dXNfdCBJUENUaHJlYWRT
dGF0ZTo6ZXhlY3V0ZUNvbW1hbmQoaW50MzJfdCBjbWQpCnsKICAgIEJCaW5kZXIqIG9iajsKICAgIFJl
ZkJhc2U6OndlYWtyZWZfdHlwZSogcmVmczsKICAgIHN0YXR1c190IHJlc3VsdCA9IE5PX0VSUk9SOwoK
ICAgIHN3aXRjaCAoKHVpbnQzMl90KWNtZCkgewogICAgY2FzZSBCUl9FUlJPUjoKICAgICAgICByZXN1
bHQgPSBtSW4ucmVhZEludDMyKCk7CiAgICAgICAgYnJlYWs7CgogICAgY2FzZSBCUl9PSzoKICAgICAg
ICBicmVhazsKCiAgICBjYXNlIEJSX0FDUVVJUkU6CiAgICAgICAgcmVmcyA9IChSZWZCYXNlOjp3ZWFr
cmVmX3R5cGUqKW1Jbi5yZWFkUG9pbnRlcigpOwogICAgICAgIG9iaiA9IChCQmluZGVyKiltSW4ucmVh
ZFBvaW50ZXIoKTsKICAgICAgICBBTE9HX0FTU0VSVChyZWZzLT5yZWZCYXNlKCkgPT0gb2JqLAogICAg
ICAgICAgICAgICAgICAgIkJSX0FDUVVJUkU6IG9iamVjdCAlcCBkb2VzIG5vdCBtYXRjaCBjb29raWUg
JXAgKGV4cGVjdGVkICVwKSIsCiAgICAgICAgICAgICAgICAgICByZWZzLCBvYmosIHJlZnMtPnJlZkJh
c2UoKSk7CiAgICAgICAgb2JqLT5pbmNTdHJvbmcobVByb2Nlc3MuZ2V0KCkpOwogICAgICAgIElGX0xP
R19SRU1PVEVSRUZTKCkgewogICAgICAgICAgICBMT0dfUkVNT1RFUkVGUygiQlJfQUNRVUlSRSBmcm9t
IGRyaXZlciBvbiAlcCIsIG9iaik7CiAgICAgICAgICAgIG9iai0+cHJpbnRSZWZzKCk7CiAgICAgICAg
fQogICAgICAgIG1PdXQud3JpdGVJbnQzMihCQ19BQ1FVSVJFX0RPTkUpOwogICAgICAgIG1PdXQud3Jp
dGVQb2ludGVyKCh1aW50cHRyX3QpcmVmcyk7CiAgICAgICAgbU91dC53cml0ZVBvaW50ZXIoKHVpbnRw
dHJfdClvYmopOwogICAgICAgIGJyZWFrOwoKICAgIGNhc2UgQlJfUkVMRUFTRToKICAgICAgICByZWZz
ID0gKFJlZkJhc2U6OndlYWtyZWZfdHlwZSopbUluLnJlYWRQb2ludGVyKCk7CiAgICAgICAgb2JqID0g
KEJCaW5kZXIqKW1Jbi5yZWFkUG9pbnRlcigpOwogICAgICAgIEFMT0dfQVNTRVJUKHJlZnMtPnJlZkJh
c2UoKSA9PSBvYmosCiAgICAgICAgICAgICAgICAgICAiQlJfUkVMRUFTRTogb2JqZWN0ICVwIGRvZXMg
bm90IG1hdGNoIGNvb2tpZSAlcCAoZXhwZWN0ZWQgJXApIiwKICAgICAgICAgICAgICAgICAgIHJlZnMs
IG9iaiwgcmVmcy0+cmVmQmFzZSgpKTsKICAgICAgICBJRl9MT0dfUkVNT1RFUkVGUygpIHsKICAgICAg
ICAgICAgTE9HX1JFTU9URVJFRlMoIkJSX1JFTEVBU0UgZnJvbSBkcml2ZXIgb24gJXAiLCBvYmopOwog
ICAgICAgICAgICBvYmotPnByaW50UmVmcygpOwogICAgICAgIH0KICAgICAgICBtUGVuZGluZ1N0cm9u
Z0RlcmVmcy5wdXNoKG9iaik7CiAgICAgICAgYnJlYWs7CgogICAgY2FzZSBCUl9JTkNSRUZTOgogICAg
ICAgIHJlZnMgPSAoUmVmQmFzZTo6d2Vha3JlZl90eXBlKiltSW4ucmVhZFBvaW50ZXIoKTsKICAgICAg
ICBvYmogPSAoQkJpbmRlciopbUluLnJlYWRQb2ludGVyKCk7CiAgICAgICAgcmVmcy0+aW5jV2Vhayht
UHJvY2Vzcy5nZXQoKSk7CiAgICAgICAgbU91dC53cml0ZUludDMyKEJDX0lOQ1JFRlNfRE9ORSk7CiAg
ICAgICAgbU91dC53cml0ZVBvaW50ZXIoKHVpbnRwdHJfdClyZWZzKTsKICAgICAgICBtT3V0LndyaXRl
UG9pbnRlcigodWludHB0cl90KW9iaik7CiAgICAgICAgYnJlYWs7CgogICAgY2FzZSBCUl9ERUNSRUZT
OgogICAgICAgIHJlZnMgPSAoUmVmQmFzZTo6d2Vha3JlZl90eXBlKiltSW4ucmVhZFBvaW50ZXIoKTsK
ICAgICAgICBvYmogPSAoQkJpbmRlciopbUluLnJlYWRQb2ludGVyKCk7CiAgICAgICAgLy8gTk9URTog
VGhpcyBhc3NlcnRpb24gaXMgbm90IHZhbGlkLCBiZWNhdXNlIHRoZSBvYmplY3QgbWF5IG5vCiAgICAg
ICAgLy8gbG9uZ2VyIGV4aXN0ICh0aHVzIHRoZSAoQkJpbmRlciopY2FzdCBhYm92ZSByZXN1bHRpbmcg
aW4gYSBkaWZmZXJlbnQKICAgICAgICAvLyBtZW1vcnkgYWRkcmVzcykuCiAgICAgICAgLy9BTE9HX0FT
U0VSVChyZWZzLT5yZWZCYXNlKCkgPT0gb2JqLAogICAgICAgIC8vICAgICAgICAgICAiQlJfREVDUkVG
Uzogb2JqZWN0ICVwIGRvZXMgbm90IG1hdGNoIGNvb2tpZSAlcCAoZXhwZWN0ZWQgJXApIiwKICAgICAg
ICAvLyAgICAgICAgICAgcmVmcywgb2JqLCByZWZzLT5yZWZCYXNlKCkpOwogICAgICAgIG1QZW5kaW5n
V2Vha0RlcmVmcy5wdXNoKHJlZnMpOwogICAgICAgIGJyZWFrOwoKICAgIGNhc2UgQlJfQVRURU1QVF9B
Q1FVSVJFOgogICAgICAgIHJlZnMgPSAoUmVmQmFzZTo6d2Vha3JlZl90eXBlKiltSW4ucmVhZFBvaW50
ZXIoKTsKICAgICAgICBvYmogPSAoQkJpbmRlciopbUluLnJlYWRQb2ludGVyKCk7CgogICAgICAgIHsK
ICAgICAgICAgICAgY29uc3QgYm9vbCBzdWNjZXNzID0gcmVmcy0+YXR0ZW1wdEluY1N0cm9uZyhtUHJv
Y2Vzcy5nZXQoKSk7CiAgICAgICAgICAgIEFMT0dfQVNTRVJUKHN1Y2Nlc3MgJiYgcmVmcy0+cmVmQmFz
ZSgpID09IG9iaiwKICAgICAgICAgICAgICAgICAgICAgICAiQlJfQVRURU1QVF9BQ1FVSVJFOiBvYmpl
Y3QgJXAgZG9lcyBub3QgbWF0Y2ggY29va2llICVwIChleHBlY3RlZCAlcCkiLAogICAgICAgICAgICAg
ICAgICAgICAgIHJlZnMsIG9iaiwgcmVmcy0+cmVmQmFzZSgpKTsKCiAgICAgICAgICAgIG1PdXQud3Jp
dGVJbnQzMihCQ19BQ1FVSVJFX1JFU1VMVCk7CiAgICAgICAgICAgIG1PdXQud3JpdGVJbnQzMigoaW50
MzJfdClzdWNjZXNzKTsKICAgICAgICB9CiAgICAgICAgYnJlYWs7CgogICAgY2FzZSBCUl9UUkFOU0FD
VElPTjoKICAgICAgICB7CiAgICAgICAgICAgIGJpbmRlcl90cmFuc2FjdGlvbl9kYXRhIHRyOwogICAg
ICAgICAgICByZXN1bHQgPSBtSW4ucmVhZCgmdHIsIHNpemVvZih0cikpOwogICAgICAgICAgICBBTE9H
X0FTU0VSVChyZXN1bHQgPT0gTk9fRVJST1IsCiAgICAgICAgICAgICAgICAiTm90IGVub3VnaCBjb21t
YW5kIGRhdGEgZm9yIGJyVFJBTlNBQ1RJT04iKTsKICAgICAgICAgICAgaWYgKHJlc3VsdCAhPSBOT19F
UlJPUikgYnJlYWs7CgogICAgICAgICAgICBQYXJjZWwgYnVmZmVyOwogICAgICAgICAgICBidWZmZXIu
aXBjU2V0RGF0YVJlZmVyZW5jZSgKICAgICAgICAgICAgICAgIHJlaW50ZXJwcmV0X2Nhc3Q8Y29uc3Qg
dWludDhfdCo+KHRyLmRhdGEucHRyLmJ1ZmZlciksCiAgICAgICAgICAgICAgICB0ci5kYXRhX3NpemUs
CiAgICAgICAgICAgICAgICByZWludGVycHJldF9jYXN0PGNvbnN0IGJpbmRlcl9zaXplX3QqPih0ci5k
YXRhLnB0ci5vZmZzZXRzKSwKICAgICAgICAgICAgICAgIHRyLm9mZnNldHNfc2l6ZS9zaXplb2YoYmlu
ZGVyX3NpemVfdCksIGZyZWVCdWZmZXIsIHRoaXMpOwoKICAgICAgICAgICAgY29uc3QgcGlkX3Qgb3Jp
Z1BpZCA9IG1DYWxsaW5nUGlkOwogICAgICAgICAgICBjb25zdCB1aWRfdCBvcmlnVWlkID0gbUNhbGxp
bmdVaWQ7CiAgICAgICAgICAgIGNvbnN0IGludDMyX3Qgb3JpZ1N0cmljdE1vZGVQb2xpY3kgPSBtU3Ry
aWN0TW9kZVBvbGljeTsKICAgICAgICAgICAgY29uc3QgaW50MzJfdCBvcmlnVHJhbnNhY3Rpb25CaW5k
ZXJGbGFncyA9IG1MYXN0VHJhbnNhY3Rpb25CaW5kZXJGbGFnczsKCiAgICAgICAgICAgIG1DYWxsaW5n
UGlkID0gdHIuc2VuZGVyX3BpZDsKICAgICAgICAgICAgbUNhbGxpbmdVaWQgPSB0ci5zZW5kZXJfZXVp
ZDsKICAgICAgICAgICAgbUxhc3RUcmFuc2FjdGlvbkJpbmRlckZsYWdzID0gdHIuZmxhZ3M7CgogICAg
ICAgICAgICAvL0FMT0dJKCI+Pj4+IFRSQU5TQUNUIGZyb20gcGlkICVkIHVpZCAlZFxuIiwgbUNhbGxp
bmdQaWQsIG1DYWxsaW5nVWlkKTsKCiAgICAgICAgICAgIFBhcmNlbCByZXBseTsKICAgICAgICAgICAg
c3RhdHVzX3QgZXJyb3I7CiAgICAgICAgICAgIElGX0xPR19UUkFOU0FDVElPTlMoKSB7CiAgICAgICAg
ICAgICAgICBUZXh0T3V0cHV0OjpCdW5kbGUgX2IoYWxvZyk7CiAgICAgICAgICAgICAgICBhbG9nIDw8
ICJCUl9UUkFOU0FDVElPTiB0aHIgIiA8PCAodm9pZCopcHRocmVhZF9zZWxmKCkKICAgICAgICAgICAg
ICAgICAgICA8PCAiIC8gb2JqICIgPDwgdHIudGFyZ2V0LnB0ciA8PCAiIC8gY29kZSAiCiAgICAgICAg
ICAgICAgICAgICAgPDwgVHlwZUNvZGUodHIuY29kZSkgPDwgIjogIiA8PCBpbmRlbnQgPDwgYnVmZmVy
CiAgICAgICAgICAgICAgICAgICAgPDwgZGVkZW50IDw8IGVuZGwKICAgICAgICAgICAgICAgICAgICA8
PCAiRGF0YSBhZGRyID0gIgogICAgICAgICAgICAgICAgICAgIDw8IHJlaW50ZXJwcmV0X2Nhc3Q8Y29u
c3QgdWludDhfdCo+KHRyLmRhdGEucHRyLmJ1ZmZlcikKICAgICAgICAgICAgICAgICAgICA8PCAiLCBv
ZmZzZXRzIGFkZHI9IgogICAgICAgICAgICAgICAgICAgIDw8IHJlaW50ZXJwcmV0X2Nhc3Q8Y29uc3Qg
c2l6ZV90Kj4odHIuZGF0YS5wdHIub2Zmc2V0cykgPDwgZW5kbDsKICAgICAgICAgICAgfQogICAgICAg
ICAgICBpZiAodHIudGFyZ2V0LnB0cikgewogICAgICAgICAgICAgICAgLy8gV2Ugb25seSBoYXZlIGEg
d2VhayByZWZlcmVuY2Ugb24gdGhlIHRhcmdldCBvYmplY3QsIHNvIHdlIG11c3QgZmlyc3QgdHJ5IHRv
CiAgICAgICAgICAgICAgICAvLyBzYWZlbHkgYWNxdWlyZSBhIHN0cm9uZyByZWZlcmVuY2UgYmVmb3Jl
IGRvaW5nIGFueXRoaW5nIGVsc2Ugd2l0aCBpdC4KICAgICAgICAgICAgICAgIGlmIChyZWludGVycHJl
dF9jYXN0PFJlZkJhc2U6OndlYWtyZWZfdHlwZSo+KAogICAgICAgICAgICAgICAgICAgICAgICB0ci50
YXJnZXQucHRyKS0+YXR0ZW1wdEluY1N0cm9uZyh0aGlzKSkgewogICAgICAgICAgICAgICAgICAgIGVy
cm9yID0gcmVpbnRlcnByZXRfY2FzdDxCQmluZGVyKj4odHIuY29va2llKS0+dHJhbnNhY3QodHIuY29k
ZSwgYnVmZmVyLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJnJlcGx5LCB0ci5mbGFncyk7CiAg
ICAgICAgICAgICAgICAgICAgcmVpbnRlcnByZXRfY2FzdDxCQmluZGVyKj4odHIuY29va2llKS0+ZGVj
U3Ryb25nKHRoaXMpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBl
cnJvciA9IFVOS05PV05fVFJBTlNBQ1RJT047CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICB9
IGVsc2UgewogICAgICAgICAgICAgICAgZXJyb3IgPSB0aGVfY29udGV4dF9vYmplY3QtPnRyYW5zYWN0
KHRyLmNvZGUsIGJ1ZmZlciwgJnJlcGx5LCB0ci5mbGFncyk7CiAgICAgICAgICAgIH0KCiAgICAgICAg
ICAgIC8vQUxPR0koIjw8PDwgVFJBTlNBQ1QgZnJvbSBwaWQgJWQgcmVzdG9yZSBwaWQgJWQgdWlkICVk
XG4iLAogICAgICAgICAgICAvLyAgICAgbUNhbGxpbmdQaWQsIG9yaWdQaWQsIG9yaWdVaWQpOwoKICAg
ICAgICAgICAgaWYgKCh0ci5mbGFncyAmIFRGX09ORV9XQVkpID09IDApIHsKICAgICAgICAgICAgICAg
IExPR19PTkVXQVkoIlNlbmRpbmcgcmVwbHkgdG8gJWQhIiwgbUNhbGxpbmdQaWQpOwogICAgICAgICAg
ICAgICAgaWYgKGVycm9yIDwgTk9fRVJST1IpIHJlcGx5LnNldEVycm9yKGVycm9yKTsKICAgICAgICAg
ICAgICAgIHNlbmRSZXBseShyZXBseSwgMCk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAg
ICAgICBMT0dfT05FV0FZKCJOT1Qgc2VuZGluZyByZXBseSB0byAlZCEiLCBtQ2FsbGluZ1BpZCk7CiAg
ICAgICAgICAgIH0KCiAgICAgICAgICAgIG1DYWxsaW5nUGlkID0gb3JpZ1BpZDsKICAgICAgICAgICAg
bUNhbGxpbmdVaWQgPSBvcmlnVWlkOwogICAgICAgICAgICBtU3RyaWN0TW9kZVBvbGljeSA9IG9yaWdT
dHJpY3RNb2RlUG9saWN5OwogICAgICAgICAgICBtTGFzdFRyYW5zYWN0aW9uQmluZGVyRmxhZ3MgPSBv
cmlnVHJhbnNhY3Rpb25CaW5kZXJGbGFnczsKCiAgICAgICAgICAgIElGX0xPR19UUkFOU0FDVElPTlMo
KSB7CiAgICAgICAgICAgICAgICBUZXh0T3V0cHV0OjpCdW5kbGUgX2IoYWxvZyk7CiAgICAgICAgICAg
ICAgICBhbG9nIDw8ICJCQ19SRVBMWSB0aHIgIiA8PCAodm9pZCopcHRocmVhZF9zZWxmKCkgPDwgIiAv
IG9iaiAiCiAgICAgICAgICAgICAgICAgICAgPDwgdHIudGFyZ2V0LnB0ciA8PCAiOiAiIDw8IGluZGVu
dCA8PCByZXBseSA8PCBkZWRlbnQgPDwgZW5kbDsKICAgICAgICAgICAgfQoKICAgICAgICB9CiAgICAg
ICAgYnJlYWs7CgogICAgY2FzZSBCUl9ERUFEX0JJTkRFUjoKICAgICAgICB7CiAgICAgICAgICAgIEJw
QmluZGVyICpwcm94eSA9IChCcEJpbmRlciopbUluLnJlYWRQb2ludGVyKCk7CiAgICAgICAgICAgIHBy
b3h5LT5zZW5kT2JpdHVhcnkoKTsKICAgICAgICAgICAgbU91dC53cml0ZUludDMyKEJDX0RFQURfQklO
REVSX0RPTkUpOwogICAgICAgICAgICBtT3V0LndyaXRlUG9pbnRlcigodWludHB0cl90KXByb3h5KTsK
ICAgICAgICB9IGJyZWFrOwoKICAgIGNhc2UgQlJfQ0xFQVJfREVBVEhfTk9USUZJQ0FUSU9OX0RPTkU6
CiAgICAgICAgewogICAgICAgICAgICBCcEJpbmRlciAqcHJveHkgPSAoQnBCaW5kZXIqKW1Jbi5yZWFk
UG9pbnRlcigpOwogICAgICAgICAgICBwcm94eS0+Z2V0V2Vha1JlZnMoKS0+ZGVjV2Vhayhwcm94eSk7
CiAgICAgICAgfSBicmVhazsKCiAgICBjYXNlIEJSX0ZJTklTSEVEOgogICAgICAgIHJlc3VsdCA9IFRJ
TUVEX09VVDsKICAgICAgICBicmVhazsKCiAgICBjYXNlIEJSX05PT1A6CiAgICAgICAgYnJlYWs7Cgog
ICAgY2FzZSBCUl9TUEFXTl9MT09QRVI6CiAgICAgICAgbVByb2Nlc3MtPnNwYXduUG9vbGVkVGhyZWFk
KGZhbHNlKTsKICAgICAgICBicmVhazsKCiAgICBkZWZhdWx0OgogICAgICAgIEFMT0dFKCIqKiogQkFE
IENPTU1BTkQgJWQgcmVjZWl2ZWQgZnJvbSBCaW5kZXIgZHJpdmVyXG4iLCBjbWQpOwogICAgICAgIHJl
c3VsdCA9IFVOS05PV05fRVJST1I7CiAgICAgICAgYnJlYWs7CiAgICB9CgogICAgaWYgKHJlc3VsdCAh
PSBOT19FUlJPUikgewogICAgICAgIG1MYXN0RXJyb3IgPSByZXN1bHQ7CiAgICB9CgogICAgcmV0dXJu
IHJlc3VsdDsKfQoKdm9pZCBJUENUaHJlYWRTdGF0ZTo6dGhyZWFkRGVzdHJ1Y3Rvcih2b2lkICpzdCkK
ewogICAgICAgIElQQ1RocmVhZFN0YXRlKiBjb25zdCBzZWxmID0gc3RhdGljX2Nhc3Q8SVBDVGhyZWFk
U3RhdGUqPihzdCk7CiAgICAgICAgaWYgKHNlbGYpIHsKICAgICAgICAgICAgICAgIHNlbGYtPmZsdXNo
Q29tbWFuZHMoKTsKI2lmIGRlZmluZWQoX19BTkRST0lEX18pCiAgICAgICAgaWYgKHNlbGYtPm1Qcm9j
ZXNzLT5tRHJpdmVyRkQgPiAwKSB7CiAgICAgICAgICAgIGlvY3RsKHNlbGYtPm1Qcm9jZXNzLT5tRHJp
dmVyRkQsIEJJTkRFUl9USFJFQURfRVhJVCwgMCk7CiAgICAgICAgfQojZW5kaWYKICAgICAgICAgICAg
ICAgIGRlbGV0ZSBzZWxmOwogICAgICAgIH0KfQoKCnZvaWQgSVBDVGhyZWFkU3RhdGU6OmZyZWVCdWZm
ZXIoUGFyY2VsKiBwYXJjZWwsIGNvbnN0IHVpbnQ4X3QqIGRhdGEsCiAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgc2l6ZV90IC8qZGF0YVNpemUqLywKICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICBjb25zdCBiaW5kZXJfc2l6ZV90KiAvKm9iamVjdHMqLywKICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICBzaXplX3QgLypvYmplY3RzU2l6ZSovLCB2b2lkKiAvKmNvb2tpZSovKQp7CiAgICAv
L0FMT0dJKCJGcmVlaW5nIHBhcmNlbCAlcCIsICZwYXJjZWwpOwogICAgSUZfTE9HX0NPTU1BTkRTKCkg
ewogICAgICAgIGFsb2cgPDwgIldyaXRpbmcgQkNfRlJFRV9CVUZGRVIgZm9yICIgPDwgZGF0YSA8PCBl
bmRsOwogICAgfQogICAgQUxPR19BU1NFUlQoZGF0YSAhPSBOVUxMLCAiQ2FsbGVkIHdpdGggTlVMTCBk
YXRhIik7CiAgICBpZiAocGFyY2VsICE9IE5VTEwpIHBhcmNlbC0+Y2xvc2VGaWxlRGVzY3JpcHRvcnMo
KTsKICAgIElQQ1RocmVhZFN0YXRlKiBzdGF0ZSA9IHNlbGYoKTsKICAgIHN0YXRlLT5tT3V0LndyaXRl
SW50MzIoQkNfRlJFRV9CVUZGRVIpOwogICAgc3RhdGUtPm1PdXQud3JpdGVQb2ludGVyKCh1aW50cHRy
X3QpZGF0YSk7Cn0KCn07IC8vIG5hbWVzcGFjZSBhbmRyb2lkCg==</data><mime>application/octet-stream</mime><width>0</width><height>0</height><duration>0</duration><resource-attributes><file-name>IPCThreadState.cp</file-name></resource-attributes></resource><resource><data encoding="base64">LyoKICogQ29weXJpZ2h0IChDKSAyMDA1IFRoZSBBbmRyb2lkIE9wZW4gU291cmNlIFByb2plY3QKICoK
ICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNl
bnNlIik7CiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0
aCB0aGUgTGljZW5zZS4KICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0CiAq
CiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wCiAqCiAqIFVu
bGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29m
dHdhcmUKICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4g
IkFTIElTIiBCQVNJUywKICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJ
TkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuCiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNw
ZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQKICogbGltaXRhdGlvbnMgdW5k
ZXIgdGhlIExpY2Vuc2UuCiAqLwoKI2RlZmluZSBMT0dfVEFHICJQcm9jZXNzU3RhdGUiCgojaW5jbHVk
ZSA8YmluZGVyL1Byb2Nlc3NTdGF0ZS5oPgoKI2luY2x1ZGUgPHV0aWxzL0F0b21pYy5oPgojaW5jbHVk
ZSA8YmluZGVyL0JwQmluZGVyLmg+CiNpbmNsdWRlIDxiaW5kZXIvSVBDVGhyZWFkU3RhdGUuaD4KI2lu
Y2x1ZGUgPHV0aWxzL0xvZy5oPgojaW5jbHVkZSA8dXRpbHMvU3RyaW5nOC5oPgojaW5jbHVkZSA8Ymlu
ZGVyL0lTZXJ2aWNlTWFuYWdlci5oPgojaW5jbHVkZSA8dXRpbHMvU3RyaW5nOC5oPgojaW5jbHVkZSA8
dXRpbHMvdGhyZWFkcy5oPgoKI2luY2x1ZGUgPHByaXZhdGUvYmluZGVyL2JpbmRlcl9tb2R1bGUuaD4K
I2luY2x1ZGUgPHByaXZhdGUvYmluZGVyL1N0YXRpYy5oPgoKI2luY2x1ZGUgPGVycm5vLmg+CiNpbmNs
dWRlIDxmY250bC5oPgojaW5jbHVkZSA8c3RkaW8uaD4KI2luY2x1ZGUgPHN0ZGxpYi5oPgojaW5jbHVk
ZSA8dW5pc3RkLmg+CiNpbmNsdWRlIDxzeXMvaW9jdGwuaD4KI2luY2x1ZGUgPHN5cy9tbWFuLmg+CiNp
bmNsdWRlIDxzeXMvc3RhdC5oPgojaW5jbHVkZSA8c3lzL3R5cGVzLmg+CgojZGVmaW5lIEJJTkRFUl9W
TV9TSVpFICgoMSAqIDEwMjQgKiAxMDI0KSAtIHN5c2NvbmYoX1NDX1BBR0VfU0laRSkgKiAyKQojZGVm
aW5lIERFRkFVTFRfTUFYX0JJTkRFUl9USFJFQURTIDE1CgovLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgpuYW1lc3Bh
Y2UgYW5kcm9pZCB7CgpjbGFzcyBQb29sVGhyZWFkIDogcHVibGljIFRocmVhZAp7CnB1YmxpYzoKICAg
IGV4cGxpY2l0IFBvb2xUaHJlYWQoYm9vbCBpc01haW4pCiAgICAgICAgOiBtSXNNYWluKGlzTWFpbikK
ICAgIHsKICAgIH0KICAgIApwcm90ZWN0ZWQ6CiAgICB2aXJ0dWFsIGJvb2wgdGhyZWFkTG9vcCgpCiAg
ICB7CiAgICAgICAgSVBDVGhyZWFkU3RhdGU6OnNlbGYoKS0+am9pblRocmVhZFBvb2wobUlzTWFpbik7
CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogICAgCiAgICBjb25zdCBib29sIG1Jc01haW47Cn07
CgpzcDxQcm9jZXNzU3RhdGU+IFByb2Nlc3NTdGF0ZTo6c2VsZigpCnsKICAgIE11dGV4OjpBdXRvbG9j
ayBfbChnUHJvY2Vzc011dGV4KTsKICAgIGlmIChnUHJvY2VzcyAhPSBOVUxMKSB7CiAgICAgICAgcmV0
dXJuIGdQcm9jZXNzOwogICAgfQogICAgZ1Byb2Nlc3MgPSBuZXcgUHJvY2Vzc1N0YXRlKCIvZGV2L2Jp
bmRlciIpOwogICAgcmV0dXJuIGdQcm9jZXNzOwp9CgpzcDxQcm9jZXNzU3RhdGU+IFByb2Nlc3NTdGF0
ZTo6aW5pdFdpdGhEcml2ZXIoY29uc3QgY2hhciogZHJpdmVyKQp7CiAgICBNdXRleDo6QXV0b2xvY2sg
X2woZ1Byb2Nlc3NNdXRleCk7CiAgICBpZiAoZ1Byb2Nlc3MgIT0gTlVMTCkgewogICAgICAgIC8vIEFs
bG93IGZvciBpbml0V2l0aERyaXZlciB0byBiZSBjYWxsZWQgcmVwZWF0ZWRseSB3aXRoIHRoZSBzYW1l
CiAgICAgICAgLy8gZHJpdmVyLgogICAgICAgIGlmICghc3RyY21wKGdQcm9jZXNzLT5nZXREcml2ZXJO
YW1lKCkuY19zdHIoKSwgZHJpdmVyKSkgewogICAgICAgICAgICByZXR1cm4gZ1Byb2Nlc3M7CiAgICAg
ICAgfQogICAgICAgIExPR19BTFdBWVNfRkFUQUwoIlByb2Nlc3NTdGF0ZSB3YXMgYWxyZWFkeSBpbml0
aWFsaXplZC4iKTsKICAgIH0KICAgIGdQcm9jZXNzID0gbmV3IFByb2Nlc3NTdGF0ZShkcml2ZXIpOwog
ICAgcmV0dXJuIGdQcm9jZXNzOwp9Cgp2b2lkIFByb2Nlc3NTdGF0ZTo6c2V0Q29udGV4dE9iamVjdChj
b25zdCBzcDxJQmluZGVyPiYgb2JqZWN0KQp7CiAgICBzZXRDb250ZXh0T2JqZWN0KG9iamVjdCwgU3Ry
aW5nMTYoImRlZmF1bHQiKSk7Cn0KCnNwPElCaW5kZXI+IFByb2Nlc3NTdGF0ZTo6Z2V0Q29udGV4dE9i
amVjdChjb25zdCBzcDxJQmluZGVyPiYgLypjYWxsZXIqLykKewogICAgcmV0dXJuIGdldFN0cm9uZ1By
b3h5Rm9ySGFuZGxlKDApOwp9Cgp2b2lkIFByb2Nlc3NTdGF0ZTo6c2V0Q29udGV4dE9iamVjdChjb25z
dCBzcDxJQmluZGVyPiYgb2JqZWN0LCBjb25zdCBTdHJpbmcxNiYgbmFtZSkKewogICAgQXV0b011dGV4
IF9sKG1Mb2NrKTsKICAgIG1Db250ZXh0cy5hZGQobmFtZSwgb2JqZWN0KTsKfQoKc3A8SUJpbmRlcj4g
UHJvY2Vzc1N0YXRlOjpnZXRDb250ZXh0T2JqZWN0KGNvbnN0IFN0cmluZzE2JiBuYW1lLCBjb25zdCBz
cDxJQmluZGVyPiYgY2FsbGVyKQp7CiAgICBtTG9jay5sb2NrKCk7CiAgICBzcDxJQmluZGVyPiBvYmpl
Y3QoCiAgICAgICAgbUNvbnRleHRzLmluZGV4T2ZLZXkobmFtZSkgPj0gMCA/IG1Db250ZXh0cy52YWx1
ZUZvcihuYW1lKSA6IE5VTEwpOwogICAgbUxvY2sudW5sb2NrKCk7CiAgICAKICAgIC8vcHJpbnRmKCJH
ZXR0aW5nIGNvbnRleHQgb2JqZWN0ICVzIGZvciAlcFxuIiwgU3RyaW5nOChuYW1lKS5zdHJpbmcoKSwg
Y2FsbGVyLmdldCgpKTsKICAgIAogICAgaWYgKG9iamVjdCAhPSBOVUxMKSByZXR1cm4gb2JqZWN0OwoK
ICAgIC8vIERvbid0IGF0dGVtcHQgdG8gcmV0cmlldmUgY29udGV4dHMgaWYgd2UgbWFuYWdlIHRoZW0K
ICAgIGlmIChtTWFuYWdlc0NvbnRleHRzKSB7CiAgICAgICAgQUxPR0UoImdldENvbnRleHRPYmplY3Qo
JXMpIGZhaWxlZCwgYnV0IHdlIG1hbmFnZSB0aGUgY29udGV4dHMhXG4iLAogICAgICAgICAgICBTdHJp
bmc4KG5hbWUpLnN0cmluZygpKTsKICAgICAgICByZXR1cm4gTlVMTDsKICAgIH0KICAgIAogICAgSVBD
VGhyZWFkU3RhdGUqIGlwYyA9IElQQ1RocmVhZFN0YXRlOjpzZWxmKCk7CiAgICB7CiAgICAgICAgUGFy
Y2VsIGRhdGEsIHJlcGx5OwogICAgICAgIC8vIG5vIGludGVyZmFjZSB0b2tlbiBvbiB0aGlzIG1hZ2lj
IHRyYW5zYWN0aW9uCiAgICAgICAgZGF0YS53cml0ZVN0cmluZzE2KG5hbWUpOwogICAgICAgIGRhdGEu
d3JpdGVTdHJvbmdCaW5kZXIoY2FsbGVyKTsKICAgICAgICBzdGF0dXNfdCByZXN1bHQgPSBpcGMtPnRy
YW5zYWN0KDAgLyptYWdpYyovLCAwLCBkYXRhLCAmcmVwbHksIDApOwogICAgICAgIGlmIChyZXN1bHQg
PT0gTk9fRVJST1IpIHsKICAgICAgICAgICAgb2JqZWN0ID0gcmVwbHkucmVhZFN0cm9uZ0JpbmRlcigp
OwogICAgICAgIH0KICAgIH0KICAgIAogICAgaXBjLT5mbHVzaENvbW1hbmRzKCk7CiAgICAKICAgIGlm
IChvYmplY3QgIT0gTlVMTCkgc2V0Q29udGV4dE9iamVjdChvYmplY3QsIG5hbWUpOwogICAgcmV0dXJu
IG9iamVjdDsKfQoKdm9pZCBQcm9jZXNzU3RhdGU6OnN0YXJ0VGhyZWFkUG9vbCgpCnsKICAgIEF1dG9N
dXRleCBfbChtTG9jayk7CiAgICBpZiAoIW1UaHJlYWRQb29sU3RhcnRlZCkgewogICAgICAgIG1UaHJl
YWRQb29sU3RhcnRlZCA9IHRydWU7CiAgICAgICAgc3Bhd25Qb29sZWRUaHJlYWQodHJ1ZSk7CiAgICB9
Cn0KCmJvb2wgUHJvY2Vzc1N0YXRlOjppc0NvbnRleHRNYW5hZ2VyKHZvaWQpIGNvbnN0CnsKICAgIHJl
dHVybiBtTWFuYWdlc0NvbnRleHRzOwp9Cgpib29sIFByb2Nlc3NTdGF0ZTo6YmVjb21lQ29udGV4dE1h
bmFnZXIoY29udGV4dF9jaGVja19mdW5jIGNoZWNrRnVuYywgdm9pZCogdXNlckRhdGEpCnsKICAgIGlm
ICghbU1hbmFnZXNDb250ZXh0cykgewogICAgICAgIEF1dG9NdXRleCBfbChtTG9jayk7CiAgICAgICAg
bUJpbmRlckNvbnRleHRDaGVja0Z1bmMgPSBjaGVja0Z1bmM7CiAgICAgICAgbUJpbmRlckNvbnRleHRV
c2VyRGF0YSA9IHVzZXJEYXRhOwoKICAgICAgICBpbnQgZHVtbXkgPSAwOwogICAgICAgIHN0YXR1c190
IHJlc3VsdCA9IGlvY3RsKG1Ecml2ZXJGRCwgQklOREVSX1NFVF9DT05URVhUX01HUiwgJmR1bW15KTsK
ICAgICAgICBpZiAocmVzdWx0ID09IDApIHsKICAgICAgICAgICAgbU1hbmFnZXNDb250ZXh0cyA9IHRy
dWU7CiAgICAgICAgfSBlbHNlIGlmIChyZXN1bHQgPT0gLTEpIHsKICAgICAgICAgICAgbUJpbmRlckNv
bnRleHRDaGVja0Z1bmMgPSBOVUxMOwogICAgICAgICAgICBtQmluZGVyQ29udGV4dFVzZXJEYXRhID0g
TlVMTDsKICAgICAgICAgICAgQUxPR0UoIkJpbmRlciBpb2N0bCB0byBiZWNvbWUgY29udGV4dCBtYW5h
Z2VyIGZhaWxlZDogJXNcbiIsIHN0cmVycm9yKGVycm5vKSk7CiAgICAgICAgfQogICAgfQogICAgcmV0
dXJuIG1NYW5hZ2VzQ29udGV4dHM7Cn0KClByb2Nlc3NTdGF0ZTo6aGFuZGxlX2VudHJ5KiBQcm9jZXNz
U3RhdGU6Omxvb2t1cEhhbmRsZUxvY2tlZChpbnQzMl90IGhhbmRsZSkKewogICAgY29uc3Qgc2l6ZV90
IE49bUhhbmRsZVRvT2JqZWN0LnNpemUoKTsKICAgIGlmIChOIDw9IChzaXplX3QpaGFuZGxlKSB7CiAg
ICAgICAgaGFuZGxlX2VudHJ5IGU7CiAgICAgICAgZS5iaW5kZXIgPSBOVUxMOwogICAgICAgIGUucmVm
cyA9IE5VTEw7CiAgICAgICAgc3RhdHVzX3QgZXJyID0gbUhhbmRsZVRvT2JqZWN0Lmluc2VydEF0KGUs
IE4sIGhhbmRsZSsxLU4pOwogICAgICAgIGlmIChlcnIgPCBOT19FUlJPUikgcmV0dXJuIE5VTEw7CiAg
ICB9CiAgICByZXR1cm4gJm1IYW5kbGVUb09iamVjdC5lZGl0SXRlbUF0KGhhbmRsZSk7Cn0KCnNwPElC
aW5kZXI+IFByb2Nlc3NTdGF0ZTo6Z2V0U3Ryb25nUHJveHlGb3JIYW5kbGUoaW50MzJfdCBoYW5kbGUp
CnsKICAgIHNwPElCaW5kZXI+IHJlc3VsdDsKCiAgICBBdXRvTXV0ZXggX2wobUxvY2spOwoKICAgIGhh
bmRsZV9lbnRyeSogZSA9IGxvb2t1cEhhbmRsZUxvY2tlZChoYW5kbGUpOwoKICAgIGlmIChlICE9IE5V
TEwpIHsKICAgICAgICAvLyBXZSBuZWVkIHRvIGNyZWF0ZSBhIG5ldyBCcEJpbmRlciBpZiB0aGVyZSBp
c24ndCBjdXJyZW50bHkgb25lLCBPUiB3ZQogICAgICAgIC8vIGFyZSB1bmFibGUgdG8gYWNxdWlyZSBh
IHdlYWsgcmVmZXJlbmNlIG9uIHRoaXMgY3VycmVudCBvbmUuICBTZWUgY29tbWVudAogICAgICAgIC8v
IGluIGdldFdlYWtQcm94eUZvckhhbmRsZSgpIGZvciBtb3JlIGluZm8gYWJvdXQgdGhpcy4KICAgICAg
ICBJQmluZGVyKiBiID0gZS0+YmluZGVyOwogICAgICAgIGlmIChiID09IE5VTEwgfHwgIWUtPnJlZnMt
PmF0dGVtcHRJbmNXZWFrKHRoaXMpKSB7CiAgICAgICAgICAgIGlmIChoYW5kbGUgPT0gMCkgewogICAg
ICAgICAgICAgICAgLy8gU3BlY2lhbCBjYXNlIGZvciBjb250ZXh0IG1hbmFnZXIuLi4KICAgICAgICAg
ICAgICAgIC8vIFRoZSBjb250ZXh0IG1hbmFnZXIgaXMgdGhlIG9ubHkgb2JqZWN0IGZvciB3aGljaCB3
ZSBjcmVhdGUKICAgICAgICAgICAgICAgIC8vIGEgQnBCaW5kZXIgcHJveHkgd2l0aG91dCBhbHJlYWR5
IGhvbGRpbmcgYSByZWZlcmVuY2UuCiAgICAgICAgICAgICAgICAvLyBQZXJmb3JtIGEgZHVtbXkgdHJh
bnNhY3Rpb24gdG8gZW5zdXJlIHRoZSBjb250ZXh0IG1hbmFnZXIKICAgICAgICAgICAgICAgIC8vIGlz
IHJlZ2lzdGVyZWQgYmVmb3JlIHdlIGNyZWF0ZSB0aGUgZmlyc3QgbG9jYWwgcmVmZXJlbmNlCiAgICAg
ICAgICAgICAgICAvLyB0byBpdCAod2hpY2ggd2lsbCBvY2N1ciB3aGVuIGNyZWF0aW5nIHRoZSBCcEJp
bmRlcikuCiAgICAgICAgICAgICAgICAvLyBJZiBhIGxvY2FsIHJlZmVyZW5jZSBpcyBjcmVhdGVkIGZv
ciB0aGUgQnBCaW5kZXIgd2hlbiB0aGUKICAgICAgICAgICAgICAgIC8vIGNvbnRleHQgbWFuYWdlciBp
cyBub3QgcHJlc2VudCwgdGhlIGRyaXZlciB3aWxsIGZhaWwgdG8KICAgICAgICAgICAgICAgIC8vIHBy
b3ZpZGUgYSByZWZlcmVuY2UgdG8gdGhlIGNvbnRleHQgbWFuYWdlciwgYnV0IHRoZQogICAgICAgICAg
ICAgICAgLy8gZHJpdmVyIEFQSSBkb2VzIG5vdCByZXR1cm4gc3RhdHVzLgogICAgICAgICAgICAgICAg
Ly8KICAgICAgICAgICAgICAgIC8vIE5vdGUgdGhhdCB0aGlzIGlzIG5vdCByYWNlLWZyZWUgaWYgdGhl
IGNvbnRleHQgbWFuYWdlcgogICAgICAgICAgICAgICAgLy8gZGllcyB3aGlsZSB0aGlzIGNvZGUgcnVu
cy4KICAgICAgICAgICAgICAgIC8vCiAgICAgICAgICAgICAgICAvLyBUT0RPOiBhZGQgYSBkcml2ZXIg
QVBJIHRvIHdhaXQgZm9yIGNvbnRleHQgbWFuYWdlciwgb3IKICAgICAgICAgICAgICAgIC8vIHN0b3Ag
c3BlY2lhbCBjYXNpbmcgaGFuZGxlIDAgZm9yIGNvbnRleHQgbWFuYWdlciBhbmQgYWRkCiAgICAgICAg
ICAgICAgICAvLyBhIGRyaXZlciBBUEkgdG8gZ2V0IGEgaGFuZGxlIHRvIHRoZSBjb250ZXh0IG1hbmFn
ZXIgd2l0aAogICAgICAgICAgICAgICAgLy8gcHJvcGVyIHJlZmVyZW5jZSBjb3VudGluZy4KCiAgICAg
ICAgICAgICAgICBQYXJjZWwgZGF0YTsKICAgICAgICAgICAgICAgIHN0YXR1c190IHN0YXR1cyA9IElQ
Q1RocmVhZFN0YXRlOjpzZWxmKCktPnRyYW5zYWN0KAogICAgICAgICAgICAgICAgICAgICAgICAwLCBJ
QmluZGVyOjpQSU5HX1RSQU5TQUNUSU9OLCBkYXRhLCBOVUxMLCAwKTsKICAgICAgICAgICAgICAgIGlm
IChzdGF0dXMgPT0gREVBRF9PQkpFQ1QpCiAgICAgICAgICAgICAgICAgICByZXR1cm4gTlVMTDsKICAg
ICAgICAgICAgfQoKICAgICAgICAgICAgYiA9IG5ldyBCcEJpbmRlcihoYW5kbGUpOyAKICAgICAgICAg
ICAgZS0+YmluZGVyID0gYjsKICAgICAgICAgICAgaWYgKGIpIGUtPnJlZnMgPSBiLT5nZXRXZWFrUmVm
cygpOwogICAgICAgICAgICByZXN1bHQgPSBiOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIC8v
IFRoaXMgbGl0dGxlIGJpdCBvZiBuYXN0eW5lc3MgaXMgdG8gYWxsb3cgdXMgdG8gYWRkIGEgcHJpbWFy
eQogICAgICAgICAgICAvLyByZWZlcmVuY2UgdG8gdGhlIHJlbW90ZSBwcm94eSB3aGVuIHRoaXMgdGVh
bSBkb2Vzbid0IGhhdmUgb25lCiAgICAgICAgICAgIC8vIGJ1dCBhbm90aGVyIHRlYW0gaXMgc2VuZGlu
ZyB0aGUgaGFuZGxlIHRvIHVzLgogICAgICAgICAgICByZXN1bHQuZm9yY2Vfc2V0KGIpOwogICAgICAg
ICAgICBlLT5yZWZzLT5kZWNXZWFrKHRoaXMpOwogICAgICAgIH0KICAgIH0KCiAgICByZXR1cm4gcmVz
dWx0Owp9Cgp3cDxJQmluZGVyPiBQcm9jZXNzU3RhdGU6OmdldFdlYWtQcm94eUZvckhhbmRsZShpbnQz
Ml90IGhhbmRsZSkKewogICAgd3A8SUJpbmRlcj4gcmVzdWx0OwoKICAgIEF1dG9NdXRleCBfbChtTG9j
ayk7CgogICAgaGFuZGxlX2VudHJ5KiBlID0gbG9va3VwSGFuZGxlTG9ja2VkKGhhbmRsZSk7CgogICAg
aWYgKGUgIT0gTlVMTCkgeyAgICAgICAgCiAgICAgICAgLy8gV2UgbmVlZCB0byBjcmVhdGUgYSBuZXcg
QnBCaW5kZXIgaWYgdGhlcmUgaXNuJ3QgY3VycmVudGx5IG9uZSwgT1Igd2UKICAgICAgICAvLyBhcmUg
dW5hYmxlIHRvIGFjcXVpcmUgYSB3ZWFrIHJlZmVyZW5jZSBvbiB0aGlzIGN1cnJlbnQgb25lLiAgVGhl
CiAgICAgICAgLy8gYXR0ZW1wdEluY1dlYWsoKSBpcyBzYWZlIGJlY2F1c2Ugd2Uga25vdyB0aGUgQnBC
aW5kZXIgZGVzdHJ1Y3RvciB3aWxsIGFsd2F5cwogICAgICAgIC8vIGNhbGwgZXhwdW5nZUhhbmRsZSgp
LCB3aGljaCBhY3F1aXJlcyB0aGUgc2FtZSBsb2NrIHdlIGFyZSBob2xkaW5nIG5vdy4KICAgICAgICAv
LyBXZSBuZWVkIHRvIGRvIHRoaXMgYmVjYXVzZSB0aGVyZSBpcyBhIHJhY2UgY29uZGl0aW9uIGJldHdl
ZW4gc29tZW9uZQogICAgICAgIC8vIHJlbGVhc2luZyBhIHJlZmVyZW5jZSBvbiB0aGlzIEJwQmluZGVy
LCBhbmQgYSBuZXcgcmVmZXJlbmNlIG9uIGl0cyBoYW5kbGUKICAgICAgICAvLyBhcnJpdmluZyBmcm9t
IHRoZSBkcml2ZXIuCiAgICAgICAgSUJpbmRlciogYiA9IGUtPmJpbmRlcjsKICAgICAgICBpZiAoYiA9
PSBOVUxMIHx8ICFlLT5yZWZzLT5hdHRlbXB0SW5jV2Vhayh0aGlzKSkgewogICAgICAgICAgICBiID0g
bmV3IEJwQmluZGVyKGhhbmRsZSk7CiAgICAgICAgICAgIHJlc3VsdCA9IGI7CiAgICAgICAgICAgIGUt
PmJpbmRlciA9IGI7CiAgICAgICAgICAgIGlmIChiKSBlLT5yZWZzID0gYi0+Z2V0V2Vha1JlZnMoKTsK
ICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXN1bHQgPSBiOwogICAgICAgICAgICBlLT5yZWZz
LT5kZWNXZWFrKHRoaXMpOwogICAgICAgIH0KICAgIH0KCiAgICByZXR1cm4gcmVzdWx0Owp9Cgp2b2lk
IFByb2Nlc3NTdGF0ZTo6ZXhwdW5nZUhhbmRsZShpbnQzMl90IGhhbmRsZSwgSUJpbmRlciogYmluZGVy
KQp7CiAgICBBdXRvTXV0ZXggX2wobUxvY2spOwogICAgCiAgICBoYW5kbGVfZW50cnkqIGUgPSBsb29r
dXBIYW5kbGVMb2NrZWQoaGFuZGxlKTsKCiAgICAvLyBUaGlzIGhhbmRsZSBtYXkgaGF2ZSBhbHJlYWR5
IGJlZW4gcmVwbGFjZWQgd2l0aCBhIG5ldyBCcEJpbmRlcgogICAgLy8gKGlmIHNvbWVvbmUgZmFpbGVk
IHRoZSBBdHRlbXB0SW5jV2VhaygpIGFib3ZlKTsgd2UgZG9uJ3Qgd2FudAogICAgLy8gdG8gb3Zlcndy
aXRlIGl0LgogICAgaWYgKGUgJiYgZS0+YmluZGVyID09IGJpbmRlcikgZS0+YmluZGVyID0gTlVMTDsK
fQoKU3RyaW5nOCBQcm9jZXNzU3RhdGU6Om1ha2VCaW5kZXJUaHJlYWROYW1lKCkgewogICAgaW50MzJf
dCBzID0gYW5kcm9pZF9hdG9taWNfYWRkKDEsICZtVGhyZWFkUG9vbFNlcSk7CiAgICBwaWRfdCBwaWQg
PSBnZXRwaWQoKTsKICAgIFN0cmluZzggbmFtZTsKICAgIG5hbWUuYXBwZW5kRm9ybWF0KCJCaW5kZXI6
JWRfJVgiLCBwaWQsIHMpOwogICAgcmV0dXJuIG5hbWU7Cn0KCnZvaWQgUHJvY2Vzc1N0YXRlOjpzcGF3
blBvb2xlZFRocmVhZChib29sIGlzTWFpbikKewogICAgaWYgKG1UaHJlYWRQb29sU3RhcnRlZCkgewog
ICAgICAgIFN0cmluZzggbmFtZSA9IG1ha2VCaW5kZXJUaHJlYWROYW1lKCk7CiAgICAgICAgQUxPR1Yo
IlNwYXduaW5nIG5ldyBwb29sZWQgdGhyZWFkLCBuYW1lPSVzXG4iLCBuYW1lLnN0cmluZygpKTsKICAg
ICAgICBzcDxUaHJlYWQ+IHQgPSBuZXcgUG9vbFRocmVhZChpc01haW4pOwogICAgICAgIHQtPnJ1bihu
YW1lLnN0cmluZygpKTsKICAgIH0KfQoKc3RhdHVzX3QgUHJvY2Vzc1N0YXRlOjpzZXRUaHJlYWRQb29s
TWF4VGhyZWFkQ291bnQoc2l6ZV90IG1heFRocmVhZHMpIHsKICAgIHN0YXR1c190IHJlc3VsdCA9IE5P
X0VSUk9SOwogICAgaWYgKGlvY3RsKG1Ecml2ZXJGRCwgQklOREVSX1NFVF9NQVhfVEhSRUFEUywgJm1h
eFRocmVhZHMpICE9IC0xKSB7CiAgICAgICAgbU1heFRocmVhZHMgPSBtYXhUaHJlYWRzOwogICAgfSBl
bHNlIHsKICAgICAgICByZXN1bHQgPSAtZXJybm87CiAgICAgICAgQUxPR0UoIkJpbmRlciBpb2N0bCB0
byBzZXQgbWF4IHRocmVhZHMgZmFpbGVkOiAlcyIsIHN0cmVycm9yKC1yZXN1bHQpKTsKICAgIH0KICAg
IHJldHVybiByZXN1bHQ7Cn0KCnZvaWQgUHJvY2Vzc1N0YXRlOjpnaXZlVGhyZWFkUG9vbE5hbWUoKSB7
CiAgICBhbmRyb2lkU2V0VGhyZWFkTmFtZSggbWFrZUJpbmRlclRocmVhZE5hbWUoKS5zdHJpbmcoKSAp
Owp9CgpTdHJpbmc4IFByb2Nlc3NTdGF0ZTo6Z2V0RHJpdmVyTmFtZSgpIHsKICAgIHJldHVybiBtRHJp
dmVyTmFtZTsKfQoKc3RhdGljIGludCBvcGVuX2RyaXZlcihjb25zdCBjaGFyICpkcml2ZXIpCnsKICAg
IGludCBmZCA9IG9wZW4oZHJpdmVyLCBPX1JEV1IgfCBPX0NMT0VYRUMpOwogICAgaWYgKGZkID49IDAp
IHsKICAgICAgICBpbnQgdmVycyA9IDA7CiAgICAgICAgc3RhdHVzX3QgcmVzdWx0ID0gaW9jdGwoZmQs
IEJJTkRFUl9WRVJTSU9OLCAmdmVycyk7CiAgICAgICAgaWYgKHJlc3VsdCA9PSAtMSkgewogICAgICAg
ICAgICBBTE9HRSgiQmluZGVyIGlvY3RsIHRvIG9idGFpbiB2ZXJzaW9uIGZhaWxlZDogJXMiLCBzdHJl
cnJvcihlcnJubykpOwogICAgICAgICAgICBjbG9zZShmZCk7CiAgICAgICAgICAgIGZkID0gLTE7CiAg
ICAgICAgfQogICAgICAgIGlmIChyZXN1bHQgIT0gMCB8fCB2ZXJzICE9IEJJTkRFUl9DVVJSRU5UX1BS
T1RPQ09MX1ZFUlNJT04pIHsKICAgICAgICAgIEFMT0dFKCJCaW5kZXIgZHJpdmVyIHByb3RvY29sKCVk
KSBkb2VzIG5vdCBtYXRjaCB1c2VyIHNwYWNlIHByb3RvY29sKCVkKSEgaW9jdGwoKSByZXR1cm4gdmFs
dWU6ICVkIiwKICAgICAgICAgICAgICAgIHZlcnMsIEJJTkRFUl9DVVJSRU5UX1BST1RPQ09MX1ZFUlNJ
T04sIHJlc3VsdCk7CiAgICAgICAgICAgIGNsb3NlKGZkKTsKICAgICAgICAgICAgZmQgPSAtMTsKICAg
ICAgICB9CiAgICAgICAgc2l6ZV90IG1heFRocmVhZHMgPSBERUZBVUxUX01BWF9CSU5ERVJfVEhSRUFE
UzsKICAgICAgICByZXN1bHQgPSBpb2N0bChmZCwgQklOREVSX1NFVF9NQVhfVEhSRUFEUywgJm1heFRo
cmVhZHMpOwogICAgICAgIGlmIChyZXN1bHQgPT0gLTEpIHsKICAgICAgICAgICAgQUxPR0UoIkJpbmRl
ciBpb2N0bCB0byBzZXQgbWF4IHRocmVhZHMgZmFpbGVkOiAlcyIsIHN0cmVycm9yKGVycm5vKSk7CiAg
ICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgICBBTE9HVygiT3BlbmluZyAnJXMnIGZhaWxlZDogJXNc
biIsIGRyaXZlciwgc3RyZXJyb3IoZXJybm8pKTsKICAgIH0KICAgIHJldHVybiBmZDsKfQoKUHJvY2Vz
c1N0YXRlOjpQcm9jZXNzU3RhdGUoY29uc3QgY2hhciAqZHJpdmVyKQogICAgOiBtRHJpdmVyTmFtZShT
dHJpbmc4KGRyaXZlcikpCiAgICAsIG1Ecml2ZXJGRChvcGVuX2RyaXZlcihkcml2ZXIpKQogICAgLCBt
Vk1TdGFydChNQVBfRkFJTEVEKQogICAgLCBtVGhyZWFkQ291bnRMb2NrKFBUSFJFQURfTVVURVhfSU5J
VElBTElaRVIpCiAgICAsIG1UaHJlYWRDb3VudERlY3JlbWVudChQVEhSRUFEX0NPTkRfSU5JVElBTEla
RVIpCiAgICAsIG1FeGVjdXRpbmdUaHJlYWRzQ291bnQoMCkKICAgICwgbU1heFRocmVhZHMoREVGQVVM
VF9NQVhfQklOREVSX1RIUkVBRFMpCiAgICAsIG1TdGFydmF0aW9uU3RhcnRUaW1lTXMoMCkKICAgICwg
bU1hbmFnZXNDb250ZXh0cyhmYWxzZSkKICAgICwgbUJpbmRlckNvbnRleHRDaGVja0Z1bmMoTlVMTCkK
ICAgICwgbUJpbmRlckNvbnRleHRVc2VyRGF0YShOVUxMKQogICAgLCBtVGhyZWFkUG9vbFN0YXJ0ZWQo
ZmFsc2UpCiAgICAsIG1UaHJlYWRQb29sU2VxKDEpCnsKICAgIGlmIChtRHJpdmVyRkQgPj0gMCkgewog
ICAgICAgIC8vIG1tYXAgdGhlIGJpbmRlciwgcHJvdmlkaW5nIGEgY2h1bmsgb2YgdmlydHVhbCBhZGRy
ZXNzIHNwYWNlIHRvIHJlY2VpdmUgdHJhbnNhY3Rpb25zLgogICAgICAgIG1WTVN0YXJ0ID0gbW1hcCgw
LCBCSU5ERVJfVk1fU0laRSwgUFJPVF9SRUFELCBNQVBfUFJJVkFURSB8IE1BUF9OT1JFU0VSVkUsIG1E
cml2ZXJGRCwgMCk7CiAgICAgICAgaWYgKG1WTVN0YXJ0ID09IE1BUF9GQUlMRUQpIHsKICAgICAgICAg
ICAgLy8gKnNpZ2gqCiAgICAgICAgICAgIEFMT0dFKCJVc2luZyAvZGV2L2JpbmRlciBmYWlsZWQ6IHVu
YWJsZSB0byBtbWFwIHRyYW5zYWN0aW9uIG1lbW9yeS5cbiIpOwogICAgICAgICAgICBjbG9zZShtRHJp
dmVyRkQpOwogICAgICAgICAgICBtRHJpdmVyRkQgPSAtMTsKICAgICAgICAgICAgbURyaXZlck5hbWUu
Y2xlYXIoKTsKICAgICAgICB9CiAgICB9CgogICAgTE9HX0FMV0FZU19GQVRBTF9JRihtRHJpdmVyRkQg
PCAwLCAiQmluZGVyIGRyaXZlciBjb3VsZCBub3QgYmUgb3BlbmVkLiAgVGVybWluYXRpbmcuIik7Cn0K
ClByb2Nlc3NTdGF0ZTo6flByb2Nlc3NTdGF0ZSgpCnsKICAgIGlmIChtRHJpdmVyRkQgPj0gMCkgewog
ICAgICAgIGlmIChtVk1TdGFydCAhPSBNQVBfRkFJTEVEKSB7CiAgICAgICAgICAgIG11bm1hcChtVk1T
dGFydCwgQklOREVSX1ZNX1NJWkUpOwogICAgICAgIH0KICAgICAgICBjbG9zZShtRHJpdmVyRkQpOwog
ICAgfQogICAgbURyaXZlckZEID0gLTE7Cn0KICAgICAgICAKfTsgLy8gbmFtZXNwYWNlIGFuZHJvaWQK
</data><mime>application/octet-stream</mime><width>0</width><height>0</height><duration>0</duration><resource-attributes><file-name>ProcessState.cp</file-name></resource-attributes></resource><resource><data encoding="base64">LyoKKioKKiogQ29weXJpZ2h0IDIwMDgsIFRoZSBBbmRyb2lkIE9wZW4gU291cmNlIFByb2plY3QKKioK
KiogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNl
bnNlIik7CioqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0
aCB0aGUgTGljZW5zZS4KKiogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0Cioq
CioqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKKioKKiogVW5s
ZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0
d2FyZQoqKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAi
QVMgSVMiIEJBU0lTLAoqKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lO
RCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KKiogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3Bl
Y2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAoqKiBsaW1pdGF0aW9ucyB1bmRl
ciB0aGUgTGljZW5zZS4KKi8KCiNpZm5kZWYgQU5EUk9JRF9NRURJQVBMQVlFUlNFUlZJQ0VfSAojZGVm
aW5lIEFORFJPSURfTUVESUFQTEFZRVJTRVJWSUNFX0gKCiNpbmNsdWRlIDxhcnBhL2luZXQuaD4KCiNp
bmNsdWRlIDx1dGlscy90aHJlYWRzLmg+CiNpbmNsdWRlIDx1dGlscy9FcnJvcnMuaD4KI2luY2x1ZGUg
PHV0aWxzL0tleWVkVmVjdG9yLmg+CiNpbmNsdWRlIDx1dGlscy9TdHJpbmc4Lmg+CiNpbmNsdWRlIDx1
dGlscy9WZWN0b3IuaD4KCiNpbmNsdWRlIDxtZWRpYS9NZWRpYVBsYXllckludGVyZmFjZS5oPgojaW5j
bHVkZSA8bWVkaWEvTWV0YWRhdGEuaD4KI2luY2x1ZGUgPG1lZGlhL3N0YWdlZnJpZ2h0L2ZvdW5kYXRp
b24vQUJhc2UuaD4KCiNpbmNsdWRlIDxhbmRyb2lkL2hhcmR3YXJlL21lZGlhL29teC8xLjAvSU9teC5o
PgoKI2luY2x1ZGUgPHN5c3RlbS9hdWRpby5oPgoKbmFtZXNwYWNlIGFuZHJvaWQgewoKc3RydWN0IEF1
ZGlvUGxheWJhY2tSYXRlOwpjbGFzcyBBdWRpb1RyYWNrOwpzdHJ1Y3QgQVZTeW5jU2V0dGluZ3M7CmNs
YXNzIElEYXRhU291cmNlOwpjbGFzcyBJTWVkaWFSZWNvcmRlcjsKY2xhc3MgSU1lZGlhTWV0YWRhdGFS
ZXRyaWV2ZXI7CmNsYXNzIElPTVg7CmNsYXNzIElSZW1vdGVEaXNwbGF5OwpjbGFzcyBJUmVtb3RlRGlz
cGxheUNsaWVudDsKY2xhc3MgTWVkaWFSZWNvcmRlckNsaWVudDsKCiNkZWZpbmUgQ0FMTEJBQ0tfQU5U
QUdPTklaRVIgMAojaWYgQ0FMTEJBQ0tfQU5UQUdPTklaRVIKY2xhc3MgQW50YWdvbml6ZXIgewpwdWJs
aWM6CiAgICBBbnRhZ29uaXplcihub3RpZnlfY2FsbGJhY2tfZiBjYiwgdm9pZCogY2xpZW50KTsKICAg
IHZvaWQgc3RhcnQoKSB7IG1BY3RpdmUgPSB0cnVlOyB9CiAgICB2b2lkIHN0b3AoKSB7IG1BY3RpdmUg
PSBmYWxzZTsgfQogICAgdm9pZCBraWxsKCk7CnByaXZhdGU6CiAgICBzdGF0aWMgY29uc3QgaW50IGlu
dGVydmFsOwogICAgQW50YWdvbml6ZXIoKTsKICAgIHN0YXRpYyBpbnQgY2FsbGJhY2tUaHJlYWQodm9p
ZCogY29va2llKTsKICAgIE11dGV4ICAgICAgICAgICAgICAgbUxvY2s7CiAgICBDb25kaXRpb24gICAg
ICAgICAgIG1Db25kaXRpb247CiAgICBib29sICAgICAgICAgICAgICAgIG1FeGl0OwogICAgYm9vbCAg
ICAgICAgICAgICAgICBtQWN0aXZlOwogICAgdm9pZCogICAgICAgICAgICAgICBtQ2xpZW50OwogICAg
bm90aWZ5X2NhbGxiYWNrX2YgICBtQ2I7Cn07CiNlbmRpZgoKY2xhc3MgTWVkaWFQbGF5ZXJTZXJ2aWNl
IDogcHVibGljIEJuTWVkaWFQbGF5ZXJTZXJ2aWNlCnsKICAgIGNsYXNzIENsaWVudDsKICAgIHR5cGVk
ZWYgOjphbmRyb2lkOjpoYXJkd2FyZTo6bWVkaWE6Om9teDo6VjFfMDo6SU9teCBJT214OwoKICAgIGNs
YXNzIEF1ZGlvT3V0cHV0IDogcHVibGljIE1lZGlhUGxheWVyQmFzZTo6QXVkaW9TaW5rCiAgICB7CiAg
ICAgICAgY2xhc3MgQ2FsbGJhY2tEYXRhOwoKICAgICBwdWJsaWM6CiAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgQXVkaW9PdXRwdXQoYXVkaW9fc2Vzc2lvbl90IHNlc3Npb25JZCwgdWlkX3QgdWlk
LCBpbnQgcGlkLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYXVk
aW9fYXR0cmlidXRlc190ICogYXR0cik7CiAgICAgICAgdmlydHVhbCAgICAgICAgICAgICAgICAgfkF1
ZGlvT3V0cHV0KCk7CgogICAgICAgIHZpcnR1YWwgYm9vbCAgICAgICAgICAgIHJlYWR5KCkgY29uc3Qg
eyByZXR1cm4gbVRyYWNrICE9IDA7IH0KICAgICAgICB2aXJ0dWFsIHNzaXplX3QgICAgICAgICBidWZm
ZXJTaXplKCkgY29uc3Q7CiAgICAgICAgdmlydHVhbCBzc2l6ZV90ICAgICAgICAgZnJhbWVDb3VudCgp
IGNvbnN0OwogICAgICAgIHZpcnR1YWwgc3NpemVfdCAgICAgICAgIGNoYW5uZWxDb3VudCgpIGNvbnN0
OwogICAgICAgIHZpcnR1YWwgc3NpemVfdCAgICAgICAgIGZyYW1lU2l6ZSgpIGNvbnN0OwogICAgICAg
IHZpcnR1YWwgdWludDMyX3QgICAgICAgIGxhdGVuY3koKSBjb25zdDsKICAgICAgICB2aXJ0dWFsIGZs
b2F0ICAgICAgICAgICBtc2Vjc1BlckZyYW1lKCkgY29uc3Q7CiAgICAgICAgdmlydHVhbCBzdGF0dXNf
dCAgICAgICAgZ2V0UG9zaXRpb24odWludDMyX3QgKnBvc2l0aW9uKSBjb25zdDsKICAgICAgICB2aXJ0
dWFsIHN0YXR1c190ICAgICAgICBnZXRUaW1lc3RhbXAoQXVkaW9UaW1lc3RhbXAgJnRzKSBjb25zdDsK
ICAgICAgICB2aXJ0dWFsIGludDY0X3QgICAgICAgICBnZXRQbGF5ZWRPdXREdXJhdGlvblVzKGludDY0
X3Qgbm93VXMpIGNvbnN0OwogICAgICAgIHZpcnR1YWwgc3RhdHVzX3QgICAgICAgIGdldEZyYW1lc1dy
aXR0ZW4odWludDMyX3QgKmZyYW1lc3dyaXR0ZW4pIGNvbnN0OwogICAgICAgIHZpcnR1YWwgYXVkaW9f
c2Vzc2lvbl90IGdldFNlc3Npb25JZCgpIGNvbnN0OwogICAgICAgIHZpcnR1YWwgdWludDMyX3QgICAg
ICAgIGdldFNhbXBsZVJhdGUoKSBjb25zdDsKICAgICAgICB2aXJ0dWFsIGludDY0X3QgICAgICAgICBn
ZXRCdWZmZXJEdXJhdGlvbkluVXMoKSBjb25zdDsKCiAgICAgICAgdmlydHVhbCBzdGF0dXNfdCAgICAg
ICAgb3BlbigKICAgICAgICAgICAgICAgIHVpbnQzMl90IHNhbXBsZVJhdGUsIGludCBjaGFubmVsQ291
bnQsIGF1ZGlvX2NoYW5uZWxfbWFza190IGNoYW5uZWxNYXNrLAogICAgICAgICAgICAgICAgYXVkaW9f
Zm9ybWF0X3QgZm9ybWF0LCBpbnQgYnVmZmVyQ291bnQsCiAgICAgICAgICAgICAgICBBdWRpb0NhbGxi
YWNrIGNiLCB2b2lkICpjb29raWUsCiAgICAgICAgICAgICAgICBhdWRpb19vdXRwdXRfZmxhZ3NfdCBm
bGFncyA9IEFVRElPX09VVFBVVF9GTEFHX05PTkUsCiAgICAgICAgICAgICAgICBjb25zdCBhdWRpb19v
ZmZsb2FkX2luZm9fdCAqb2ZmbG9hZEluZm8gPSBOVUxMLAogICAgICAgICAgICAgICAgYm9vbCBkb05v
dFJlY29ubmVjdCA9IGZhbHNlLAogICAgICAgICAgICAgICAgdWludDMyX3Qgc3VnZ2VzdGVkRnJhbWVD
b3VudCA9IDApOwoKICAgICAgICB2aXJ0dWFsIHN0YXR1c190ICAgICAgICBzdGFydCgpOwogICAgICAg
IHZpcnR1YWwgc3NpemVfdCAgICAgICAgIHdyaXRlKGNvbnN0IHZvaWQqIGJ1ZmZlciwgc2l6ZV90IHNp
emUsIGJvb2wgYmxvY2tpbmcgPSB0cnVlKTsKICAgICAgICB2aXJ0dWFsIHZvaWQgICAgICAgICAgICBz
dG9wKCk7CiAgICAgICAgdmlydHVhbCB2b2lkICAgICAgICAgICAgZmx1c2goKTsKICAgICAgICB2aXJ0
dWFsIHZvaWQgICAgICAgICAgICBwYXVzZSgpOwogICAgICAgIHZpcnR1YWwgdm9pZCAgICAgICAgICAg
IGNsb3NlKCk7CiAgICAgICAgICAgICAgICB2b2lkICAgICAgICAgICAgc2V0QXVkaW9TdHJlYW1UeXBl
KGF1ZGlvX3N0cmVhbV90eXBlX3Qgc3RyZWFtVHlwZSk7CiAgICAgICAgdmlydHVhbCBhdWRpb19zdHJl
YW1fdHlwZV90IGdldEF1ZGlvU3RyZWFtVHlwZSgpIGNvbnN0IHsgcmV0dXJuIG1TdHJlYW1UeXBlOyB9
CiAgICAgICAgICAgICAgICB2b2lkICAgICAgICAgICAgc2V0QXVkaW9BdHRyaWJ1dGVzKGNvbnN0IGF1
ZGlvX2F0dHJpYnV0ZXNfdCAqIGF0dHJpYnV0ZXMpOwoKICAgICAgICAgICAgICAgIHZvaWQgICAgICAg
ICAgICBzZXRWb2x1bWUoZmxvYXQgbGVmdCwgZmxvYXQgcmlnaHQpOwogICAgICAgIHZpcnR1YWwgc3Rh
dHVzX3QgICAgICAgIHNldFBsYXliYWNrUmF0ZShjb25zdCBBdWRpb1BsYXliYWNrUmF0ZSYgcmF0ZSk7
CiAgICAgICAgdmlydHVhbCBzdGF0dXNfdCAgICAgICAgZ2V0UGxheWJhY2tSYXRlKEF1ZGlvUGxheWJh
Y2tSYXRlKiByYXRlIC8qIG5vbm51bGwgKi8pOwoKICAgICAgICAgICAgICAgIHN0YXR1c190ICAgICAg
ICBzZXRBdXhFZmZlY3RTZW5kTGV2ZWwoZmxvYXQgbGV2ZWwpOwogICAgICAgICAgICAgICAgc3RhdHVz
X3QgICAgICAgIGF0dGFjaEF1eEVmZmVjdChpbnQgZWZmZWN0SWQpOwogICAgICAgIHZpcnR1YWwgc3Rh
dHVzX3QgICAgICAgIGR1bXAoaW50IGZkLCBjb25zdCBWZWN0b3I8U3RyaW5nMTY+JiBhcmdzKSBjb25z
dDsKCiAgICAgICAgc3RhdGljIGJvb2wgICAgICAgICAgICAgaXNPbkVtdWxhdG9yKCk7CiAgICAgICAg
c3RhdGljIGludCAgICAgICAgICAgICAgZ2V0TWluQnVmZmVyQ291bnQoKTsKICAgICAgICAgICAgICAg
IHZvaWQgICAgICAgICAgICBzZXROZXh0T3V0cHV0KGNvbnN0IHNwPEF1ZGlvT3V0cHV0PiYgbmV4dE91
dHB1dCk7CiAgICAgICAgICAgICAgICB2b2lkICAgICAgICAgICAgc3dpdGNoVG9OZXh0T3V0cHV0KCk7
CiAgICAgICAgdmlydHVhbCBib29sICAgICAgICAgICAgbmVlZHNUcmFpbGluZ1BhZGRpbmcoKSB7IHJl
dHVybiBtTmV4dE91dHB1dCA9PSBOVUxMOyB9CiAgICAgICAgdmlydHVhbCBzdGF0dXNfdCAgICAgICAg
c2V0UGFyYW1ldGVycyhjb25zdCBTdHJpbmc4JiBrZXlWYWx1ZVBhaXJzKTsKICAgICAgICB2aXJ0dWFs
IFN0cmluZzggICAgICAgICBnZXRQYXJhbWV0ZXJzKGNvbnN0IFN0cmluZzgmIGtleXMpOwoKICAgICAg
ICB2aXJ0dWFsIFZvbHVtZVNoYXBlcjo6U3RhdHVzIGFwcGx5Vm9sdW1lU2hhcGVyKAogICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3A8Vm9sdW1lU2hhcGVyOjpDb25maWd1
cmF0aW9uPiYgY29uZmlndXJhdGlvbiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgIGNvbnN0IHNwPFZvbHVtZVNoYXBlcjo6T3BlcmF0aW9uPiYgb3BlcmF0aW9uKSBvdmVycmlkZTsK
ICAgICAgICB2aXJ0dWFsIHNwPFZvbHVtZVNoYXBlcjo6U3RhdGU+IGdldFZvbHVtZVNoYXBlclN0YXRl
KGludCBpZCkgb3ZlcnJpZGU7CgogICAgcHJpdmF0ZToKICAgICAgICBzdGF0aWMgdm9pZCAgICAgICAg
ICAgICBzZXRNaW5CdWZmZXJDb3VudCgpOwogICAgICAgIHN0YXRpYyB2b2lkICAgICAgICAgICAgIENh
bGxiYWNrV3JhcHBlcigKICAgICAgICAgICAgICAgIGludCBldmVudCwgdm9pZCAqbWUsIHZvaWQgKmlu
Zm8pOwogICAgICAgICAgICAgICB2b2lkICAgICAgICAgICAgIGRlbGV0ZVJlY3ljbGVkVHJhY2tfbCgp
OwogICAgICAgICAgICAgICB2b2lkICAgICAgICAgICAgIGNsb3NlX2woKTsKICAgICAgICAgICBzdGF0
dXNfdCAgICAgICAgICAgICB1cGRhdGVUcmFjaygpOwoKICAgICAgICBzcDxBdWRpb1RyYWNrPiAgICAg
ICAgICBtVHJhY2s7CiAgICAgICAgc3A8QXVkaW9UcmFjaz4gICAgICAgICAgbVJlY3ljbGVkVHJhY2s7
CiAgICAgICAgc3A8QXVkaW9PdXRwdXQ+ICAgICAgICAgbU5leHRPdXRwdXQ7CiAgICAgICAgQXVkaW9D
YWxsYmFjayAgICAgICAgICAgbUNhbGxiYWNrOwogICAgICAgIHZvaWQgKiAgICAgICAgICAgICAgICAg
IG1DYWxsYmFja0Nvb2tpZTsKICAgICAgICBDYWxsYmFja0RhdGEgKiAgICAgICAgICBtQ2FsbGJhY2tE
YXRhOwogICAgICAgIGF1ZGlvX3N0cmVhbV90eXBlX3QgICAgIG1TdHJlYW1UeXBlOwogICAgICAgIGF1
ZGlvX2F0dHJpYnV0ZXNfdCAqICAgIG1BdHRyaWJ1dGVzOwogICAgICAgIGZsb2F0ICAgICAgICAgICAg
ICAgICAgIG1MZWZ0Vm9sdW1lOwogICAgICAgIGZsb2F0ICAgICAgICAgICAgICAgICAgIG1SaWdodFZv
bHVtZTsKICAgICAgICBBdWRpb1BsYXliYWNrUmF0ZSAgICAgICBtUGxheWJhY2tSYXRlOwogICAgICAg
IHVpbnQzMl90ICAgICAgICAgICAgICAgIG1TYW1wbGVSYXRlSHo7IC8vIHNhbXBsZSByYXRlIG9mIHRo
ZSBjb250ZW50LCBhcyBzZXQgaW4gb3BlbigpCiAgICAgICAgZmxvYXQgICAgICAgICAgICAgICAgICAg
bU1zZWNzUGVyRnJhbWU7CiAgICAgICAgc2l6ZV90ICAgICAgICAgICAgICAgICAgbUZyYW1lU2l6ZTsK
ICAgICAgICBhdWRpb19zZXNzaW9uX3QgICAgICAgICBtU2Vzc2lvbklkOwogICAgICAgIHVpZF90ICAg
ICAgICAgICAgICAgICAgIG1VaWQ7CiAgICAgICAgaW50ICAgICAgICAgICAgICAgICAgICAgbVBpZDsK
ICAgICAgICBmbG9hdCAgICAgICAgICAgICAgICAgICBtU2VuZExldmVsOwogICAgICAgIGludCAgICAg
ICAgICAgICAgICAgICAgIG1BdXhFZmZlY3RJZDsKICAgICAgICBhdWRpb19vdXRwdXRfZmxhZ3NfdCAg
ICBtRmxhZ3M7CiAgICAgICAgc3A8Vm9sdW1lSGFuZGxlcj4gICAgICAgbVZvbHVtZUhhbmRsZXI7CiAg
ICAgICAgbXV0YWJsZSBNdXRleCAgICAgICAgICAgbUxvY2s7CgogICAgICAgIC8vIHN0YXRpYyB2YXJp
YWJsZXMgYmVsb3cgbm90IHByb3RlY3RlZCBieSBtdXRleAogICAgICAgIHN0YXRpYyBib29sICAgICAg
ICAgICAgIG1Jc09uRW11bGF0b3I7CiAgICAgICAgc3RhdGljIGludCAgICAgICAgICAgICAgbU1pbkJ1
ZmZlckNvdW50OyAgLy8gMTIgZm9yIGVtdWxhdG9yOyBvdGhlcndpc2UgNAoKICAgICAgICAvLyBDYWxs
YmFja0RhdGEgaXMgd2hhdCBpcyBwYXNzZWQgdG8gdGhlIEF1ZGlvVHJhY2sgYXMgdGhlICJ1c2VyIiBk
YXRhLgogICAgICAgIC8vIFdlIG5lZWQgdG8gYmUgYWJsZSB0byB0YXJnZXQgdGhpcyB0byBhIGRpZmZl
cmVudCBPdXRwdXQgb24gdGhlIGZseSwKICAgICAgICAvLyBzbyB3ZSBjYW4ndCB1c2UgdGhlIE91dHB1
dCBpdHNlbGYgZm9yIHRoaXMuCiAgICAgICAgY2xhc3MgQ2FsbGJhY2tEYXRhIHsKICAgICAgICAgICAg
ZnJpZW5kIEF1ZGlvT3V0cHV0OwogICAgICAgIHB1YmxpYzoKICAgICAgICAgICAgZXhwbGljaXQgQ2Fs
bGJhY2tEYXRhKEF1ZGlvT3V0cHV0ICpjb29raWUpIHsKICAgICAgICAgICAgICAgIG1EYXRhID0gY29v
a2llOwogICAgICAgICAgICAgICAgbVN3aXRjaGluZyA9IGZhbHNlOwogICAgICAgICAgICB9CiAgICAg
ICAgICAgIEF1ZGlvT3V0cHV0ICogICBnZXRPdXRwdXQoKSBjb25zdCB7IHJldHVybiBtRGF0YTsgfQog
ICAgICAgICAgICB2b2lkICAgICAgICAgICAgc2V0T3V0cHV0KEF1ZGlvT3V0cHV0KiBuZXdjb29raWUp
IHsgbURhdGEgPSBuZXdjb29raWU7IH0KICAgICAgICAgICAgLy8gbG9jay91bmxvY2sgYXJlIHVzZWQg
YnkgdGhlIGNhbGxiYWNrIGJlZm9yZSBhY2Nlc3NpbmcgdGhlIHBheWxvYWQgb2YgdGhpcyBvYmplY3QK
ICAgICAgICAgICAgdm9pZCAgICAgICAgICAgIGxvY2soKSBjb25zdCB7IG1Mb2NrLmxvY2soKTsgfQog
ICAgICAgICAgICB2b2lkICAgICAgICAgICAgdW5sb2NrKCkgY29uc3QgeyBtTG9jay51bmxvY2soKTsg
fQoKICAgICAgICAgICAgLy8gdHJ5QmVnaW5UcmFja1N3aXRjaC9lbmRUcmFja1N3aXRjaCBhcmUgdXNl
ZCB3aGVuIHRoZSBDYWxsYmFja0RhdGEgaXMgaGFuZGVkIG92ZXIKICAgICAgICAgICAgLy8gdG8gdGhl
IG5leHQgc2luay4KCiAgICAgICAgICAgIC8vIHRyeUJlZ2luVHJhY2tTd2l0Y2goKSByZXR1cm5zIHRy
dWUgb25seSBpZiBpdCBvYnRhaW5zIHRoZSBsb2NrLgogICAgICAgICAgICBib29sICAgICAgICAgICAg
dHJ5QmVnaW5UcmFja1N3aXRjaCgpIHsKICAgICAgICAgICAgICAgIExPR19BTFdBWVNfRkFUQUxfSUYo
bVN3aXRjaGluZywgInRyeUJlZ2luVHJhY2tTd2l0Y2goKSBhbHJlYWR5IGNhbGxlZCIpOwogICAgICAg
ICAgICAgICAgaWYgKG1Mb2NrLnRyeUxvY2soKSAhPSBPSykgewogICAgICAgICAgICAgICAgICAgIHJl
dHVybiBmYWxzZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIG1Td2l0Y2hpbmcgPSB0
cnVlOwogICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAg
dm9pZCAgICAgICAgICAgIGVuZFRyYWNrU3dpdGNoKCkgewogICAgICAgICAgICAgICAgaWYgKG1Td2l0
Y2hpbmcpIHsKICAgICAgICAgICAgICAgICAgICBtTG9jay51bmxvY2soKTsKICAgICAgICAgICAgICAg
IH0KICAgICAgICAgICAgICAgIG1Td2l0Y2hpbmcgPSBmYWxzZTsKICAgICAgICAgICAgfQogICAgICAg
IHByaXZhdGU6CiAgICAgICAgICAgIEF1ZGlvT3V0cHV0ICogICBtRGF0YTsKICAgICAgICAgICAgbXV0
YWJsZSBNdXRleCAgIG1Mb2NrOyAvLyBhIHJlY3Vyc2l2ZSBtdXRleCBtaWdodCBtYWtlIHRoaXMgdW5u
ZWNlc3NhcnkuCiAgICAgICAgICAgIGJvb2wgICAgICAgICAgICBtU3dpdGNoaW5nOwogICAgICAgICAg
ICBESVNBTExPV19FVklMX0NPTlNUUlVDVE9SUyhDYWxsYmFja0RhdGEpOwogICAgICAgIH07CgogICAg
fTsgLy8gQXVkaW9PdXRwdXQKCgpwdWJsaWM6CiAgICBzdGF0aWMgIHZvaWQgICAgICAgICAgICAgICAg
aW5zdGFudGlhdGUoKTsKCiAgICAvLyBJTWVkaWFQbGF5ZXJTZXJ2aWNlIGludGVyZmFjZQogICAgdmly
dHVhbCBzcDxJTWVkaWFSZWNvcmRlcj4gIGNyZWF0ZU1lZGlhUmVjb3JkZXIoY29uc3QgU3RyaW5nMTYg
Jm9wUGFja2FnZU5hbWUpOwogICAgdm9pZCAgICByZW1vdmVNZWRpYVJlY29yZGVyQ2xpZW50KGNvbnN0
IHdwPE1lZGlhUmVjb3JkZXJDbGllbnQ+JiBjbGllbnQpOwogICAgdmlydHVhbCBzcDxJTWVkaWFNZXRh
ZGF0YVJldHJpZXZlcj4gY3JlYXRlTWV0YWRhdGFSZXRyaWV2ZXIoKTsKCiAgICB2aXJ0dWFsIHNwPElN
ZWRpYVBsYXllcj4gICAgY3JlYXRlKGNvbnN0IHNwPElNZWRpYVBsYXllckNsaWVudD4mIGNsaWVudCwK
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXVkaW9fc2Vzc2lvbl90IGF1ZGlv
U2Vzc2lvbklkKTsKCiAgICB2aXJ0dWFsIHNwPElNZWRpYUNvZGVjTGlzdD4gZ2V0Q29kZWNMaXN0KCkg
Y29uc3Q7CiAgICB2aXJ0dWFsIHNwPElPTVg+ICAgICAgICAgICAgZ2V0T01YKCk7CiAgICB2aXJ0dWFs
IHNwPElIRENQPiAgICAgICAgICAgbWFrZUhEQ1AoYm9vbCBjcmVhdGVFbmNyeXB0aW9uTW9kdWxlKTsK
CiAgICB2aXJ0dWFsIHNwPElSZW1vdGVEaXNwbGF5PiBsaXN0ZW5Gb3JSZW1vdGVEaXNwbGF5KGNvbnN0
IFN0cmluZzE2ICZvcFBhY2thZ2VOYW1lLAogICAgICAgICAgICBjb25zdCBzcDxJUmVtb3RlRGlzcGxh
eUNsaWVudD4mIGNsaWVudCwgY29uc3QgU3RyaW5nOCYgaWZhY2UpOwogICAgdmlydHVhbCBzdGF0dXNf
dCAgICAgICAgICAgIGR1bXAoaW50IGZkLCBjb25zdCBWZWN0b3I8U3RyaW5nMTY+JiBhcmdzKTsKCiAg
ICAgICAgICAgIHZvaWQgICAgICAgICAgICAgICAgcmVtb3ZlQ2xpZW50KGNvbnN0IHdwPENsaWVudD4m
IGNsaWVudCk7CiAgICAgICAgICAgIGJvb2wgICAgICAgICAgICAgICAgaGFzQ2xpZW50KHdwPENsaWVu
dD4gY2xpZW50KTsKCiAgICBlbnVtIHsKICAgICAgICBNRURJQVNFUlZFUl9QUk9DRVNTX0RFQVRIID0g
MCwKICAgICAgICBNRURJQUVYVFJBQ1RPUl9QUk9DRVNTX0RFQVRIID0gMSwKICAgICAgICBNRURJQUNP
REVDX1BST0NFU1NfREVBVEggPSAyLAogICAgICAgIEFVRElPX1BST0NFU1NfREVBVEggPSAzLCAgIC8v
IGN1cnJlbnRseSBubyBuZWVkIHRvIHRyYWNrIHRoaXMKICAgICAgICBDQU1FUkFfUFJPQ0VTU19ERUFU
SCA9IDQKICAgIH07CgogICAgLy8gQ29sbGVjdCBpbmZvIG9mIHRoZSBjb2RlYyB1c2FnZSBmcm9tIG1l
ZGlhIHBsYXllciBhbmQgbWVkaWEgcmVjb3JkZXIKICAgIHZpcnR1YWwgdm9pZCAgICAgICAgICAgICAg
ICBhZGRCYXR0ZXJ5RGF0YSh1aW50MzJfdCBwYXJhbXMpOwogICAgLy8gQVBJIGZvciB0aGUgQmF0dGVy
eSBhcHAgdG8gcHVsbCB0aGUgZGF0YSBvZiBjb2RlY3MgdXNhZ2UKICAgIHZpcnR1YWwgc3RhdHVzX3Qg
ICAgICAgICAgICBwdWxsQmF0dGVyeURhdGEoUGFyY2VsKiByZXBseSk7CnByaXZhdGU6CiAgICBzdHJ1
Y3QgQmF0dGVyeVRyYWNrZXIgewogICAgICAgIEJhdHRlcnlUcmFja2VyKCk7CiAgICAgICAgLy8gQ29s
bGVjdCBpbmZvIG9mIHRoZSBjb2RlYyB1c2FnZSBmcm9tIG1lZGlhIHBsYXllciBhbmQgbWVkaWEgcmVj
b3JkZXIKICAgICAgICB2b2lkIGFkZEJhdHRlcnlEYXRhKHVpbnQzMl90IHBhcmFtcyk7CiAgICAgICAg
Ly8gQVBJIGZvciB0aGUgQmF0dGVyeSBhcHAgdG8gcHVsbCB0aGUgZGF0YSBvZiBjb2RlY3MgdXNhZ2UK
ICAgICAgICBzdGF0dXNfdCBwdWxsQmF0dGVyeURhdGEoUGFyY2VsKiByZXBseSk7CgogICAgcHJpdmF0
ZToKICAgICAgICAvLyBGb3IgYmF0dGVyeSB1c2FnZSB0cmFja2luZyBwdXJwb3NlCiAgICAgICAgc3Ry
dWN0IEJhdHRlcnlVc2FnZUluZm8gewogICAgICAgICAgICAvLyBob3cgbWFueSBzdHJlYW1zIGFyZSBi
ZWluZyBwbGF5ZWQgYnkgb25lIFVJRAogICAgICAgICAgICBpbnQgICAgIHJlZkNvdW50OwogICAgICAg
ICAgICAvLyBhIHRlbXAgdmFyaWFibGUgdG8gc3RvcmUgdGhlIGR1cmF0aW9uKG1zKSBvZiBhdWRpbyBj
b2RlY3MKICAgICAgICAgICAgLy8gd2hlbiB3ZSBzdGFydCBhIGF1ZGlvIGNvZGVjLCB3ZSBtaW51cyB0
aGUgc3lzdGVtIHRpbWUgZnJvbSBhdWRpb0xhc3RUaW1lCiAgICAgICAgICAgIC8vIHdoZW4gd2UgcGF1
c2UgaXQsIHdlIGFkZCB0aGUgc3lzdGVtIHRpbWUgYmFjayB0byB0aGUgYXVkaW9MYXN0VGltZQogICAg
ICAgICAgICAvLyBzbyBhZnRlciB0aGUgcGF1c2UsIGF1ZGlvTGFzdFRpbWUgPSBwYXVzZSB0aW1lIC0g
c3RhcnQgdGltZQogICAgICAgICAgICAvLyBpZiBtdWx0aXBsZSBhdWRpbyBzdHJlYW1zIGFyZSBwbGF5
ZWQgKG9yIHJlY29yZGVkKSwgdGhlbiBhdWRpb0xhc3RUaW1lCiAgICAgICAgICAgIC8vID0gdGhlIHRv
dGFsIHBsYXlpbmcgdGltZSBvZiBhbGwgdGhlIHN0cmVhbXMKICAgICAgICAgICAgaW50MzJfdCBhdWRp
b0xhc3RUaW1lOwogICAgICAgICAgICAvLyB3aGVuIGFsbCB0aGUgYXVkaW8gc3RyZWFtcyBhcmUgYmVp
bmcgcGF1c2VkLCB3ZSBhc3NpZ24gYXVkaW9MYXN0VGltZSB0bwogICAgICAgICAgICAvLyB0aGlzIHZh
cmlhYmxlLCBzbyB0aGlzIHZhbHVlIGNvdWxkIGJlIHByb3ZpZGVkIHRvIHRoZSBiYXR0ZXJ5IGFwcAog
ICAgICAgICAgICAvLyBpbiB0aGUgbmV4dCBwdWxsQmF0dGVyeURhdGEgY2FsbAogICAgICAgICAgICBp
bnQzMl90IGF1ZGlvVG90YWxUaW1lOwoKICAgICAgICAgICAgaW50MzJfdCB2aWRlb0xhc3RUaW1lOwog
ICAgICAgICAgICBpbnQzMl90IHZpZGVvVG90YWxUaW1lOwogICAgICAgIH07CiAgICAgICAgS2V5ZWRW
ZWN0b3I8aW50LCBCYXR0ZXJ5VXNhZ2VJbmZvPiAgICBtQmF0dGVyeURhdGE7CgogICAgICAgIGVudW0g
ewogICAgICAgICAgICBTUEVBS0VSLAogICAgICAgICAgICBPVEhFUl9BVURJT19ERVZJQ0UsCiAgICAg
ICAgICAgIFNQRUFLRVJfQU5EX09USEVSLAogICAgICAgICAgICBOVU1fQVVESU9fREVWSUNFUwogICAg
ICAgIH07CgogICAgICAgIHN0cnVjdCBCYXR0ZXJ5QXVkaW9GbGluZ2VyVXNhZ2VJbmZvIHsKICAgICAg
ICAgICAgaW50IHJlZkNvdW50OyAvLyBob3cgbWFueSBhdWRpbyBzdHJlYW1zIGFyZSBiZWluZyBwbGF5
ZWQKICAgICAgICAgICAgaW50IGRldmljZU9uW05VTV9BVURJT19ERVZJQ0VTXTsgLy8gd2hldGhlciB0
aGUgZGV2aWNlIGlzIGN1cnJlbnRseSB1c2VkCiAgICAgICAgICAgIGludDMyX3QgbGFzdFRpbWVbTlVN
X0FVRElPX0RFVklDRVNdOyAvLyBpbiBtcwogICAgICAgICAgICAvLyB0b3RhbFRpbWVbXTogdG90YWwg
dGltZSBvZiBhdWRpbyBvdXRwdXQgZGV2aWNlcyB1c2FnZQogICAgICAgICAgICBpbnQzMl90IHRvdGFs
VGltZVtOVU1fQVVESU9fREVWSUNFU107IC8vIGluIG1zCiAgICAgICAgfTsKCiAgICAgICAgLy8gVGhp
cyB2YXJpYWxibGUgaXMgdXNlZCB0byByZWNvcmQgdGhlIHVzYWdlIG9mIGF1ZGlvIG91dHB1dCBkZXZp
Y2UKICAgICAgICAvLyBmb3IgYmF0dGVyeSBhcHAKICAgICAgICBCYXR0ZXJ5QXVkaW9GbGluZ2VyVXNh
Z2VJbmZvIG1CYXR0ZXJ5QXVkaW87CgogICAgICAgIG11dGFibGUgTXV0ZXggbUxvY2s7CiAgICB9Owog
ICAgQmF0dGVyeVRyYWNrZXIgbUJhdHRlcnlUcmFja2VyOwoKICAgIGNsYXNzIENsaWVudCA6IHB1Ymxp
YyBCbk1lZGlhUGxheWVyIHsKICAgICAgICAvLyBJTWVkaWFQbGF5ZXIgaW50ZXJmYWNlCiAgICAgICAg
dmlydHVhbCB2b2lkICAgICAgICAgICAgZGlzY29ubmVjdCgpOwogICAgICAgIHZpcnR1YWwgc3RhdHVz
X3QgICAgICAgIHNldFZpZGVvU3VyZmFjZVRleHR1cmUoCiAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICBjb25zdCBzcDxJR3JhcGhpY0J1ZmZlclByb2R1Y2VyPiYgYnVmZmVyUHJvZHVj
ZXIpOwogICAgICAgIHZpcnR1YWwgc3RhdHVzX3QgICAgICAgIHNldEJ1ZmZlcmluZ1NldHRpbmdzKGNv
bnN0IEJ1ZmZlcmluZ1NldHRpbmdzJiBidWZmZXJpbmcpIG92ZXJyaWRlOwogICAgICAgIHZpcnR1YWwg
c3RhdHVzX3QgICAgICAgIGdldERlZmF1bHRCdWZmZXJpbmdTZXR0aW5ncygKICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgIEJ1ZmZlcmluZ1NldHRpbmdzKiBidWZmZXJpbmcgLyogbm9u
bnVsbCAqLykgb3ZlcnJpZGU7CiAgICAgICAgdmlydHVhbCBzdGF0dXNfdCAgICAgICAgcHJlcGFyZUFz
eW5jKCk7CiAgICAgICAgdmlydHVhbCBzdGF0dXNfdCAgICAgICAgc3RhcnQoKTsKICAgICAgICB2aXJ0
dWFsIHN0YXR1c190ICAgICAgICBzdG9wKCk7CiAgICAgICAgdmlydHVhbCBzdGF0dXNfdCAgICAgICAg
cGF1c2UoKTsKICAgICAgICB2aXJ0dWFsIHN0YXR1c190ICAgICAgICBpc1BsYXlpbmcoYm9vbCogc3Rh
dGUpOwogICAgICAgIHZpcnR1YWwgc3RhdHVzX3QgICAgICAgIHNldFBsYXliYWNrU2V0dGluZ3MoY29u
c3QgQXVkaW9QbGF5YmFja1JhdGUmIHJhdGUpOwogICAgICAgIHZpcnR1YWwgc3RhdHVzX3QgICAgICAg
IGdldFBsYXliYWNrU2V0dGluZ3MoQXVkaW9QbGF5YmFja1JhdGUqIHJhdGUgLyogbm9ubnVsbCAqLyk7
CiAgICAgICAgdmlydHVhbCBzdGF0dXNfdCAgICAgICAgc2V0U3luY1NldHRpbmdzKGNvbnN0IEFWU3lu
Y1NldHRpbmdzJiByYXRlLCBmbG9hdCB2aWRlb0Zwc0hpbnQpOwogICAgICAgIHZpcnR1YWwgc3RhdHVz
X3QgICAgICAgIGdldFN5bmNTZXR0aW5ncyhBVlN5bmNTZXR0aW5ncyogcmF0ZSAvKiBub25udWxsICov
LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbG9hdCogdmlk
ZW9GcHMgLyogbm9ubnVsbCAqLyk7CiAgICAgICAgdmlydHVhbCBzdGF0dXNfdCAgICAgICAgc2Vla1Rv
KAogICAgICAgICAgICAgICAgaW50IG1zZWMsCiAgICAgICAgICAgICAgICBNZWRpYVBsYXllclNlZWtN
b2RlIG1vZGUgPSBNZWRpYVBsYXllclNlZWtNb2RlOjpTRUVLX1BSRVZJT1VTX1NZTkMpOwogICAgICAg
IHZpcnR1YWwgc3RhdHVzX3QgICAgICAgIGdldEN1cnJlbnRQb3NpdGlvbihpbnQqIG1zZWMpOwogICAg
ICAgIHZpcnR1YWwgc3RhdHVzX3QgICAgICAgIGdldER1cmF0aW9uKGludCogbXNlYyk7CiAgICAgICAg
dmlydHVhbCBzdGF0dXNfdCAgICAgICAgcmVzZXQoKTsKICAgICAgICB2aXJ0dWFsIHN0YXR1c190ICAg
ICAgICBzZXRBdWRpb1N0cmVhbVR5cGUoYXVkaW9fc3RyZWFtX3R5cGVfdCB0eXBlKTsKICAgICAgICB2
aXJ0dWFsIHN0YXR1c190ICAgICAgICBzZXRMb29waW5nKGludCBsb29wKTsKICAgICAgICB2aXJ0dWFs
IHN0YXR1c190ICAgICAgICBzZXRWb2x1bWUoZmxvYXQgbGVmdFZvbHVtZSwgZmxvYXQgcmlnaHRWb2x1
bWUpOwogICAgICAgIHZpcnR1YWwgc3RhdHVzX3QgICAgICAgIGludm9rZShjb25zdCBQYXJjZWwmIHJl
cXVlc3QsIFBhcmNlbCAqcmVwbHkpOwogICAgICAgIHZpcnR1YWwgc3RhdHVzX3QgICAgICAgIHNldE1l
dGFkYXRhRmlsdGVyKGNvbnN0IFBhcmNlbCYgZmlsdGVyKTsKICAgICAgICB2aXJ0dWFsIHN0YXR1c190
ICAgICAgICBnZXRNZXRhZGF0YShib29sIHVwZGF0ZV9vbmx5LAogICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgIGJvb2wgYXBwbHlfZmlsdGVyLAogICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgIFBhcmNlbCAqcmVwbHkpOwogICAgICAgIHZpcnR1YWwgc3Rh
dHVzX3QgICAgICAgIHNldEF1eEVmZmVjdFNlbmRMZXZlbChmbG9hdCBsZXZlbCk7CiAgICAgICAgdmly
dHVhbCBzdGF0dXNfdCAgICAgICAgYXR0YWNoQXV4RWZmZWN0KGludCBlZmZlY3RJZCk7CiAgICAgICAg
dmlydHVhbCBzdGF0dXNfdCAgICAgICAgc2V0UGFyYW1ldGVyKGludCBrZXksIGNvbnN0IFBhcmNlbCAm
cmVxdWVzdCk7CiAgICAgICAgdmlydHVhbCBzdGF0dXNfdCAgICAgICAgZ2V0UGFyYW1ldGVyKGludCBr
ZXksIFBhcmNlbCAqcmVwbHkpOwogICAgICAgIHZpcnR1YWwgc3RhdHVzX3QgICAgICAgIHNldFJldHJh
bnNtaXRFbmRwb2ludChjb25zdCBzdHJ1Y3Qgc29ja2FkZHJfaW4qIGVuZHBvaW50KTsKICAgICAgICB2
aXJ0dWFsIHN0YXR1c190ICAgICAgICBnZXRSZXRyYW5zbWl0RW5kcG9pbnQoc3RydWN0IHNvY2thZGRy
X2luKiBlbmRwb2ludCk7CiAgICAgICAgdmlydHVhbCBzdGF0dXNfdCAgICAgICAgc2V0TmV4dFBsYXll
cihjb25zdCBzcDxJTWVkaWFQbGF5ZXI+JiBwbGF5ZXIpOwoKICAgICAgICB2aXJ0dWFsIFZvbHVtZVNo
YXBlcjo6U3RhdHVzIGFwcGx5Vm9sdW1lU2hhcGVyKAogICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgY29uc3Qgc3A8Vm9sdW1lU2hhcGVyOjpDb25maWd1cmF0aW9uPiYgY29uZmlndXJh
dGlvbiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNwPFZvbHVt
ZVNoYXBlcjo6T3BlcmF0aW9uPiYgb3BlcmF0aW9uKSBvdmVycmlkZTsKICAgICAgICB2aXJ0dWFsIHNw
PFZvbHVtZVNoYXBlcjo6U3RhdGU+IGdldFZvbHVtZVNoYXBlclN0YXRlKGludCBpZCkgb3ZlcnJpZGU7
CgogICAgICAgIHNwPE1lZGlhUGxheWVyQmFzZT4gICAgIGNyZWF0ZVBsYXllcihwbGF5ZXJfdHlwZSBw
bGF5ZXJUeXBlKTsKCiAgICAgICAgdmlydHVhbCBzdGF0dXNfdCAgICAgICAgc2V0RGF0YVNvdXJjZSgK
ICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3A8SU1lZGlhSFRUUFNlcnZpY2U+ICZodHRwU2Vy
dmljZSwKICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2hhciAqdXJsLAogICAgICAgICAgICAg
ICAgICAgICAgICBjb25zdCBLZXllZFZlY3RvcjxTdHJpbmc4LCBTdHJpbmc4PiAqaGVhZGVycyk7Cgog
ICAgICAgIHZpcnR1YWwgc3RhdHVzX3QgICAgICAgIHNldERhdGFTb3VyY2UoaW50IGZkLCBpbnQ2NF90
IG9mZnNldCwgaW50NjRfdCBsZW5ndGgpOwoKICAgICAgICB2aXJ0dWFsIHN0YXR1c190ICAgICAgICBz
ZXREYXRhU291cmNlKGNvbnN0IHNwPElTdHJlYW1Tb3VyY2U+ICZzb3VyY2UpOwogICAgICAgIHZpcnR1
YWwgc3RhdHVzX3QgICAgICAgIHNldERhdGFTb3VyY2UoY29uc3Qgc3A8SURhdGFTb3VyY2U+ICZzb3Vy
Y2UpOwoKCiAgICAgICAgc3A8TWVkaWFQbGF5ZXJCYXNlPiAgICAgc2V0RGF0YVNvdXJjZV9wcmUocGxh
eWVyX3R5cGUgcGxheWVyVHlwZSk7CiAgICAgICAgdm9pZCAgICAgICAgICAgICAgICAgICAgc2V0RGF0
YVNvdXJjZV9wb3N0KGNvbnN0IHNwPE1lZGlhUGxheWVyQmFzZT4mIHAsCiAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1c190IHN0YXR1cyk7CgogICAgICAg
IHN0YXRpYyAgdm9pZCAgICAgICAgICAgIG5vdGlmeSh2b2lkKiBjb29raWUsIGludCBtc2csCiAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludCBleHQxLCBpbnQgZXh0MiwgY29uc3Qg
UGFyY2VsICpvYmopOwoKICAgICAgICAgICAgICAgIHBpZF90ICAgICAgICAgICBwaWQoKSBjb25zdCB7
IHJldHVybiBtUGlkOyB9CiAgICAgICAgdmlydHVhbCBzdGF0dXNfdCAgICAgICAgZHVtcChpbnQgZmQs
IGNvbnN0IFZlY3RvcjxTdHJpbmcxNj4mIGFyZ3MpOwoKICAgICAgICAgICAgICAgIGF1ZGlvX3Nlc3Np
b25fdCBnZXRBdWRpb1Nlc3Npb25JZCgpIHsgcmV0dXJuIG1BdWRpb1Nlc3Npb25JZDsgfQogICAgICAg
IC8vIE1vZHVsYXIgRFJNCiAgICAgICAgdmlydHVhbCBzdGF0dXNfdCBwcmVwYXJlRHJtKGNvbnN0IHVp
bnQ4X3QgdXVpZFsxNl0sIGNvbnN0IFZlY3Rvcjx1aW50OF90PiYgZHJtU2Vzc2lvbklkKTsKICAgICAg
ICB2aXJ0dWFsIHN0YXR1c190IHJlbGVhc2VEcm0oKTsKCiAgICBwcml2YXRlOgogICAgICAgIGNsYXNz
IFNlcnZpY2VEZWF0aE5vdGlmaWVyOgogICAgICAgICAgICAgICAgcHVibGljIElCaW5kZXI6OkRlYXRo
UmVjaXBpZW50LAogICAgICAgICAgICAgICAgcHVibGljIDo6YW5kcm9pZDo6aGFyZHdhcmU6OmhpZGxf
ZGVhdGhfcmVjaXBpZW50CiAgICAgICAgewogICAgICAgIHB1YmxpYzoKICAgICAgICAgICAgU2Vydmlj
ZURlYXRoTm90aWZpZXIoCiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3A8SUJpbmRlcj4mIHNlcnZp
Y2UsCiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3A8TWVkaWFQbGF5ZXJCYXNlPiYgbGlzdGVuZXIs
CiAgICAgICAgICAgICAgICAgICAgaW50IHdoaWNoKTsKICAgICAgICAgICAgU2VydmljZURlYXRoTm90
aWZpZXIoCiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3A8SU9teD4mIG9teCwKICAgICAgICAgICAg
ICAgICAgICBjb25zdCBzcDxNZWRpYVBsYXllckJhc2U+JiBsaXN0ZW5lciwKICAgICAgICAgICAgICAg
ICAgICBpbnQgd2hpY2gpOwogICAgICAgICAgICB2aXJ0dWFsIH5TZXJ2aWNlRGVhdGhOb3RpZmllcigp
OwogICAgICAgICAgICB2aXJ0dWFsIHZvaWQgYmluZGVyRGllZChjb25zdCB3cDxJQmluZGVyPiYgd2hv
KTsKICAgICAgICAgICAgdmlydHVhbCB2b2lkIHNlcnZpY2VEaWVkKAogICAgICAgICAgICAgICAgICAg
IHVpbnQ2NF90IGNvb2tpZSwKICAgICAgICAgICAgICAgICAgICBjb25zdCB3cDw6OmFuZHJvaWQ6Omhp
ZGw6OmJhc2U6OlYxXzA6OklCYXNlPiYgd2hvKTsKICAgICAgICAgICAgdm9pZCB1bmxpbmtUb0RlYXRo
KCk7CgogICAgICAgIHByaXZhdGU6CiAgICAgICAgICAgIGludCBtV2hpY2g7CiAgICAgICAgICAgIHNw
PElCaW5kZXI+IG1TZXJ2aWNlOwogICAgICAgICAgICBzcDxJT214PiBtT214OwogICAgICAgICAgICB3
cDxNZWRpYVBsYXllckJhc2U+IG1MaXN0ZW5lcjsKICAgICAgICB9OwoKICAgICAgICB2b2lkIGNsZWFy
RGVhdGhOb3RpZmllcnMoKTsKCiAgICAgICAgZnJpZW5kIGNsYXNzIE1lZGlhUGxheWVyU2VydmljZTsK
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDbGllbnQoIGNvbnN0IHNwPE1lZGlhUGxheWVy
U2VydmljZT4mIHNlcnZpY2UsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBw
aWRfdCBwaWQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnQzMl90IGNv
bm5JZCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNwPElNZWRp
YVBsYXllckNsaWVudD4mIGNsaWVudCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgIGF1ZGlvX3Nlc3Npb25fdCBhdWRpb1Nlc3Npb25JZCwKICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgIHVpZF90IHVpZCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
Q2xpZW50KCk7CiAgICAgICAgdmlydHVhbCAgICAgICAgICAgICAgICAgfkNsaWVudCgpOwoKICAgICAg
ICAgICAgICAgIHZvaWQgICAgICAgICAgICBkZWxldGVQbGF5ZXIoKTsKCiAgICAgICAgc3A8TWVkaWFQ
bGF5ZXJCYXNlPiAgICAgZ2V0UGxheWVyKCkgY29uc3QgeyBNdXRleDo6QXV0b2xvY2sgbG9jayhtTG9j
ayk7IHJldHVybiBtUGxheWVyOyB9CgoKCiAgICAgICAgLy8gQHBhcmFtIHR5cGUgT2YgdGhlIG1ldGFk
YXRhIHRvIGJlIHRlc3RlZC4KICAgICAgICAvLyBAcmV0dXJuIHRydWUgaWYgdGhlIG1ldGFkYXRhIHNo
b3VsZCBiZSBkcm9wcGVkIGFjY29yZGluZyB0bwogICAgICAgIC8vICAgICAgICAgICAgICB0aGUgZmls
dGVycy4KICAgICAgICBib29sIHNob3VsZERyb3BNZXRhZGF0YShtZWRpYTo6TWV0YWRhdGE6OlR5cGUg
dHlwZSkgY29uc3Q7CgogICAgICAgIC8vIEFkZCBhIG5ldyBlbGVtZW50IHRvIHRoZSBzZXQgb2YgbWV0
YWRhdGEgdXBkYXRlZC4gTm9vcCBpZgogICAgICAgIC8vIHRoZSBlbGVtZW50IGV4aXN0cyBhbHJlYWR5
LgogICAgICAgIC8vIEBwYXJhbSB0eXBlIE9mIHRoZSBtZXRhZGF0YSB0byBiZSByZWNvcmRlZC4KICAg
ICAgICB2b2lkIGFkZE5ld01ldGFkYXRhVXBkYXRlKG1lZGlhOjpNZXRhZGF0YTo6VHlwZSB0eXBlKTsK
CiAgICAgICAgLy8gRGlzY29ubmVjdCBmcm9tIHRoZSBjdXJyZW50bHkgY29ubmVjdGVkIEFOYXRpdmVX
aW5kb3cuCiAgICAgICAgdm9pZCBkaXNjb25uZWN0TmF0aXZlV2luZG93KCk7CgogICAgICAgIHN0YXR1
c190IHNldEF1ZGlvQXR0cmlidXRlc19sKGNvbnN0IFBhcmNlbCAmcmVxdWVzdCk7CgogICAgICAgIG11
dGFibGUgICAgIE11dGV4ICAgICAgICAgICAgICAgICAgICAgICBtTG9jazsKICAgICAgICAgICAgICAg
ICAgICBzcDxNZWRpYVBsYXllckJhc2U+ICAgICAgICAgbVBsYXllcjsKICAgICAgICAgICAgICAgICAg
ICBzcDxNZWRpYVBsYXllclNlcnZpY2U+ICAgICAgbVNlcnZpY2U7CiAgICAgICAgICAgICAgICAgICAg
c3A8SU1lZGlhUGxheWVyQ2xpZW50PiAgICAgIG1DbGllbnQ7CiAgICAgICAgICAgICAgICAgICAgc3A8
QXVkaW9PdXRwdXQ+ICAgICAgICAgICAgIG1BdWRpb091dHB1dDsKICAgICAgICAgICAgICAgICAgICBw
aWRfdCAgICAgICAgICAgICAgICAgICAgICAgbVBpZDsKICAgICAgICAgICAgICAgICAgICBzdGF0dXNf
dCAgICAgICAgICAgICAgICAgICAgbVN0YXR1czsKICAgICAgICAgICAgICAgICAgICBib29sICAgICAg
ICAgICAgICAgICAgICAgICAgbUxvb3A7CiAgICAgICAgICAgICAgICAgICAgaW50MzJfdCAgICAgICAg
ICAgICAgICAgICAgIG1Db25uSWQ7CiAgICAgICAgICAgICAgICAgICAgYXVkaW9fc2Vzc2lvbl90ICAg
ICAgICAgICAgIG1BdWRpb1Nlc3Npb25JZDsKICAgICAgICAgICAgICAgICAgICBhdWRpb19hdHRyaWJ1
dGVzX3QgKiAgICAgICAgbUF1ZGlvQXR0cmlidXRlczsKICAgICAgICAgICAgICAgICAgICB1aWRfdCAg
ICAgICAgICAgICAgICAgICAgICAgbVVpZDsKICAgICAgICAgICAgICAgICAgICBzcDxBTmF0aXZlV2lu
ZG93PiAgICAgICAgICAgbUNvbm5lY3RlZFdpbmRvdzsKICAgICAgICAgICAgICAgICAgICBzcDxJQmlu
ZGVyPiAgICAgICAgICAgICAgICAgbUNvbm5lY3RlZFdpbmRvd0JpbmRlcjsKICAgICAgICAgICAgICAg
ICAgICBzdHJ1Y3Qgc29ja2FkZHJfaW4gICAgICAgICAgbVJldHJhbnNtaXRFbmRwb2ludDsKICAgICAg
ICAgICAgICAgICAgICBib29sICAgICAgICAgICAgICAgICAgICAgICAgbVJldHJhbnNtaXRFbmRwb2lu
dFZhbGlkOwogICAgICAgICAgICAgICAgICAgIHNwPENsaWVudD4gICAgICAgICAgICAgICAgICBtTmV4
dENsaWVudDsKCiAgICAgICAgLy8gTWV0YWRhdGEgZmlsdGVycy4KICAgICAgICBtZWRpYTo6TWV0YWRh
dGE6OkZpbHRlciBtTWV0YWRhdGFBbGxvdzsgIC8vIHByb3RlY3RlZCBieSBtTG9jawogICAgICAgIG1l
ZGlhOjpNZXRhZGF0YTo6RmlsdGVyIG1NZXRhZGF0YURyb3A7ICAvLyBwcm90ZWN0ZWQgYnkgbUxvY2sK
CiAgICAgICAgLy8gTWV0YWRhdGEgdXBkYXRlZC4gRm9yIGVhY2ggTUVESUFfSU5GT19NRVRBREFUQV9V
UERBVEUKICAgICAgICAvLyBub3RpZmljYXRpb24gd2UgdHJ5IHRvIHVwZGF0ZSBtTWV0YWRhdGFVcGRh
dGVkIHdoaWNoIGlzIGEKICAgICAgICAvLyBzZXQ6IG5vIGR1cGxpY2F0ZS4KICAgICAgICAvLyBnZXRN
ZXRhZGF0YSBjbGVhcnMgdGhpcyBzZXQuCiAgICAgICAgbWVkaWE6Ok1ldGFkYXRhOjpGaWx0ZXIgbU1l
dGFkYXRhVXBkYXRlZDsgIC8vIHByb3RlY3RlZCBieSBtTG9jawoKICAgICAgICBzcDxTZXJ2aWNlRGVh
dGhOb3RpZmllcj4gbUV4dHJhY3RvckRlYXRoTGlzdGVuZXI7CiAgICAgICAgc3A8U2VydmljZURlYXRo
Tm90aWZpZXI+IG1Db2RlY0RlYXRoTGlzdGVuZXI7CiNpZiBDQUxMQkFDS19BTlRBR09OSVpFUgogICAg
ICAgICAgICAgICAgICAgIEFudGFnb25pemVyKiAgICAgICAgICAgICAgICBtQW50YWdvbml6ZXI7CiNl
bmRpZgogICAgfTsgLy8gQ2xpZW50CgovLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgogICAgICAgICAgICAgICAg
ICAgICAgICAgICAgTWVkaWFQbGF5ZXJTZXJ2aWNlKCk7CiAgICB2aXJ0dWFsICAgICAgICAgICAgICAg
ICB+TWVkaWFQbGF5ZXJTZXJ2aWNlKCk7CgogICAgbXV0YWJsZSAgICAgTXV0ZXggICAgICAgICAgICAg
ICAgICAgICAgIG1Mb2NrOwogICAgICAgICAgICAgICAgU29ydGVkVmVjdG9yPCB3cDxDbGllbnQ+ID4g
IG1DbGllbnRzOwogICAgICAgICAgICAgICAgU29ydGVkVmVjdG9yPCB3cDxNZWRpYVJlY29yZGVyQ2xp
ZW50PiA+IG1NZWRpYVJlY29yZGVyQ2xpZW50czsKICAgICAgICAgICAgICAgIGludDMyX3QgICAgICAg
ICAgICAgICAgICAgICBtTmV4dENvbm5JZDsKICAgICAgICAgICAgICAgIHNwPElPTVg+ICAgICAgICAg
ICAgICAgICAgICBtT01YOwp9OwoKLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKfTsgLy8gbmFtZXNwYWNlIGFu
ZHJvaWQKCiNlbmRpZiAvLyBBTkRST0lEX01FRElBUExBWUVSU0VSVklDRV9ICg==</data><mime>application/octet-stream</mime><width>0</width><height>0</height><duration>0</duration><resource-attributes><file-name>MediaPlayerService.h</file-name></resource-attributes></resource><resource><data encoding="base64">LyoKICogQ29weXJpZ2h0IChDKSAyMDEzIFRoZSBBbmRyb2lkIE9wZW4gU291cmNlIFByb2plY3QKICoK
ICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNl
bnNlIik7CiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0
aCB0aGUgTGljZW5zZS4KICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0CiAq
CiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wCiAqCiAqIFVu
bGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29m
dHdhcmUKICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4g
IkFTIElTIiBCQVNJUywKICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJ
TkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuCiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNw
ZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQKICogbGltaXRhdGlvbnMgdW5k
ZXIgdGhlIExpY2Vuc2UuCiAqLwoKI2lmbmRlZiBSU19SRUZfQkFTRV9ICiNkZWZpbmUgUlNfUkVGX0JB
U0VfSAoKCiNpbmNsdWRlIDxzdGRpbnQuaD4KI2luY2x1ZGUgPHN5cy90eXBlcy5oPgojaW5jbHVkZSA8
c3RkbGliLmg+CiNpbmNsdWRlIDxzdHJpbmcuaD4KCiNpbmNsdWRlICJTdHJvbmdQb2ludGVyLmgiCiNp
bmNsdWRlICJUeXBlSGVscGVycy5oIgoKLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCm5hbWVzcGFjZSBhbmRyb2lk
ewpuYW1lc3BhY2UgUlNDIHsKCmNsYXNzIFRleHRPdXRwdXQ7ClRleHRPdXRwdXQmIHByaW50V2Vha1Bv
aW50ZXIoVGV4dE91dHB1dCYgdG8sIGNvbnN0IHZvaWQqIHZhbCk7CgovLyAtLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0K
CiNkZWZpbmUgQ09NUEFSRV9XRUFLKF9vcF8pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICBcCmlubGluZSBib29sIG9wZXJhdG9yIF9vcF8gKGNvbnN0IHNwPFQ+JiBvKSBjb25zdCB7ICAg
ICAgICAgICAgICBcCiAgICByZXR1cm4gbV9wdHIgX29wXyBvLm1fcHRyOyAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICBcCn0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICBcCmlubGluZSBib29sIG9wZXJhdG9yIF9vcF8gKGNvbnN0IFQq
IG8pIGNvbnN0IHsgICAgICAgICAgICAgICAgICBcCiAgICByZXR1cm4gbV9wdHIgX29wXyBvOyAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCn0gICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCnRlbXBsYXRlPHR5cGVuYW1l
IFU+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCmlubGluZSBib29s
IG9wZXJhdG9yIF9vcF8gKGNvbnN0IHNwPFU+JiBvKSBjb25zdCB7ICAgICAgICAgICAgICBcCiAgICBy
ZXR1cm4gbV9wdHIgX29wXyBvLm1fcHRyOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBc
Cn0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICBcCnRlbXBsYXRlPHR5cGVuYW1lIFU+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICBcCmlubGluZSBib29sIG9wZXJhdG9yIF9vcF8gKGNvbnN0IFUqIG8pIGNvbnN0IHsg
ICAgICAgICAgICAgICAgICBcCiAgICByZXR1cm4gbV9wdHIgX29wXyBvOyAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICBcCn0KCi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQpjbGFzcyBSZWZlcmVu
Y2VNb3ZlcjsKY2xhc3MgUmVmZXJlbmNlQ29udmVydGVyQmFzZSB7CnB1YmxpYzoKICAgIHZpcnR1YWwg
c2l6ZV90IGdldFJlZmVyZW5jZVR5cGVTaXplKCkgY29uc3QgPSAwOwogICAgdmlydHVhbCB2b2lkKiBn
ZXRSZWZlcmVuY2VCYXNlKHZvaWQgY29uc3QqKSBjb25zdCA9IDA7CiAgICBpbmxpbmUgdmlydHVhbCB+
UmVmZXJlbmNlQ29udmVydGVyQmFzZSgpIHsgfQp9OwoKLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgpjbGFzcyBS
ZWZCYXNlCnsKcHVibGljOgogICAgICAgICAgICB2b2lkICAgICAgICAgICAgaW5jU3Ryb25nKGNvbnN0
IHZvaWQqIGlkKSBjb25zdDsKICAgICAgICAgICAgdm9pZCAgICAgICAgICAgIGRlY1N0cm9uZyhjb25z
dCB2b2lkKiBpZCkgY29uc3Q7CgogICAgICAgICAgICB2b2lkICAgICAgICAgICAgZm9yY2VJbmNTdHJv
bmcoY29uc3Qgdm9pZCogaWQpIGNvbnN0OwoKICAgICAgICAgICAgLy8hIERFQlVHR0lORyBPTkxZOiBH
ZXQgY3VycmVudCBzdHJvbmcgcmVmIGNvdW50LgogICAgICAgICAgICBpbnQzMl90ICAgICAgICAgZ2V0
U3Ryb25nQ291bnQoKSBjb25zdDsKCiAgICBjbGFzcyB3ZWFrcmVmX3R5cGUKICAgIHsKICAgIHB1Ymxp
YzoKICAgICAgICBSZWZCYXNlKiAgICAgICAgICAgIHJlZkJhc2UoKSBjb25zdDsKCiAgICAgICAgdm9p
ZCAgICAgICAgICAgICAgICBpbmNXZWFrKGNvbnN0IHZvaWQqIGlkKTsKICAgICAgICB2b2lkICAgICAg
ICAgICAgICAgIGRlY1dlYWsoY29uc3Qgdm9pZCogaWQpOwoKICAgICAgICAvLyBhY3F1aXJlcyBhIHN0
cm9uZyByZWZlcmVuY2UgaWYgdGhlcmUgaXMgYWxyZWFkeSBvbmUuCiAgICAgICAgYm9vbCAgICAgICAg
ICAgICAgICBhdHRlbXB0SW5jU3Ryb25nKGNvbnN0IHZvaWQqIGlkKTsKCiAgICAgICAgLy8gYWNxdWly
ZXMgYSB3ZWFrIHJlZmVyZW5jZSBpZiB0aGVyZSBpcyBhbHJlYWR5IG9uZS4KICAgICAgICAvLyBUaGlz
IGlzIG5vdCBhbHdheXMgc2FmZS4gc2VlIFByb2Nlc3NTdGF0ZS5jcHAgYW5kIEJwQmluZGVyLmNwcAog
ICAgICAgIC8vIGZvciBwcm9wZXIgdXNlLgogICAgICAgIGJvb2wgICAgICAgICAgICAgICAgYXR0ZW1w
dEluY1dlYWsoY29uc3Qgdm9pZCogaWQpOwoKICAgICAgICAvLyEgREVCVUdHSU5HIE9OTFk6IEdldCBj
dXJyZW50IHdlYWsgcmVmIGNvdW50LgogICAgICAgIGludDMyX3QgICAgICAgICAgICAgZ2V0V2Vha0Nv
dW50KCkgY29uc3Q7CgogICAgICAgIC8vISBERUJVR0dJTkcgT05MWTogUHJpbnQgcmVmZXJlbmNlcyBo
ZWxkIG9uIG9iamVjdC4KICAgICAgICB2b2lkICAgICAgICAgICAgICAgIHByaW50UmVmcygpIGNvbnN0
OwoKICAgICAgICAvLyEgREVCVUdHSU5HIE9OTFk6IEVuYWJsZSB0cmFja2luZyBmb3IgdGhpcyBvYmpl
Y3QuCiAgICAgICAgLy8gZW5hYmxlIC0tIGVuYWJsZS9kaXNhYmxlIHRyYWNraW5nCiAgICAgICAgLy8g
cmV0YWluIC0tIHdoZW4gdHJhY2tpbmcgaXMgZW5hYmxlLCBpZiB0cnVlLCB0aGVuIHdlIHNhdmUgYSBz
dGFjayB0cmFjZQogICAgICAgIC8vICAgICAgICAgICBmb3IgZWFjaCByZWZlcmVuY2UgYW5kIGRlcmVm
ZXJlbmNlOyB3aGVuIHJldGFpbiA9PSBmYWxzZSwgd2UKICAgICAgICAvLyAgICAgICAgICAgbWF0Y2gg
dXAgcmVmZXJlbmNlcyBhbmQgZGVyZWZlcmVuY2VzIGFuZCBrZWVwIG9ubHkgdGhlCiAgICAgICAgLy8g
ICAgICAgICAgIG91dHN0YW5kaW5nIG9uZXMuCgogICAgICAgIHZvaWQgICAgICAgICAgICAgICAgdHJh
Y2tNZShib29sIGVuYWJsZSwgYm9vbCByZXRhaW4pOwogICAgfTsKCiAgICAgICAgICAgIHdlYWtyZWZf
dHlwZSogICBjcmVhdGVXZWFrKGNvbnN0IHZvaWQqIGlkKSBjb25zdDsKCiAgICAgICAgICAgIHdlYWty
ZWZfdHlwZSogICBnZXRXZWFrUmVmcygpIGNvbnN0OwoKICAgICAgICAgICAgLy8hIERFQlVHR0lORyBP
TkxZOiBQcmludCByZWZlcmVuY2VzIGhlbGQgb24gb2JqZWN0LgogICAgaW5saW5lICB2b2lkICAgICAg
ICAgICAgcHJpbnRSZWZzKCkgY29uc3QgeyBnZXRXZWFrUmVmcygpLT5wcmludFJlZnMoKTsgfQoKICAg
ICAgICAgICAgLy8hIERFQlVHR0lORyBPTkxZOiBFbmFibGUgdHJhY2tpbmcgb2Ygb2JqZWN0LgogICAg
aW5saW5lICB2b2lkICAgICAgICAgICAgdHJhY2tNZShib29sIGVuYWJsZSwgYm9vbCByZXRhaW4pCiAg
ICB7CiAgICAgICAgZ2V0V2Vha1JlZnMoKS0+dHJhY2tNZShlbmFibGUsIHJldGFpbik7CiAgICB9Cgog
ICAgdHlwZWRlZiBSZWZCYXNlIGJhc2V0eXBlOwoKcHJvdGVjdGVkOgogICAgICAgICAgICAgICAgICAg
ICAgICAgICAgUmVmQmFzZSgpOwogICAgdmlydHVhbCAgICAgICAgICAgICAgICAgflJlZkJhc2UoKTsK
CiAgICAvLyEgRmxhZ3MgZm9yIGV4dGVuZE9iamVjdExpZmV0aW1lKCkKICAgIGVudW0gewogICAgICAg
IE9CSkVDVF9MSUZFVElNRV9TVFJPTkcgID0gMHgwMDAwLAogICAgICAgIE9CSkVDVF9MSUZFVElNRV9X
RUFLICAgID0gMHgwMDAxLAogICAgICAgIE9CSkVDVF9MSUZFVElNRV9NQVNLICAgID0gMHgwMDAxCiAg
ICB9OwoKICAgICAgICAgICAgdm9pZCAgICAgICAgICAgIGV4dGVuZE9iamVjdExpZmV0aW1lKGludDMy
X3QgbW9kZSk7CgogICAgLy8hIEZsYWdzIGZvciBvbkluY1N0cm9uZ0F0dGVtcHRlZCgpCiAgICBlbnVt
IHsKICAgICAgICBGSVJTVF9JTkNfU1RST05HID0gMHgwMDAxCiAgICB9OwoKICAgIHZpcnR1YWwgdm9p
ZCAgICAgICAgICAgIG9uRmlyc3RSZWYoKTsKICAgIHZpcnR1YWwgdm9pZCAgICAgICAgICAgIG9uTGFz
dFN0cm9uZ1JlZihjb25zdCB2b2lkKiBpZCk7CiAgICB2aXJ0dWFsIGJvb2wgICAgICAgICAgICBvbklu
Y1N0cm9uZ0F0dGVtcHRlZCh1aW50MzJfdCBmbGFncywgY29uc3Qgdm9pZCogaWQpOwogICAgdmlydHVh
bCB2b2lkICAgICAgICAgICAgb25MYXN0V2Vha1JlZihjb25zdCB2b2lkKiBpZCk7Cgpwcml2YXRlOgog
ICAgZnJpZW5kIGNsYXNzIFJlZmVyZW5jZU1vdmVyOwogICAgc3RhdGljIHZvaWQgbW92ZVJlZmVyZW5j
ZXModm9pZCogZCwgdm9pZCBjb25zdCogcywgc2l6ZV90IG4sCiAgICAgICAgICAgIGNvbnN0IFJlZmVy
ZW5jZUNvbnZlcnRlckJhc2UmIGNhc3Rlcik7Cgpwcml2YXRlOgogICAgZnJpZW5kIGNsYXNzIHdlYWty
ZWZfdHlwZTsKICAgIGNsYXNzIHdlYWtyZWZfaW1wbDsKCiAgICAgICAgICAgICAgICAgICAgICAgICAg
ICBSZWZCYXNlKGNvbnN0IFJlZkJhc2UmIG8pOwogICAgICAgICAgICBSZWZCYXNlJiAgICAgICAgb3Bl
cmF0b3I9KGNvbnN0IFJlZkJhc2UmIG8pOwoKICAgICAgICB3ZWFrcmVmX2ltcGwqIGNvbnN0IG1SZWZz
Owp9OwoKLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgp0ZW1wbGF0ZSA8Y2xhc3MgVD4KY2xhc3MgTGlnaHRSZWZC
YXNlCnsKcHVibGljOgogICAgaW5saW5lIExpZ2h0UmVmQmFzZSgpIDogbUNvdW50KDApIHsgfQogICAg
aW5saW5lIHZvaWQgaW5jU3Ryb25nKF9fYXR0cmlidXRlX18oKHVudXNlZCkpIGNvbnN0IHZvaWQqIGlk
KSBjb25zdCB7CiAgICAgICAgX19zeW5jX2ZldGNoX2FuZF9hZGQoJm1Db3VudCwgMSk7CiAgICB9CiAg
ICBpbmxpbmUgdm9pZCBkZWNTdHJvbmcoX19hdHRyaWJ1dGVfXygodW51c2VkKSkgY29uc3Qgdm9pZCog
aWQpIGNvbnN0IHsKICAgICAgICBpZiAoX19zeW5jX2ZldGNoX2FuZF9zdWIoJm1Db3VudCwgMSkgPT0g
MSkgewogICAgICAgICAgICBkZWxldGUgc3RhdGljX2Nhc3Q8Y29uc3QgVCo+KHRoaXMpOwogICAgICAg
IH0KICAgIH0KICAgIC8vISBERUJVR0dJTkcgT05MWTogR2V0IGN1cnJlbnQgc3Ryb25nIHJlZiBjb3Vu
dC4KICAgIGlubGluZSBpbnQzMl90IGdldFN0cm9uZ0NvdW50KCkgY29uc3QgewogICAgICAgIHJldHVy
biBtQ291bnQ7CiAgICB9CgogICAgdHlwZWRlZiBMaWdodFJlZkJhc2U8VD4gYmFzZXR5cGU7Cgpwcm90
ZWN0ZWQ6CiAgICBpbmxpbmUgfkxpZ2h0UmVmQmFzZSgpIHsgfQoKcHJpdmF0ZToKICAgIGZyaWVuZCBj
bGFzcyBSZWZlcmVuY2VNb3ZlcjsKICAgIGlubGluZSBzdGF0aWMgdm9pZCBtb3ZlUmVmZXJlbmNlcyh2
b2lkKiwgdm9pZCBjb25zdCosIHNpemVfdCwKICAgICAgICAgICAgY29uc3QgUmVmZXJlbmNlQ29udmVy
dGVyQmFzZSYpIHsgfQoKcHJpdmF0ZToKICAgIG11dGFibGUgdm9sYXRpbGUgaW50MzJfdCBtQ291bnQ7
Cn07CgovLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCnRlbXBsYXRlIDx0eXBlbmFtZSBUPgpjbGFzcyB3cAp7CnB1
YmxpYzoKICAgIHR5cGVkZWYgdHlwZW5hbWUgUmVmQmFzZTo6d2Vha3JlZl90eXBlIHdlYWtyZWZfdHlw
ZTsKCiAgICBpbmxpbmUgd3AoKSA6IG1fcHRyKDApIHsgfQoKICAgIGV4cGxpY2l0IHdwKFQqIG90aGVy
KTsKICAgIHdwKGNvbnN0IHdwPFQ+JiBvdGhlcik7CiAgICBleHBsaWNpdCB3cChjb25zdCBzcDxUPiYg
b3RoZXIpOwogICAgdGVtcGxhdGU8dHlwZW5hbWUgVT4gZXhwbGljaXQgd3AoVSogb3RoZXIpOwogICAg
dGVtcGxhdGU8dHlwZW5hbWUgVT4gZXhwbGljaXQgd3AoY29uc3Qgc3A8VT4mIG90aGVyKTsKICAgIHRl
bXBsYXRlPHR5cGVuYW1lIFU+IGV4cGxpY2l0IHdwKGNvbnN0IHdwPFU+JiBvdGhlcik7CgogICAgfndw
KCk7CgogICAgLy8gQXNzaWdubWVudAoKICAgIHdwJiBvcGVyYXRvciA9IChUKiBvdGhlcik7CiAgICB3
cCYgb3BlcmF0b3IgPSAoY29uc3Qgd3A8VD4mIG90aGVyKTsKICAgIHdwJiBvcGVyYXRvciA9IChjb25z
dCBzcDxUPiYgb3RoZXIpOwoKICAgIHRlbXBsYXRlPHR5cGVuYW1lIFU+IHdwJiBvcGVyYXRvciA9IChV
KiBvdGhlcik7CiAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBVPiB3cCYgb3BlcmF0b3IgPSAoY29uc3Qgd3A8
VT4mIG90aGVyKTsKICAgIHRlbXBsYXRlPHR5cGVuYW1lIFU+IHdwJiBvcGVyYXRvciA9IChjb25zdCBz
cDxVPiYgb3RoZXIpOwoKICAgIHZvaWQgc2V0X29iamVjdF9hbmRfcmVmcyhUKiBvdGhlciwgd2Vha3Jl
Zl90eXBlKiByZWZzKTsKCiAgICAvLyBwcm9tb3Rpb24gdG8gc3AKCiAgICBzcDxUPiBwcm9tb3RlKCkg
Y29uc3Q7CgogICAgLy8gUmVzZXQKCiAgICB2b2lkIGNsZWFyKCk7CgogICAgLy8gQWNjZXNzb3JzCgog
ICAgaW5saW5lICB3ZWFrcmVmX3R5cGUqIGdldF9yZWZzKCkgY29uc3QgeyByZXR1cm4gbV9yZWZzOyB9
CgogICAgaW5saW5lICBUKiB1bnNhZmVfZ2V0KCkgY29uc3QgeyByZXR1cm4gbV9wdHI7IH0KCiAgICAv
LyBPcGVyYXRvcnMKCiAgICBDT01QQVJFX1dFQUsoPT0pCiAgICBDT01QQVJFX1dFQUsoIT0pCiAgICBD
T01QQVJFX1dFQUsoPikKICAgIENPTVBBUkVfV0VBSyg8KQogICAgQ09NUEFSRV9XRUFLKDw9KQogICAg
Q09NUEFSRV9XRUFLKD49KQoKICAgIGlubGluZSBib29sIG9wZXJhdG9yID09IChjb25zdCB3cDxUPiYg
bykgY29uc3QgewogICAgICAgIHJldHVybiAobV9wdHIgPT0gby5tX3B0cikgJiYgKG1fcmVmcyA9PSBv
Lm1fcmVmcyk7CiAgICB9CiAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBVPgogICAgaW5saW5lIGJvb2wgb3Bl
cmF0b3IgPT0gKGNvbnN0IHdwPFU+JiBvKSBjb25zdCB7CiAgICAgICAgcmV0dXJuIG1fcHRyID09IG8u
bV9wdHI7CiAgICB9CgogICAgaW5saW5lIGJvb2wgb3BlcmF0b3IgPiAoY29uc3Qgd3A8VD4mIG8pIGNv
bnN0IHsKICAgICAgICByZXR1cm4gKG1fcHRyID09IG8ubV9wdHIpID8gKG1fcmVmcyA+IG8ubV9yZWZz
KSA6IChtX3B0ciA+IG8ubV9wdHIpOwogICAgfQogICAgdGVtcGxhdGU8dHlwZW5hbWUgVT4KICAgIGlu
bGluZSBib29sIG9wZXJhdG9yID4gKGNvbnN0IHdwPFU+JiBvKSBjb25zdCB7CiAgICAgICAgcmV0dXJu
IChtX3B0ciA9PSBvLm1fcHRyKSA/IChtX3JlZnMgPiBvLm1fcmVmcykgOiAobV9wdHIgPiBvLm1fcHRy
KTsKICAgIH0KCiAgICBpbmxpbmUgYm9vbCBvcGVyYXRvciA8IChjb25zdCB3cDxUPiYgbykgY29uc3Qg
ewogICAgICAgIHJldHVybiAobV9wdHIgPT0gby5tX3B0cikgPyAobV9yZWZzIDwgby5tX3JlZnMpIDog
KG1fcHRyIDwgby5tX3B0cik7CiAgICB9CiAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBVPgogICAgaW5saW5l
IGJvb2wgb3BlcmF0b3IgPCAoY29uc3Qgd3A8VT4mIG8pIGNvbnN0IHsKICAgICAgICByZXR1cm4gKG1f
cHRyID09IG8ubV9wdHIpID8gKG1fcmVmcyA8IG8ubV9yZWZzKSA6IChtX3B0ciA8IG8ubV9wdHIpOwog
ICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgaW5saW5lIGJvb2wgb3BlcmF0b3IgIT0gKGNvbnN0
IHdwPFQ+JiBvKSBjb25zdCB7IHJldHVybiBtX3JlZnMgIT0gby5tX3JlZnM7IH0KICAgIHRlbXBsYXRl
PHR5cGVuYW1lIFU+IGlubGluZSBib29sIG9wZXJhdG9yICE9IChjb25zdCB3cDxVPiYgbykgY29uc3Qg
eyByZXR1cm4gIW9wZXJhdG9yID09IChvKTsgfQogICAgICAgICAgICAgICAgICAgICAgICAgaW5saW5l
IGJvb2wgb3BlcmF0b3IgPD0gKGNvbnN0IHdwPFQ+JiBvKSBjb25zdCB7IHJldHVybiAhb3BlcmF0b3Ig
PiAobyk7IH0KICAgIHRlbXBsYXRlPHR5cGVuYW1lIFU+IGlubGluZSBib29sIG9wZXJhdG9yIDw9IChj
b25zdCB3cDxVPiYgbykgY29uc3QgeyByZXR1cm4gIW9wZXJhdG9yID4gKG8pOyB9CiAgICAgICAgICAg
ICAgICAgICAgICAgICBpbmxpbmUgYm9vbCBvcGVyYXRvciA+PSAoY29uc3Qgd3A8VD4mIG8pIGNvbnN0
IHsgcmV0dXJuICFvcGVyYXRvciA8IChvKTsgfQogICAgdGVtcGxhdGU8dHlwZW5hbWUgVT4gaW5saW5l
IGJvb2wgb3BlcmF0b3IgPj0gKGNvbnN0IHdwPFU+JiBvKSBjb25zdCB7IHJldHVybiAhb3BlcmF0b3Ig
PCAobyk7IH0KCnByaXZhdGU6CiAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBZPiBmcmllbmQgY2xhc3Mgc3A7
CiAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBZPiBmcmllbmQgY2xhc3Mgd3A7CgogICAgVCogICAgICAgICAg
ICAgIG1fcHRyOwogICAgd2Vha3JlZl90eXBlKiAgIG1fcmVmczsKfTsKCnRlbXBsYXRlIDx0eXBlbmFt
ZSBUPgpUZXh0T3V0cHV0JiBvcGVyYXRvcjw8KFRleHRPdXRwdXQmIHRvLCBjb25zdCB3cDxUPiYgdmFs
KTsKCiN1bmRlZiBDT01QQVJFX1dFQUsKCi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQovLyBObyB1c2VyIHNlcnZp
Y2VhYmxlIHBhcnRzIGJlbG93IGhlcmUuCgp0ZW1wbGF0ZTx0eXBlbmFtZSBUPgp3cDxUPjo6d3AoVCog
b3RoZXIpCiAgICA6IG1fcHRyKG90aGVyKQp7CiAgICBpZiAob3RoZXIpIG1fcmVmcyA9IG90aGVyLT5j
cmVhdGVXZWFrKHRoaXMpOwp9Cgp0ZW1wbGF0ZTx0eXBlbmFtZSBUPgp3cDxUPjo6d3AoY29uc3Qgd3A8
VD4mIG90aGVyKQogICAgOiBtX3B0cihvdGhlci5tX3B0ciksIG1fcmVmcyhvdGhlci5tX3JlZnMpCnsK
ICAgIGlmIChtX3B0cikgbV9yZWZzLT5pbmNXZWFrKHRoaXMpOwp9Cgp0ZW1wbGF0ZTx0eXBlbmFtZSBU
Pgp3cDxUPjo6d3AoY29uc3Qgc3A8VD4mIG90aGVyKQogICAgOiBtX3B0cihvdGhlci5tX3B0cikKewog
ICAgaWYgKG1fcHRyKSB7CiAgICAgICAgbV9yZWZzID0gbV9wdHItPmNyZWF0ZVdlYWsodGhpcyk7CiAg
ICB9Cn0KCnRlbXBsYXRlPHR5cGVuYW1lIFQ+IHRlbXBsYXRlPHR5cGVuYW1lIFU+CndwPFQ+Ojp3cChV
KiBvdGhlcikKICAgIDogbV9wdHIob3RoZXIpCnsKICAgIGlmIChvdGhlcikgbV9yZWZzID0gb3RoZXIt
PmNyZWF0ZVdlYWsodGhpcyk7Cn0KCnRlbXBsYXRlPHR5cGVuYW1lIFQ+IHRlbXBsYXRlPHR5cGVuYW1l
IFU+CndwPFQ+Ojp3cChjb25zdCB3cDxVPiYgb3RoZXIpCiAgICA6IG1fcHRyKG90aGVyLm1fcHRyKQp7
CiAgICBpZiAobV9wdHIpIHsKICAgICAgICBtX3JlZnMgPSBvdGhlci5tX3JlZnM7CiAgICAgICAgbV9y
ZWZzLT5pbmNXZWFrKHRoaXMpOwogICAgfQp9Cgp0ZW1wbGF0ZTx0eXBlbmFtZSBUPiB0ZW1wbGF0ZTx0
eXBlbmFtZSBVPgp3cDxUPjo6d3AoY29uc3Qgc3A8VT4mIG90aGVyKQogICAgOiBtX3B0cihvdGhlci5t
X3B0cikKewogICAgaWYgKG1fcHRyKSB7CiAgICAgICAgbV9yZWZzID0gbV9wdHItPmNyZWF0ZVdlYWso
dGhpcyk7CiAgICB9Cn0KCnRlbXBsYXRlPHR5cGVuYW1lIFQ+CndwPFQ+Ojp+d3AoKQp7CiAgICBpZiAo
bV9wdHIpIG1fcmVmcy0+ZGVjV2Vhayh0aGlzKTsKfQoKdGVtcGxhdGU8dHlwZW5hbWUgVD4Kd3A8VD4m
IHdwPFQ+OjpvcGVyYXRvciA9IChUKiBvdGhlcikKewogICAgd2Vha3JlZl90eXBlKiBuZXdSZWZzID0K
ICAgICAgICBvdGhlciA/IG90aGVyLT5jcmVhdGVXZWFrKHRoaXMpIDogMDsKICAgIGlmIChtX3B0cikg
bV9yZWZzLT5kZWNXZWFrKHRoaXMpOwogICAgbV9wdHIgPSBvdGhlcjsKICAgIG1fcmVmcyA9IG5ld1Jl
ZnM7CiAgICByZXR1cm4gKnRoaXM7Cn0KCnRlbXBsYXRlPHR5cGVuYW1lIFQ+CndwPFQ+JiB3cDxUPjo6
b3BlcmF0b3IgPSAoY29uc3Qgd3A8VD4mIG90aGVyKQp7CiAgICB3ZWFrcmVmX3R5cGUqIG90aGVyUmVm
cyhvdGhlci5tX3JlZnMpOwogICAgVCogb3RoZXJQdHIob3RoZXIubV9wdHIpOwogICAgaWYgKG90aGVy
UHRyKSBvdGhlclJlZnMtPmluY1dlYWsodGhpcyk7CiAgICBpZiAobV9wdHIpIG1fcmVmcy0+ZGVjV2Vh
ayh0aGlzKTsKICAgIG1fcHRyID0gb3RoZXJQdHI7CiAgICBtX3JlZnMgPSBvdGhlclJlZnM7CiAgICBy
ZXR1cm4gKnRoaXM7Cn0KCnRlbXBsYXRlPHR5cGVuYW1lIFQ+CndwPFQ+JiB3cDxUPjo6b3BlcmF0b3Ig
PSAoY29uc3Qgc3A8VD4mIG90aGVyKQp7CiAgICB3ZWFrcmVmX3R5cGUqIG5ld1JlZnMgPQogICAgICAg
IG90aGVyICE9IE5VTEwgPyBvdGhlci0+Y3JlYXRlV2Vhayh0aGlzKSA6IE5VTEw7CiAgICBUKiBvdGhl
clB0cihvdGhlci5tX3B0cik7CiAgICBpZiAobV9wdHIpIG1fcmVmcy0+ZGVjV2Vhayh0aGlzKTsKICAg
IG1fcHRyID0gb3RoZXJQdHI7CiAgICBtX3JlZnMgPSBuZXdSZWZzOwogICAgcmV0dXJuICp0aGlzOwp9
Cgp0ZW1wbGF0ZTx0eXBlbmFtZSBUPiB0ZW1wbGF0ZTx0eXBlbmFtZSBVPgp3cDxUPiYgd3A8VD46Om9w
ZXJhdG9yID0gKFUqIG90aGVyKQp7CiAgICB3ZWFrcmVmX3R5cGUqIG5ld1JlZnMgPQogICAgICAgIG90
aGVyID8gb3RoZXItPmNyZWF0ZVdlYWsodGhpcykgOiBOVUxMOwogICAgaWYgKG1fcHRyKSBtX3JlZnMt
PmRlY1dlYWsodGhpcyk7CiAgICBtX3B0ciA9IG90aGVyOwogICAgbV9yZWZzID0gbmV3UmVmczsKICAg
IHJldHVybiAqdGhpczsKfQoKdGVtcGxhdGU8dHlwZW5hbWUgVD4gdGVtcGxhdGU8dHlwZW5hbWUgVT4K
d3A8VD4mIHdwPFQ+OjpvcGVyYXRvciA9IChjb25zdCB3cDxVPiYgb3RoZXIpCnsKICAgIHdlYWtyZWZf
dHlwZSogb3RoZXJSZWZzKG90aGVyLm1fcmVmcyk7CiAgICBVKiBvdGhlclB0cihvdGhlci5tX3B0cik7
CiAgICBpZiAob3RoZXJQdHIpIG90aGVyUmVmcy0+aW5jV2Vhayh0aGlzKTsKICAgIGlmIChtX3B0cikg
bV9yZWZzLT5kZWNXZWFrKHRoaXMpOwogICAgbV9wdHIgPSBvdGhlclB0cjsKICAgIG1fcmVmcyA9IG90
aGVyUmVmczsKICAgIHJldHVybiAqdGhpczsKfQoKdGVtcGxhdGU8dHlwZW5hbWUgVD4gdGVtcGxhdGU8
dHlwZW5hbWUgVT4Kd3A8VD4mIHdwPFQ+OjpvcGVyYXRvciA9IChjb25zdCBzcDxVPiYgb3RoZXIpCnsK
ICAgIHdlYWtyZWZfdHlwZSogbmV3UmVmcyA9CiAgICAgICAgb3RoZXIgIT0gTlVMTCA/IG90aGVyLT5j
cmVhdGVXZWFrKHRoaXMpIDogTlVMTDsKICAgIFUqIG90aGVyUHRyKG90aGVyLm1fcHRyKTsKICAgIGlm
IChtX3B0cikgbV9yZWZzLT5kZWNXZWFrKHRoaXMpOwogICAgbV9wdHIgPSBvdGhlclB0cjsKICAgIG1f
cmVmcyA9IG5ld1JlZnM7CiAgICByZXR1cm4gKnRoaXM7Cn0KCnRlbXBsYXRlPHR5cGVuYW1lIFQ+CnZv
aWQgd3A8VD46OnNldF9vYmplY3RfYW5kX3JlZnMoVCogb3RoZXIsIHdlYWtyZWZfdHlwZSogcmVmcykK
ewogICAgaWYgKG90aGVyKSByZWZzLT5pbmNXZWFrKHRoaXMpOwogICAgaWYgKG1fcHRyKSBtX3JlZnMt
PmRlY1dlYWsodGhpcyk7CiAgICBtX3B0ciA9IG90aGVyOwogICAgbV9yZWZzID0gcmVmczsKfQoKdGVt
cGxhdGU8dHlwZW5hbWUgVD4Kc3A8VD4gd3A8VD46OnByb21vdGUoKSBjb25zdAp7CiAgICBzcDxUPiBy
ZXN1bHQ7CiAgICBpZiAobV9wdHIgJiYgbV9yZWZzLT5hdHRlbXB0SW5jU3Ryb25nKCZyZXN1bHQpKSB7
CiAgICAgICAgcmVzdWx0LnNldF9wb2ludGVyKG1fcHRyKTsKICAgIH0KICAgIHJldHVybiByZXN1bHQ7
Cn0KCnRlbXBsYXRlPHR5cGVuYW1lIFQ+CnZvaWQgd3A8VD46OmNsZWFyKCkKewogICAgaWYgKG1fcHRy
KSB7CiAgICAgICAgbV9yZWZzLT5kZWNXZWFrKHRoaXMpOwogICAgICAgIG1fcHRyID0gMDsKICAgIH0K
fQoKdGVtcGxhdGUgPHR5cGVuYW1lIFQ+CmlubGluZSBUZXh0T3V0cHV0JiBvcGVyYXRvcjw8KFRleHRP
dXRwdXQmIHRvLCBjb25zdCB3cDxUPiYgdmFsKQp7CiAgICByZXR1cm4gcHJpbnRXZWFrUG9pbnRlcih0
bywgdmFsLnVuc2FmZV9nZXQoKSk7Cn0KCi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKLy8gdGhpcyBjbGFzcyBq
dXN0IHNlcnZlcyBhcyBhIG5hbWVzcGFjZSBzbyBUWVBFOjptb3ZlUmVmZXJlbmNlcyBjYW4gc3RheQov
LyBwcml2YXRlLgoKY2xhc3MgUmVmZXJlbmNlTW92ZXIgewogICAgLy8gU3Ryb25nUmVmZXJlbmNlQ2Fz
dCBhbmQgV2Vha1JlZmVyZW5jZUNhc3QgZG8gdGhlIGltcGVkYW5jZSBtYXRjaGluZwogICAgLy8gYmV0
d2VlbiB0aGUgZ2VuZXJpYyAodm9pZCopIGltcGxlbWVudGF0aW9uIGluIFJlZmJhc2UgYW5kIHRoZSBz
dHJvbmdseSB0eXBlZAogICAgLy8gdGVtcGxhdGUgc3BlY2lhbGl6YXRpb25zIGJlbG93LgoKICAgIHRl
bXBsYXRlIDx0eXBlbmFtZSBUWVBFPgogICAgc3RydWN0IFN0cm9uZ1JlZmVyZW5jZUNhc3QgOiBwdWJs
aWMgUmVmZXJlbmNlQ29udmVydGVyQmFzZSB7CiAgICAgICAgdmlydHVhbCBzaXplX3QgZ2V0UmVmZXJl
bmNlVHlwZVNpemUoKSBjb25zdCB7IHJldHVybiBzaXplb2YoIHNwPFRZUEU+ICk7IH0KICAgICAgICB2
aXJ0dWFsIHZvaWQqIGdldFJlZmVyZW5jZUJhc2Uodm9pZCBjb25zdCogcCkgY29uc3QgewogICAgICAg
ICAgICBzcDxUWVBFPiBjb25zdCogc3B0cihyZWludGVycHJldF9jYXN0PHNwPFRZUEU+IGNvbnN0Kj4o
cCkpOwogICAgICAgICAgICByZXR1cm4gc3RhdGljX2Nhc3Q8dHlwZW5hbWUgVFlQRTo6YmFzZXR5cGUg
Kj4oc3B0ci0+Z2V0KCkpOwogICAgICAgIH0KICAgIH07CgogICAgdGVtcGxhdGUgPHR5cGVuYW1lIFRZ
UEU+CiAgICBzdHJ1Y3QgV2Vha1JlZmVyZW5jZUNhc3QgOiBwdWJsaWMgUmVmZXJlbmNlQ29udmVydGVy
QmFzZSB7CiAgICAgICAgdmlydHVhbCBzaXplX3QgZ2V0UmVmZXJlbmNlVHlwZVNpemUoKSBjb25zdCB7
IHJldHVybiBzaXplb2YoIHdwPFRZUEU+ICk7IH0KICAgICAgICB2aXJ0dWFsIHZvaWQqIGdldFJlZmVy
ZW5jZUJhc2Uodm9pZCBjb25zdCogcCkgY29uc3QgewogICAgICAgICAgICB3cDxUWVBFPiBjb25zdCog
c3B0cihyZWludGVycHJldF9jYXN0PHdwPFRZUEU+IGNvbnN0Kj4ocCkpOwogICAgICAgICAgICByZXR1
cm4gc3RhdGljX2Nhc3Q8dHlwZW5hbWUgVFlQRTo6YmFzZXR5cGUgKj4oc3B0ci0+dW5zYWZlX2dldCgp
KTsKICAgICAgICB9CiAgICB9OwoKcHVibGljOgogICAgdGVtcGxhdGU8dHlwZW5hbWUgVFlQRT4gc3Rh
dGljIGlubGluZQogICAgdm9pZCBtb3ZlX3JlZmVyZW5jZXMoc3A8VFlQRT4qIGQsIHNwPFRZUEU+IGNv
bnN0KiBzLCBzaXplX3QgbikgewogICAgICAgIG1lbW1vdmUoZCwgcywgbipzaXplb2Yoc3A8VFlQRT4p
KTsKICAgICAgICBTdHJvbmdSZWZlcmVuY2VDYXN0PFRZUEU+IGNhc3RlcjsKICAgICAgICBUWVBFOjpt
b3ZlUmVmZXJlbmNlcyhkLCBzLCBuLCBjYXN0ZXIpOwogICAgfQogICAgdGVtcGxhdGU8dHlwZW5hbWUg
VFlQRT4gc3RhdGljIGlubGluZQogICAgdm9pZCBtb3ZlX3JlZmVyZW5jZXMod3A8VFlQRT4qIGQsIHdw
PFRZUEU+IGNvbnN0KiBzLCBzaXplX3QgbikgewogICAgICAgIG1lbW1vdmUoZCwgcywgbipzaXplb2Yo
d3A8VFlQRT4pKTsKICAgICAgICBXZWFrUmVmZXJlbmNlQ2FzdDxUWVBFPiBjYXN0ZXI7CiAgICAgICAg
VFlQRTo6bW92ZVJlZmVyZW5jZXMoZCwgcywgbiwgY2FzdGVyKTsKICAgIH0KfTsKCi8vIHNwZWNpYWxp
emF0aW9uIGZvciBtb3Zpbmcgc3A8PiBhbmQgd3A8PiB0eXBlcy4KLy8gdGhlc2UgYXJlIHVzZWQgYnkg
dGhlIFtTb3J0ZWR8S2V5ZWRdVmVjdG9yPD4gaW1wbGVtZW50YXRpb25zCi8vIHNwPD4gYW5kIHdwPD4g
bmVlZCB0byBiZSBoYW5kbGVkIHNwZWNpYWxseSwgYmVjYXVzZSB0aGV5IGRvIG5vdAovLyBoYXZlIHRy
aXZpYWwgY29weSBvcGVyYXRpb24gaW4gdGhlIGdlbmVyYWwgY2FzZSAoc2VlIFJlZkJhc2UuY3BwCi8v
IHdoZW4gREVCVUcgb3BzIGFyZSBlbmFibGVkKSwgYnV0IGNhbiBiZSBpbXBsZW1lbnRlZCB2ZXJ5Ci8v
IGVmZmljaWVudGx5IGluIG1vc3QgY2FzZXMuCgp0ZW1wbGF0ZTx0eXBlbmFtZSBUWVBFPiBpbmxpbmUK
dm9pZCBtb3ZlX2ZvcndhcmRfdHlwZShzcDxUWVBFPiogZCwgc3A8VFlQRT4gY29uc3QqIHMsIHNpemVf
dCBuKSB7CiAgICBSZWZlcmVuY2VNb3Zlcjo6bW92ZV9yZWZlcmVuY2VzKGQsIHMsIG4pOwp9Cgp0ZW1w
bGF0ZTx0eXBlbmFtZSBUWVBFPiBpbmxpbmUKdm9pZCBtb3ZlX2JhY2t3YXJkX3R5cGUoc3A8VFlQRT4q
IGQsIHNwPFRZUEU+IGNvbnN0KiBzLCBzaXplX3QgbikgewogICAgUmVmZXJlbmNlTW92ZXI6Om1vdmVf
cmVmZXJlbmNlcyhkLCBzLCBuKTsKfQoKdGVtcGxhdGU8dHlwZW5hbWUgVFlQRT4gaW5saW5lCnZvaWQg
bW92ZV9mb3J3YXJkX3R5cGUod3A8VFlQRT4qIGQsIHdwPFRZUEU+IGNvbnN0KiBzLCBzaXplX3Qgbikg
ewogICAgUmVmZXJlbmNlTW92ZXI6Om1vdmVfcmVmZXJlbmNlcyhkLCBzLCBuKTsKfQoKdGVtcGxhdGU8
dHlwZW5hbWUgVFlQRT4gaW5saW5lCnZvaWQgbW92ZV9iYWNrd2FyZF90eXBlKHdwPFRZUEU+KiBkLCB3
cDxUWVBFPiBjb25zdCogcywgc2l6ZV90IG4pIHsKICAgIFJlZmVyZW5jZU1vdmVyOjptb3ZlX3JlZmVy
ZW5jZXMoZCwgcywgbik7Cn0KCgp9OyAvLyBuYW1lc3BhY2UgUlNDCn07IC8vIG5hbWVzcGFjZSBhbmRy
b2lkCi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKI2VuZGlmIC8vIFJTX1JFRl9CQVNFX0gK</data><mime>application/octet-stream</mime><width>0</width><height>0</height><duration>0</duration><resource-attributes><file-name>RefBase.h</file-name></resource-attributes></resource></note>
</en-export>
