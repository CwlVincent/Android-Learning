<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE en-export SYSTEM "http://xml.evernote.com/pub/evernote-export3.dtd">
<en-export export-date="20171124T092351Z" application="Evernote" version="Evernote Mac 6.12.2 (455489)">
<note><title>Android源码阅读知识补充-input_event</title><content><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE en-note SYSTEM "http://xml.evernote.com/pub/enml2.dtd">

<en-note><div style="display: block; margin: 5px 0px; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; font-size: 20px; letter-spacing: normal; orphans: auto; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);"><span style="color: rgb(51, 51, 51); font-size: 14px;">查看/dev/input/eventX是什么类型的事件， cat /proc/bus/input/devices</span></div><div style="margin: 20px 0px 0px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);"><div><span style="color: rgb(51, 51, 51);"><span style="font-size: 14px;"><br/>
设备有着自己特殊的按键键码，我需要将一些标准的按键，比如0－9，X－Z等模拟成标准按键，比如KEY_0,KEY-Z等，所以需要用到按键模拟，具体 方法就是操作/dev/input/event1文件，向它写入个input_event结构体就可以模拟按键的输入了。<br/><br/>
linux/input.h中有定义，这个文件还定义了标准按键的编码等<br/><br/></span></span></div><div><span style="color: rgb(51, 51, 51);"><span style="font-size: 14px;"><br/></span></span></div><div style="-en-codeblock: true; box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;"><div>struct input_event {</div><div><br/></div><div>struct timeval time; //按键时间</div><div><br/></div><div>__u16 type; //类型，在下面有定义</div><div><br/></div><div>__u16 code; //要模拟成什么按键</div><div><br/></div><div>__s32 value;//是按下还是释放</div><div><br/></div><div>};</div></div><div><br/></div><div style="-en-codeblock: true; box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;"><div>struct timeval</div><div>{</div><div><br/></div><div>time_t tv_sec; /* Seconds. 取得1970年1月1日至今的秒数*/</div><div>suseconds_t tv_usec; /* Microseconds. */</div><div>};</div></div><div><br/></div><div><br/></div><div><span style="color: rgb(51, 51, 51);"><span style="font-size: 14px;"><br/></span></span></div><div><span style="color: rgb(51, 51, 51);"><span style="font-size: 14px;"><br/></span></span></div><div style="-en-codeblock: true; box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;"><div>code：</div><div><br/></div><div>事件的代码.如果事件的类型代码是EV_KEY,该代码code为设备键盘代码.代码植0~127为键盘上的按键代码,0x110~0x116 为鼠标上按键代码,其中0x110(BTN_ LEFT)为鼠标左键,0x111(BTN_RIGHT)为鼠标右键,0x112(BTN_ MIDDLE)为鼠标中键.其它代码含义请参看include/linux/input.h文件. 如果事件的类型代码是EV_REL,code值表示轨迹的类型.如指示鼠标的X轴方向REL_X(代码为0x00),指示鼠标的Y轴方向REL_Y(代码 为0x01),指示鼠标中轮子方向REL_WHEEL(代码为0x08).</div></div><div><span style="color: rgb(51, 51, 51);"><span style="font-size: 14px;"><br/></span></span></div><div><span style="color: rgb(51, 51, 51);"><span style="font-size: 14px;"><br/></span></span></div><div><span style="color: rgb(51, 51, 51);"><span style="font-size: 14px;"><br/></span></span></div><div style="-en-codeblock: true; box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;"><div>type:</div><div><br/></div><div>EV_KEY,键盘</div><div><br/></div><div>EV_REL,相对坐标</div><div><br/></div><div>EV_ABS,绝对坐标</div></div><div><span style="color: rgb(51, 51, 51);"><span style="font-size: 14px;"><br/></span></span></div><div><span style="color: rgb(51, 51, 51);"><span style="font-size: 14px;"><br/></span></span></div><div><span style="color: rgb(51, 51, 51);"><span style="font-size: 14px;"><br/></span></span></div><div style="-en-codeblock: true; box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;"><div>value：</div><div><br/></div><div>事件的值.如果事件的类型代码是EV_KEY,当按键按下时值为1,松开时值为0;如果事件的类型代码是EV_ REL,value的正数值和负数值分别代表两个不同方向的值.</div><div><br/></div><div>/*</div><div><br/></div><div>* Event types</div><div><br/></div><div>*/</div><div><br/></div><div>#define EV_SYN 0x00</div><div><br/></div><div>#define EV_KEY 0x01 //按键</div><div><br/></div><div>#define EV_REL 0x02 //相对坐标(轨迹球)</div><div><br/></div><div>#define EV_ABS 0x03 //绝对坐标</div><div><br/></div><div>#define EV_MSC 0x04 //其他</div><div><br/></div><div>#define EV_SW 0x05</div><div><br/></div><div>#define EV_LED 0x11 //LED</div><div><br/></div><div>#define EV_SND 0x12//声音</div><div><br/></div><div>#define EV_REP 0x14//repeat</div><div><br/></div><div>#define EV_FF 0x15</div><div><br/></div><div>#define EV_PWR 0x16</div><div><br/></div><div>#define EV_FF_STATUS 0x17</div><div><br/></div><div>#define EV_MAX 0x1f</div><div><br/></div><div>#define EV_CNT (EV_MAX+1)</div></div><div><span style="color: rgb(51, 51, 51);"><span style="font-size: 14px;"><br/></span></span></div><p><span style="color: rgb(51, 51, 51);"><span style="font-size: 14px;">&nbsp;</span></span></p><p><span style="color: rgb(51, 51, 51);"><span style="font-size: 14px;">原创代码：</span></span></p><div><span style="color: rgb(51, 51, 51);"><span style="font-size: 14px;"><br/></span></span></div><div style="-en-codeblock: true; box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;"><div>#include &lt;stdio.h&gt;</div><div>#include &lt;string.h&gt;</div><div>#include &lt;stdlib.h&gt;</div><div>#include &lt;fcntl.h&gt;</div><div>#include &lt;Linux/input.h&gt;</div><div><br/></div><div>int main(void)</div><div>{</div><div>&nbsp; &nbsp; struct input_event ev_temp;</div><div>&nbsp; &nbsp; int fd = open(&quot;/dev/input/event0&quot;, O_RDWR);</div><div>&nbsp; &nbsp; if(fd &lt; 0) {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; printf(&quot;open device failed.\n&quot;);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; return 0;</div><div>&nbsp; &nbsp; }</div><div>&nbsp; &nbsp; printf(&quot;open successfully!\n&quot;);</div><div><br/></div><div>&nbsp; &nbsp; int count;</div><div><br/></div><div>char up[] = &quot;抬起&quot;;</div><div>char down[] = &quot;按下&quot;;</div><div><br/></div><div>&nbsp; &nbsp; while(1) {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; count = read(fd, &amp;ev_temp, sizeof(struct input_event));</div><div>if(count)</div><div>{</div><div>if(ev_temp.type == EV_SYN)</div><div>continue;</div><div><br/></div><div>printf(&quot;key:%d &quot;, ev_temp.code);</div><div>printf(&quot;%s\n&quot;, ev_temp.value?down:up);</div><div>continue;</div><div>}</div><div>&nbsp; &nbsp; }</div><div>&nbsp; &nbsp; return 0;</div><div>}</div></div><div><span style="color: rgb(51, 51, 51);"><span style="font-size: 14px;"><br/></span></span></div></div></en-note>]]></content><created>20170820T030531Z</created><updated>20170820T031827Z</updated><note-attributes><author>1009439210@qq.com</author><source>desktop.win</source><source-url>http://blog.csdn.net/bingqingsuimeng/article/details/8178122</source-url><source-application>evernote.win32</source-application><reminder-order>0</reminder-order></note-attributes></note>
</en-export>
