<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE en-export SYSTEM "http://xml.evernote.com/pub/evernote-export3.dtd">
<en-export export-date="20171124T092335Z" application="Evernote" version="Evernote Mac 6.12.2 (455489)">
<note><title>Android触摸事件从触摸到view的处理流程</title><content><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE en-note SYSTEM "http://xml.evernote.com/pub/enml2.dtd">

<en-note><div style="zoom: 1.020565;"><div><span style="font-family: &apos;Courier New&apos;;">1.从触摸开始：</span></div><div><span style="font-family: &apos;Courier New&apos;;">首先打开命令行 adb shell 后输入getevent命令就可以获取到打印的事件</span></div><div><span style="font-variant-caps: normal; font-size: 12px; font-variant-ligatures: no-common-ligatures; color: rgb(41, 249, 20); background-color: rgb(0, 0, 0); font-family: &apos;Courier New&apos;;">/dev/input/event7: 0003 003a 00000015</span></div><div><span style="font-variant-caps: normal; font-size: 12px; font-variant-ligatures: no-common-ligatures; color: rgb(41, 249, 20); background-color: rgb(0, 0, 0); font-family: &apos;Courier New&apos;;">/dev/input/event7: 0003 0035 000002b3</span></div><div><span style="font-variant-caps: normal; font-size: 12px; font-variant-ligatures: no-common-ligatures; color: rgb(41, 249, 20); background-color: rgb(0, 0, 0); font-family: &apos;Courier New&apos;;">/dev/input/event7: 0003 0036 00000526</span></div><div><span style="font-variant-caps: normal; font-size: 12px; font-variant-ligatures: no-common-ligatures; color: rgb(41, 249, 20); background-color: rgb(0, 0, 0); font-family: &apos;Courier New&apos;;">/dev/input/event7: 0000 0000 00000000</span></div><div><span style="font-variant-caps: normal; font-size: 12px; font-variant-ligatures: no-common-ligatures; color: rgb(41, 249, 20); background-color: rgb(0, 0, 0); font-family: &apos;Courier New&apos;;">/dev/input/event7: 0003 003a 00000016</span></div><div><span style="font-variant-caps: normal; font-size: 12px; font-variant-ligatures: no-common-ligatures; color: rgb(41, 249, 20); background-color: rgb(0, 0, 0); font-family: &apos;Courier New&apos;;">/dev/input/event7: 0003 0035 000002c1</span></div><div><br/></div><div><span style="color: rgb(255, 38, 0); font-family: &apos;Courier New&apos;;">问题1：这里面event有多少类事件，分别都对应的0003 003a 00000015是什么意思？</span></div><div><span style="color: rgb(255, 38, 0); font-family: &apos;Courier New&apos;;">答：</span></div><div><span style="font-variant-caps: normal; font-size: 12px; font-variant-ligatures: no-common-ligatures; color: rgb(41, 249, 20); background-color: rgb(0, 0, 0); font-family: &apos;Courier New&apos;;">add device 1: /dev/input/event10</span></div><div><span style="font-variant-caps: normal; font-size: 12px; font-variant-ligatures: no-common-ligatures; color: rgb(41, 249, 20); background-color: rgb(0, 0, 0); font-family: &apos;Courier New&apos;;">&nbsp; name: &nbsp;&nbsp;&nbsp; &quot;msm8953-snd-card-mtp Button Jack&quot;</span></div><div><span style="font-variant-caps: normal; font-size: 12px; font-variant-ligatures: no-common-ligatures; color: rgb(41, 249, 20); background-color: rgb(0, 0, 0); font-family: &apos;Courier New&apos;;">add device 2: /dev/input/event9</span></div><div><span style="font-variant-caps: normal; font-size: 12px; font-variant-ligatures: no-common-ligatures; color: rgb(41, 249, 20); background-color: rgb(0, 0, 0); font-family: &apos;Courier New&apos;;">&nbsp; name: &nbsp;&nbsp;&nbsp; &quot;msm8953-snd-card-mtp Headset Jack&quot;</span></div><div><span style="font-variant-caps: normal; font-size: 12px; font-variant-ligatures: no-common-ligatures; color: rgb(41, 249, 20); background-color: rgb(0, 0, 0); font-family: &apos;Courier New&apos;;">add device 3: /dev/input/event6//光源感应</span></div><div><span style="font-variant-caps: normal; font-size: 12px; font-variant-ligatures: no-common-ligatures; color: rgb(41, 249, 20); background-color: rgb(0, 0, 0); font-family: &apos;Courier New&apos;;">&nbsp; name: &nbsp;&nbsp;&nbsp; &quot;light&quot;</span></div><div><span style="font-variant-caps: normal; font-size: 12px; font-variant-ligatures: no-common-ligatures; color: rgb(41, 249, 20); background-color: rgb(0, 0, 0); font-family: &apos;Courier New&apos;;">add device 4: /dev/input/event5</span></div><div><span style="font-variant-caps: normal; font-size: 12px; font-variant-ligatures: no-common-ligatures; color: rgb(41, 249, 20); background-color: rgb(0, 0, 0); font-family: &apos;Courier New&apos;;">&nbsp; name: &nbsp;&nbsp;&nbsp; &quot;proximity&quot;</span></div><div><span style="font-variant-caps: normal; font-size: 12px; font-variant-ligatures: no-common-ligatures; color: rgb(41, 249, 20); background-color: rgb(0, 0, 0); font-family: &apos;Courier New&apos;;">add device 5: /dev/input/event4</span></div><div><span style="font-variant-caps: normal; font-size: 12px; font-variant-ligatures: no-common-ligatures; color: rgb(41, 249, 20); background-color: rgb(0, 0, 0); font-family: &apos;Courier New&apos;;">&nbsp; name: &nbsp;&nbsp;&nbsp; &quot;camera_hall&quot;</span></div><div><span style="font-variant-caps: normal; font-size: 12px; font-variant-ligatures: no-common-ligatures; color: rgb(41, 249, 20); background-color: rgb(0, 0, 0); font-family: &apos;Courier New&apos;;">add device 6: /dev/input/event3</span></div><div><span style="font-variant-caps: normal; font-size: 12px; font-variant-ligatures: no-common-ligatures; color: rgb(41, 249, 20); background-color: rgb(0, 0, 0); font-family: &apos;Courier New&apos;;">&nbsp; name: &nbsp;&nbsp;&nbsp; &quot;hall&quot;</span></div><div><span style="font-variant-caps: normal; font-size: 12px; font-variant-ligatures: no-common-ligatures; color: rgb(41, 249, 20); background-color: rgb(0, 0, 0); font-family: &apos;Courier New&apos;;">could not get driver version for /dev/input/mouse0, Not a typewriter</span></div><div><span style="font-variant-caps: normal; font-size: 12px; font-variant-ligatures: no-common-ligatures; color: rgb(41, 249, 20); background-color: rgb(0, 0, 0); font-family: &apos;Courier New&apos;;">add device 7: /dev/input/event1</span></div><div><span style="font-variant-caps: normal; font-size: 12px; font-variant-ligatures: no-common-ligatures; color: rgb(41, 249, 20); background-color: rgb(0, 0, 0); font-family: &apos;Courier New&apos;;">&nbsp; name: &nbsp;&nbsp;&nbsp; &quot;hbtp_vm&quot;</span></div><div><span style="font-variant-caps: normal; font-size: 12px; font-variant-ligatures: no-common-ligatures; color: rgb(41, 249, 20); background-color: rgb(0, 0, 0); font-family: &apos;Courier New&apos;;">add device 8: /dev/input/event0</span></div><div><span style="font-variant-caps: normal; font-size: 12px; font-variant-ligatures: no-common-ligatures; color: rgb(41, 249, 20); background-color: rgb(0, 0, 0); font-family: &apos;Courier New&apos;;">&nbsp; name: &nbsp;&nbsp;&nbsp; &quot;qpnp_pon&quot;</span></div><div><span style="font-variant-caps: normal; font-size: 12px; font-variant-ligatures: no-common-ligatures; color: rgb(41, 249, 20); background-color: rgb(0, 0, 0); font-family: &apos;Courier New&apos;;">could not get driver version for /dev/input/mice, Not a typewriter</span></div><div><span style="font-variant-caps: normal; font-size: 12px; font-variant-ligatures: no-common-ligatures; color: rgb(41, 249, 20); background-color: rgb(0, 0, 0); font-family: &apos;Courier New&apos;;">add device 9: /dev/input/event8</span></div><div><span style="font-variant-caps: normal; font-size: 12px; font-variant-ligatures: no-common-ligatures; color: rgb(41, 249, 20); background-color: rgb(0, 0, 0); font-family: &apos;Courier New&apos;;">&nbsp; name: &nbsp;&nbsp;&nbsp; &quot;gpio-keys&quot;</span></div><div><span style="font-variant-caps: normal; font-size: 12px; font-variant-ligatures: no-common-ligatures; color: rgb(41, 249, 20); background-color: rgb(0, 0, 0); font-family: &apos;Courier New&apos;;">add device 10: /dev/input/event7 //华为触摸屏</span></div><div><span style="font-variant-caps: normal; font-size: 12px; font-variant-ligatures: no-common-ligatures; color: rgb(41, 249, 20); background-color: rgb(0, 0, 0); font-family: &apos;Courier New&apos;;">&nbsp; name: &nbsp;&nbsp;&nbsp; &quot;huawei,touchscreen&quot;</span></div><div><span style="font-variant-caps: normal; font-size: 12px; font-variant-ligatures: no-common-ligatures; color: rgb(41, 249, 20); background-color: rgb(0, 0, 0); font-family: &apos;Courier New&apos;;">add device 11: /dev/input/event2</span></div><div><span style="font-variant-caps: normal; font-size: 12px; font-variant-ligatures: no-common-ligatures; color: rgb(41, 249, 20); background-color: rgb(0, 0, 0); font-family: &apos;Courier New&apos;;">&nbsp; name: &nbsp;&nbsp;&nbsp; &quot;fingerprint&quot;</span></div><div>通过getevent -l命令可以获得，通过这个命令对应的type code value</div><div>则通过epoll对device的filedecriptor进行监听，监听后读取到填充的数据结构input_event</div><div><br/></div><div style="-en-codeblock: true; box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;"><div>struct input_event {</div><div><br/></div><div>struct timeval time; //按键时间</div><div><br/></div><div>__u16 type; //类型，在下面有定义</div><div><br/></div><div>__u16 code; //要模拟成什么按键</div><div><br/></div><div>__s32 value;//是按下还是释放</div><div><br/></div><div>};</div></div><div><span style="color: rgb(255, 38, 0); font-family: &apos;Courier New&apos;;">0003 003a 00000015 分别对应的是type code value对应的16进制的值，可以在内核中/Linux/input.h定义</span></div><div><br/></div><div><span style="color: rgb(255, 38, 0); font-size: 14px; font-family: &apos;Courier New&apos;;">问题2：通过getEvent可以获取到这些事件的定义，为什么不同的手机的event系统不一致呢？</span></div><div>答：getEvent是通过inotify监听目录/dev/input/下设备的变化，与epoll监听device设备的数据的变化，相结合来读取到event的事件的，每个手机对应的硬件设备不同对应的event系统也会不同。</div><div><br/></div><div><span style="font-family: &apos;Courier New&apos;;">2.Android系统获取事件</span></div><div><span style="font-family: &apos;Courier New&apos;;">Android系统会不断的去监听/dev/input/目录下的所有设备节点，一旦发现刻可读的时就会立马读取事件并处理</span></div><div><br/></div><div><span style="font-family: &apos;Courier New&apos;;">Android系统是通过InputService来对这些事件进行读取并处理的。</span></div><div><span style="font-family: &apos;Courier New&apos;;">先是由SystemServer启动的WmS。SystemServer.java的startOtherServices()的方法启动WmS</span></div><div><br/></div><div><span style="color: rgb(255, 38, 0); font-size: 12px; font-family: &apos;Courier New&apos;;">问题3：SystemService是谁启动了它的？除了startOtherSerivces()其他什么service？</span></div><div><span style="font-size: 12px; font-family: &apos;Courier New&apos;;">答：SystemService是由zygote这个启动的。</span></div><div><br/></div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;-en-codeblock:true;"><div><span style="font-family: &apos;Courier New&apos;;">/**</span></div><div><span style="font-family: &apos;Courier New&apos;;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* The main entry point from zygote.</span></div><div><span style="font-family: &apos;Courier New&apos;;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span></div><div><span style="font-family: &apos;Courier New&apos;;">&nbsp;&nbsp;&nbsp;&nbsp;public static void main(String[] args) {</span></div><div><span style="font-family: &apos;Courier New&apos;;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new SystemServer().run();</span></div><div><span style="font-family: &apos;Courier New&apos;;">&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><span style="font-family: &apos;Courier New&apos;;">而在run()方法中就启动各种服务：</span></div><div><br/></div><div><span style="font-family: &apos;Courier New&apos;;">- startBootstrapServices();//通过mSytsemSerivceManager.startService(),启动了InstallerService、ActivityManagerService、PowerManagerService、 LightsService、DisplayManagerService、UserManagerService,其中Ams初始化了PowerManagerment</span></div><div><span style="font-family: &apos;Courier New&apos;;">- startCoreServices();启动必要的服务，BatteryService,UsageStatsService,WebViewUpdateService，AmS初始化了UsagesStatsManagerInternal服务</span></div><div><span style="font-family: &apos;Courier New&apos;;">- startOtherServices();启动其他的服务，TelecomloaderService、TelephonyRegistryService、CameraService、AccountManagerService、VibratorService、ConsumerIrService、AlarmManagerService、InputManagerService、WindowManagerService、BluetoothService、InputMethodManagerService、AccessibilityManagerService、mountService、UiModeManagerService、LockSettingsService、DeviceIdleController、DevicePolicyManagerService、StatusBarManagerService、ClipboardService、NetworkManagementService、TextServicesManagerService、NetworkScoreService、NetworkStatsService、NetworkPolicyManagerService、ConnectivityService、NsdService、NotificationManagerService、DeviceStorageMonitorService、LocationManagerService、SearchManagerService、DropBoxManagerService、WallpaperManagerService、AudioService、DockObserver、ThermalObserver、SerialService、TwilightService、JobSchedulerService、DiskStatsService、SamplingProfilerService、NetworkTimeUpdateService、CommonTimeManagementService、DreamManagerService、AssetAtlasService、GraphicsStatsService、RestrictionsManagerService、MediaSessionService、HdmiControlService、TvInputManagerService、MediaRouterService、TrustManagerService、FingerprintService、LauncherAppsService、MediaProjectionManagerService、MmsServiceBroker。</span></div></div><div><br/></div><div><br/></div><div><span style="font-family: &apos;Courier New&apos;;">WmS启动服务的过程startOtherService</span></div><div><br/></div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;-en-codeblock:true;"><div><span style="font-family: &apos;Courier New&apos;;">inputManager = new InputManagerService(context);</span></div><div><span style="font-family: &apos;Courier New&apos;;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Trace.traceEnd(Trace.TRACE_TAG_SYSTEM_SERVER);</span></div><div><br/></div><div><span style="font-family: &apos;Courier New&apos;;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;traceBeginAndSlog(&quot;StartWindowManagerService&quot;);</span></div><div><span style="font-family: &apos;Courier New&apos;;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wm = WindowManagerService.main(context, inputManager,</span></div><div><span style="font-family: &apos;Courier New&apos;;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFactoryTestMode != FactoryTest.FACTORY_TEST_LOW_LEVEL,</span></div><div><span style="font-family: &apos;Courier New&apos;;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!mFirstBoot, mOnlyCore);</span></div><div><span style="font-family: &apos;Courier New&apos;;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ServiceManager.addService(Context.WINDOW_SERVICE, wm);</span></div><div><span style="font-family: &apos;Courier New&apos;;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ServiceManager.addService(Context.INPUT_SERVICE, inputManager);</span></div></div><div><br/></div><div><span style="font-family: &apos;Courier New&apos;;">这里面启动了WindowManagerService，通过也初始化了InputManagerService,掌管输入事件的服务。</span></div><div><span style="font-family: &apos;Courier New&apos;;">我们的inputManager在main里面初始化，而在InputManagerService初始化的时候</span></div><div><br/></div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;-en-codeblock:true;"><div><span style="font-family: &apos;Courier New&apos;;">mPtr = nativeInit(this, mContext, mHandler.getLooper().getQueue());</span></div></div><div><br/></div><div><span style="font-family: &apos;Courier New&apos;;">这里面就跳转到InputManagerService.cpp里面了</span></div><div><br/></div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;-en-codeblock:true;"><div><span style="font-family: &apos;Courier New&apos;;">static jlong nativeInit(JNIEnv* env, jclass /* clazz */,</span></div><div><span style="font-family: &apos;Courier New&apos;;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;jobject serviceObj, jobject contextObj, jobject messageQueueObj) {</span></div><div><span style="font-family: &apos;Courier New&apos;;">&nbsp;&nbsp;&nbsp;&nbsp;sp&lt;MessageQueue&gt; messageQueue = android_os_MessageQueue_getMessageQueue(env, messageQueueObj);</span></div><div><span style="font-family: &apos;Courier New&apos;;">&nbsp;&nbsp;&nbsp;&nbsp;if (messageQueue == NULL) {</span></div><div><span style="font-family: &apos;Courier New&apos;;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;jniThrowRuntimeException(env, &quot;MessageQueue is not initialized.&quot;);</span></div><div><span style="font-family: &apos;Courier New&apos;;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 0;</span></div><div><span style="font-family: &apos;Courier New&apos;;">&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><br/></div><div><span style="font-family: &apos;Courier New&apos;;">&nbsp;&nbsp;&nbsp;&nbsp;NativeInputManager* im = new NativeInputManager(contextObj, serviceObj,</span></div><div><span style="font-family: &apos;Courier New&apos;;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;messageQueue-&gt;getLooper());</span></div><div><span style="font-family: &apos;Courier New&apos;;">&nbsp;&nbsp;&nbsp;&nbsp;im-&gt;incStrong(0);</span></div><div><span style="font-family: &apos;Courier New&apos;;">&nbsp;&nbsp;&nbsp;&nbsp;return reinterpret_cast&lt;jlong&gt;(im);</span></div><div><span style="font-family: &apos;Courier New&apos;;">}</span></div></div><div><br/></div><div><br/></div><div><span style="font-family: &apos;Courier New&apos;;">在这里面就初始化了NativeInputManager</span></div><div><br/></div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;-en-codeblock:true;"><div><span style="font-family: &apos;Courier New&apos;;">NativeInputManager::NativeInputManager(jobject contextObj,</span></div><div><span style="font-family: &apos;Courier New&apos;;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;jobject serviceObj, const sp&lt;Looper&gt;&amp; looper) :</span></div><div><span style="font-family: &apos;Courier New&apos;;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mLooper(looper), mInteractive(true) {</span></div><div><span style="font-family: &apos;Courier New&apos;;">&nbsp;&nbsp;&nbsp;&nbsp;JNIEnv* env = jniEnv();</span></div><div><br/></div><div><span style="font-family: &apos;Courier New&apos;;">&nbsp;&nbsp;&nbsp;&nbsp;mContextObj = env-&gt;NewGlobalRef(contextObj);</span></div><div><span style="font-family: &apos;Courier New&apos;;">&nbsp;&nbsp;&nbsp;&nbsp;mServiceObj = env-&gt;NewGlobalRef(serviceObj);</span></div><div><br/></div><div><span style="font-family: &apos;Courier New&apos;;">&nbsp;&nbsp;&nbsp;&nbsp;{</span></div><div><span style="font-family: &apos;Courier New&apos;;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AutoMutex _l(mLock);</span></div><div><span style="font-family: &apos;Courier New&apos;;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mLocked.systemUiVisibility = ASYSTEM_UI_VISIBILITY_STATUS_BAR_VISIBLE;</span></div><div><span style="font-family: &apos;Courier New&apos;;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mLocked.pointerSpeed = 0;</span></div><div><span style="font-family: &apos;Courier New&apos;;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mLocked.pointerGesturesEnabled = true;</span></div><div><span style="font-family: &apos;Courier New&apos;;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mLocked.showTouches = false;</span></div><div><span style="font-family: &apos;Courier New&apos;;">&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><span style="font-family: &apos;Courier New&apos;;">&nbsp;&nbsp;&nbsp;&nbsp;mInteractive = true;</span></div><div><br/></div><div><span style="font-family: &apos;Courier New&apos;;">&nbsp;&nbsp;&nbsp;&nbsp;sp&lt;EventHub&gt; eventHub = new EventHub();</span></div><div><span style="font-family: &apos;Courier New&apos;;">&nbsp;&nbsp;&nbsp;&nbsp;mInputManager = new InputManager(eventHub, this, this);</span></div><div><span style="font-family: &apos;Courier New&apos;;">}</span></div></div><div><br/></div><div><span style="font-family: &apos;Courier New&apos;;">这里面初始化一个EventHub类，并交给InputManager一并初始化。</span></div><div><br/></div><div><br/></div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;-en-codeblock:true;"><div><span style="font-family: &apos;Courier New&apos;;">/frameworks/native/services/inputflinger/InputManager.cpp</span></div><div><span style="font-family: &apos;Courier New&apos;;">InputManager::InputManager(</span></div><div><span style="font-family: &apos;Courier New&apos;;">37 const sp&lt;InputReaderInterface&gt;&amp; reader,</span></div><div><span style="font-family: &apos;Courier New&apos;;">38 const sp&lt;InputDispatcherInterface&gt;&amp; dispatcher) :</span></div><div><span style="font-family: &apos;Courier New&apos;;">39 mReader(reader),</span></div><div><span style="font-family: &apos;Courier New&apos;;">40 mDispatcher(dispatcher) {</span></div><div><span style="font-family: &apos;Courier New&apos;;">41 initialize();</span></div><div><span style="font-family: &apos;Courier New&apos;;">42}</span></div></div><div><br/></div><div><br/></div><div><span style="font-family: &apos;Courier New&apos;;">然后在initialize()里面初始化两个线程，InputReaderThread，InputDispatcherThread</span></div><div><br/></div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;-en-codeblock:true;"><div><span style="font-family: &apos;Courier New&apos;;">void InputManager::initialize() {</span></div><div><span style="font-family: &apos;Courier New&apos;;">49 mReaderThread = new InputReaderThread(mReader);</span></div><div><span style="font-family: &apos;Courier New&apos;;">50 mDispatcherThread = new InputDispatcherThread(mDispatcher);</span></div><div><span style="font-family: &apos;Courier New&apos;;">51}</span></div></div><div><br/></div><div><span style="font-family: &apos;Courier New&apos;;">在看内部类nativeInputManager</span></div><div><br/></div><div>而在EventHub类初始化的时候，</div><div>1.使用inotify来监听/dev/input/目录下的文件的IN_CREATE|IN_DELETE</div><div>2.用epoll来监听mINotifyFd,这个文件描述符的变化</div><div>3.内部建立pipe，用来设置EventHub::wake是否被调用了</div><div><br/></div><div><span style="color: rgb(255, 0, 0);">问题：在Linux系统中，文件描述符起到怎么样的一个作用？</span></div><div><span style="color: rgb(255, 0, 0);">答：文件描述符：是Linux内核为了高效的管理已经打开的文件所创建的索引，用于指代被打开的文件，所有执行I/O操作都是通过文件描述符，包括pipe、socket、文件读写的等,linux内核共用的是一套fd//</span><a href="http://blog.csdn.net/cywosp/article/details/38965239">http://blog.csdn.net/cywosp/article/details/38965239</a></div><div><br/></div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;-en-codeblock:true;"><div>EventHub::EventHub(void) :</div><div>&nbsp; &nbsp; &nbsp; &nbsp; mBuiltInKeyboardId(NO_BUILT_IN_KEYBOARD), mNextDeviceId(1), mControllerNumbers(),</div><div>&nbsp; &nbsp; &nbsp; &nbsp; mOpeningDevices(0), mClosingDevices(0),</div><div>&nbsp; &nbsp; &nbsp; &nbsp; mNeedToSendFinishedDeviceScan(false),</div><div>&nbsp; &nbsp; &nbsp; &nbsp; mNeedToReopenDevices(false), mNeedToScanDevices(true),</div><div>&nbsp; &nbsp; &nbsp; &nbsp; mPendingEventCount(0), mPendingEventIndex(0), mPendingINotify(false) {</div><div>&nbsp; &nbsp; acquire_wake_lock(PARTIAL_WAKE_LOCK, WAKE_LOCK_ID);</div><div><br/></div><div>&nbsp; &nbsp; mEpollFd = epoll_create(EPOLL_SIZE_HINT);</div><div>&nbsp; &nbsp; LOG_ALWAYS_FATAL_IF(mEpollFd &lt; 0, &quot;Could not create epoll instance.&nbsp; errno=%d&quot;, errno);</div><div><br/></div><div>&nbsp; &nbsp; mINotifyFd = inotify_init();</div><div>&nbsp; &nbsp; int result = inotify_add_watch(mINotifyFd, DEVICE_PATH, IN_DELETE | IN_CREATE);</div><div>&nbsp; &nbsp; LOG_ALWAYS_FATAL_IF(result &lt; 0, &quot;Could not register INotify for %s.&nbsp; errno=%d&quot;,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; DEVICE_PATH, errno);</div><div><br/></div><div>&nbsp; &nbsp; struct epoll_event eventItem;</div><div>&nbsp; &nbsp; memset(&amp;eventItem, 0, sizeof(eventItem));</div><div>&nbsp; &nbsp; eventItem.events = EPOLLIN;</div><div>&nbsp; &nbsp; eventItem.data.u32 = EPOLL_ID_INOTIFY;</div><div>&nbsp; &nbsp; result = epoll_ctl(mEpollFd, EPOLL_CTL_ADD, mINotifyFd, &amp;eventItem);</div><div>&nbsp; &nbsp; LOG_ALWAYS_FATAL_IF(result != 0, &quot;Could not add INotify to epoll instance.&nbsp; errno=%d&quot;, errno);</div><div><br/></div><div>&nbsp; &nbsp; int wakeFds[2];</div><div>&nbsp; &nbsp; result = pipe(wakeFds);</div><div>&nbsp; &nbsp; LOG_ALWAYS_FATAL_IF(result != 0, &quot;Could not create wake pipe.&nbsp; errno=%d&quot;, errno);</div><div><br/></div><div>&nbsp; &nbsp; mWakeReadPipeFd = wakeFds[0];</div><div>&nbsp; &nbsp; mWakeWritePipeFd = wakeFds[1];</div><div><br/></div><div>&nbsp; &nbsp; result = fcntl(mWakeReadPipeFd, F_SETFL, O_NONBLOCK);//fcntl改变已经打开的文件描述符性质</div><div>&nbsp; &nbsp; LOG_ALWAYS_FATAL_IF(result != 0, &quot;Could not make wake read pipe non-blocking.&nbsp; errno=%d&quot;,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; errno);</div><div><br/></div><div>&nbsp; &nbsp; result = fcntl(mWakeWritePipeFd, F_SETFL, O_NONBLOCK);</div><div>&nbsp; &nbsp; LOG_ALWAYS_FATAL_IF(result != 0, &quot;Could not make wake write pipe non-blocking.&nbsp; errno=%d&quot;,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; errno);</div><div><br/></div><div>&nbsp; &nbsp; eventItem.data.u32 = EPOLL_ID_WAKE;</div><div>&nbsp; &nbsp; result = epoll_ctl(mEpollFd, EPOLL_CTL_ADD, mWakeReadPipeFd, &amp;eventItem);</div><div>&nbsp; &nbsp; LOG_ALWAYS_FATAL_IF(result != 0, &quot;Could not add wake read pipe to epoll instance.&nbsp; errno=%d&quot;,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; errno);</div><div><br/></div><div>&nbsp; &nbsp; int major, minor;</div><div>&nbsp; &nbsp; getLinuxRelease(&amp;major, &amp;minor);</div><div>&nbsp; &nbsp; // EPOLLWAKEUP was introduced in kernel 3.5</div><div>&nbsp; &nbsp; mUsingEpollWakeup = major &gt; 3 || (major == 3 &amp;&amp; minor &gt;= 5);</div><div>}</div></div><div><br/></div><div><br/></div><div><span style="font-family: &apos;Courier New&apos;;">至此，所有的初始化，都OK了，在startOtherServices中，WindowManagerService.main(...)之后就调用InputManagerService.start()</span></div><div><br/></div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;-en-codeblock:true;"><div><span style="font-family: &apos;Courier New&apos;;">public void start(){</span></div><div><span style="font-family: &apos;Courier New&apos;;">&nbsp; &nbsp;&nbsp;…</span></div><div><span style="font-family: &apos;Courier New&apos;;">&nbsp; &nbsp; nativeStart(mPtr);</span></div><div><span style="font-family: &apos;Courier New&apos;;">&nbsp; &nbsp; ...</span></div><div><span style="font-family: &apos;Courier New&apos;;">}</span></div><div><span style="font-family: &apos;Courier New&apos;;">frameworks/base/services/core/jni/com_android_server_input_InputManagerService.cpp</span></div><div><span style="font-family: &apos;Courier New&apos;;">static void nativeStart(JNIEnv* env, jclass /* clazz */, jlong ptr) {</span></div><div><span style="font-family: &apos;Courier New&apos;;">&nbsp;&nbsp;&nbsp;&nbsp;NativeInputManager* im = reinterpret_cast&lt;NativeInputManager*&gt;(ptr);</span></div><div>&nbsp; &nbsp; //<span style="font-family: &apos;Courier New&apos;;">reinterpret_cast</span>强制类型转换</div><div><span style="font-family: &apos;Courier New&apos;;">&nbsp;&nbsp;&nbsp;&nbsp;status_t result = im-&gt;getInputManager()-&gt;start();</span></div><div><span style="font-family: &apos;Courier New&apos;;">&nbsp;&nbsp;&nbsp;&nbsp;if (result) {</span></div><div><span style="font-family: &apos;Courier New&apos;;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;jniThrowRuntimeException(env, &quot;Input manager could not be started.&quot;);</span></div><div><span style="font-family: &apos;Courier New&apos;;">&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><span style="font-family: &apos;Courier New&apos;;">}</span></div></div><div><br/></div><div><br/></div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;-en-codeblock:true;"><div><span style="font-family: &apos;Courier New&apos;;">/frameworks/native/services/inputflinger/InputManager.cpp</span></div><div><span style="font-family: &apos;Courier New&apos;;">将InputManager里面的两个线程启动起来</span></div><div><br/></div><div><span style="font-family: &apos;Courier New&apos;;">status_t InputManager::start() {</span></div><div><span style="font-family: &apos;Courier New&apos;;">54 status_t result = mDispatcherThread-&gt;run(&quot;InputDispatcher&quot;, PRIORITY_URGENT_DISPLAY);</span></div><div><span style="font-family: &apos;Courier New&apos;;">55 if (result) {</span></div><div><span style="font-family: &apos;Courier New&apos;;">56 ALOGE(&quot;Could not start InputDispatcher thread due to error %d.&quot;, result);</span></div><div><span style="font-family: &apos;Courier New&apos;;">57 return result;</span></div><div><span style="font-family: &apos;Courier New&apos;;">58&nbsp;&nbsp;&nbsp; }</span></div><div><span style="font-family: &apos;Courier New&apos;;">59</span></div><div><span style="font-family: &apos;Courier New&apos;;">60 result = mReaderThread-&gt;run(&quot;InputReader&quot;, PRIORITY_URGENT_DISPLAY);</span></div><div><span style="font-family: &apos;Courier New&apos;;">61 if (result) {</span></div><div><span style="font-family: &apos;Courier New&apos;;">62 ALOGE(&quot;Could not start InputReader thread due to error %d.&quot;, result);</span></div><div><span style="font-family: &apos;Courier New&apos;;">63</span></div><div><span style="font-family: &apos;Courier New&apos;;">64 mDispatcherThread-&gt;requestExit();</span></div><div><span style="font-family: &apos;Courier New&apos;;">65 return result;</span></div><div><span style="font-family: &apos;Courier New&apos;;">66&nbsp;&nbsp;&nbsp; }</span></div><div><span style="font-family: &apos;Courier New&apos;;">67</span></div><div><span style="font-family: &apos;Courier New&apos;;">68 return OK;</span></div><div><span style="font-family: &apos;Courier New&apos;;">69}</span></div></div><div><br/></div><div><br/></div><div><span style="font-family: &apos;Courier New&apos;;">启动了读线程和分发线程</span></div><div><br/></div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;-en-codeblock:true;"><div><span style="font-family: &apos;Courier New&apos;;">/frameworks/native/services/inputflinger/InputReader.cpp</span></div><div><span style="font-family: &apos;Courier New&apos;;">bool InputReaderThread::threadLoop() {</span></div><div><span style="font-family: &apos;Courier New&apos;;">941 mReader-&gt;loopOnce();</span></div><div><span style="font-family: &apos;Courier New&apos;;">942 return true;</span></div><div><span style="font-family: &apos;Courier New&apos;;">943}</span></div><div><br/></div><div><span style="font-family: &apos;Courier New&apos;;">void InputReader::loopOnce() {</span></div><div><span style="font-family: &apos;Courier New&apos;;">281 int32_t oldGeneration;</span></div><div><span style="font-family: &apos;Courier New&apos;;">282 int32_t timeoutMillis;</span></div><div><span style="font-family: &apos;Courier New&apos;;">283 bool inputDevicesChanged = false;</span></div><div><span style="font-family: &apos;Courier New&apos;;">284 Vector&lt;InputDeviceInfo&gt; inputDevices;</span></div><div><span style="font-family: &apos;Courier New&apos;;">285&nbsp;&nbsp;&nbsp; { // acquire lock</span></div><div><span style="font-family: &apos;Courier New&apos;;">286 AutoMutex _l(mLock);</span></div><div><span style="font-family: &apos;Courier New&apos;;">287</span></div><div><span style="font-family: &apos;Courier New&apos;;">288 oldGeneration = mGeneration;</span></div><div><span style="font-family: &apos;Courier New&apos;;">289 timeoutMillis = -1;</span></div><div><span style="font-family: &apos;Courier New&apos;;">290</span></div><div><span style="font-family: &apos;Courier New&apos;;">291 uint32_t changes = mConfigurationChangesToRefresh;</span></div><div><span style="font-family: &apos;Courier New&apos;;">292 if (changes) {</span></div><div><span style="font-family: &apos;Courier New&apos;;">293 mConfigurationChangesToRefresh = 0;</span></div><div><span style="font-family: &apos;Courier New&apos;;">294 timeoutMillis = 0;</span></div><div><span style="font-family: &apos;Courier New&apos;;">295 refreshConfigurationLocked(changes);</span></div><div><span style="font-family: &apos;Courier New&apos;;">296&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } else if (mNextTimeout != LLONG_MAX) {</span></div><div><span style="font-family: &apos;Courier New&apos;;">297 nsecs_t now = systemTime(SYSTEM_TIME_MONOTONIC);</span></div><div><span style="font-family: &apos;Courier New&apos;;">298 timeoutMillis = toMillisecondTimeoutDelay(now, mNextTimeout);</span></div><div><span style="font-family: &apos;Courier New&apos;;">299&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></div><div><span style="font-family: &apos;Courier New&apos;;">300&nbsp;&nbsp;&nbsp; } // release lock</span></div><div><span style="font-family: &apos;Courier New&apos;;">301</span></div><div><span style="font-family: &apos;Courier New&apos;;">302 size_t count = mEventHub-&gt;getEvents(timeoutMillis, mEventBuffer, EVENT_BUFFER_SIZE);</span></div><div><span style="font-family: &apos;Courier New&apos;;">303</span></div><div><span style="font-family: &apos;Courier New&apos;;">304&nbsp;&nbsp;&nbsp; { // acquire lock</span></div><div><span style="font-family: &apos;Courier New&apos;;">305 AutoMutex _l(mLock);</span></div><div><span style="font-family: &apos;Courier New&apos;;">306 mReaderIsAliveCondition.broadcast();</span></div><div><span style="font-family: &apos;Courier New&apos;;">307</span></div><div><span style="font-family: &apos;Courier New&apos;;">308 if (count) {</span></div><div><span style="font-family: &apos;Courier New&apos;;">309 processEventsLocked(mEventBuffer, count);</span></div><div><span style="font-family: &apos;Courier New&apos;;">310&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></div><div><span style="font-family: &apos;Courier New&apos;;">311</span></div><div><span style="font-family: &apos;Courier New&apos;;">312 if (mNextTimeout != LLONG_MAX) {</span></div><div><span style="font-family: &apos;Courier New&apos;;">313 nsecs_t now = systemTime(SYSTEM_TIME_MONOTONIC);</span></div><div><span style="font-family: &apos;Courier New&apos;;">314 if (now &gt;= mNextTimeout) {</span></div><div><span style="font-family: &apos;Courier New&apos;;">315#if DEBUG_RAW_EVENTS</span></div><div><span style="font-family: &apos;Courier New&apos;;">316 ALOGD(&quot;Timeout expired, latency=%0.3fms&quot;, (now - mNextTimeout) * 0.000001f);</span></div><div><span style="font-family: &apos;Courier New&apos;;">317#endif</span></div><div><span style="font-family: &apos;Courier New&apos;;">318 mNextTimeout = LLONG_MAX;</span></div><div><span style="font-family: &apos;Courier New&apos;;">319 timeoutExpiredLocked(now);</span></div><div><span style="font-family: &apos;Courier New&apos;;">320&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></div><div><span style="font-family: &apos;Courier New&apos;;">321&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></div><div><span style="font-family: &apos;Courier New&apos;;">322</span></div><div><span style="font-family: &apos;Courier New&apos;;">323 if (oldGeneration != mGeneration) {</span></div><div><span style="font-family: &apos;Courier New&apos;;">324 inputDevicesChanged = true;</span></div><div><span style="font-family: &apos;Courier New&apos;;">325 getInputDevicesLocked(inputDevices);</span></div><div><span style="font-family: &apos;Courier New&apos;;">326&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></div><div><span style="font-family: &apos;Courier New&apos;;">327&nbsp;&nbsp;&nbsp; } // release lock</span></div><div><span style="font-family: &apos;Courier New&apos;;">328</span></div><div><span style="font-family: &apos;Courier New&apos;;">329 // Send out a message that the describes the changed input devices.</span></div><div><span style="font-family: &apos;Courier New&apos;;">330 if (inputDevicesChanged) {</span></div><div><span style="font-family: &apos;Courier New&apos;;">331 mPolicy-&gt;notifyInputDevicesChanged(inputDevices);</span></div><div><span style="font-family: &apos;Courier New&apos;;">332&nbsp;&nbsp;&nbsp; }</span></div><div><span style="font-family: &apos;Courier New&apos;;">333</span></div><div><span style="font-family: &apos;Courier New&apos;;">334 // Flush queued events out to the listener.</span></div><div><span style="font-family: &apos;Courier New&apos;;">335 // This must happen outside of the lock because the listener could potentially call</span></div><div><span style="font-family: &apos;Courier New&apos;;">336 // back into the InputReader&apos;s methods, such as getScanCodeState, or become blocked</span></div><div><span style="font-family: &apos;Courier New&apos;;">337 // on another thread similarly waiting to acquire the InputReader lock thereby</span></div><div><span style="font-family: &apos;Courier New&apos;;">338 // resulting in a deadlock.&nbsp; This situation is actually quite plausible because the</span></div><div><span style="font-family: &apos;Courier New&apos;;">339 // listener is actually the input dispatcher, which calls into the window manager,</span></div><div><span style="font-family: &apos;Courier New&apos;;">340 // which occasionally calls into the input reader.</span></div><div><span style="font-family: &apos;Courier New&apos;;">341 mQueuedListener-&gt;flush();</span></div><div><span style="font-family: &apos;Courier New&apos;;">342}</span></div><div><span style="font-family: &apos;Courier New&apos;;">343</span></div></div><div><br/></div><div><span style="font-family: &apos;Courier New&apos;;">而在loopOnce()中，mEventHub-&gt;getEvents(timeoutMillis,mEventBuffer, EVENT_BUFFER_SIZE);</span></div><div><span style="font-family: &apos;Courier New&apos;;">这里面将会从/dev/input里面读取到输入的事件</span></div><div><span style="font-family: &apos;Courier New&apos;;">具体内部getEvents里面的逻辑是</span></div><div><br/></div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;-en-codeblock:true;"><div><span style="font-family: &apos;Courier New&apos;;">721size_t EventHub::getEvents(int timeoutMillis, RawEvent* buffer, size_t bufferSize) {</span></div><div><span style="font-family: &apos;Courier New&apos;;">722&nbsp;&nbsp;&nbsp; ALOG_ASSERT(bufferSize &gt;= 1);</span></div><div><span style="font-family: &apos;Courier New&apos;;">723</span></div><div><span style="font-family: &apos;Courier New&apos;;">724&nbsp;&nbsp;&nbsp; AutoMutex _l(mLock);</span></div><div><span style="font-family: &apos;Courier New&apos;;">725</span></div><div><span style="font-family: &apos;Courier New&apos;;">726&nbsp;&nbsp;&nbsp; struct input_event readBuffer[bufferSize];</span></div><div><span style="font-family: &apos;Courier New&apos;;">727</span></div><div><span style="font-family: &apos;Courier New&apos;;">728&nbsp;&nbsp;&nbsp; RawEvent* event = buffer;</span></div><div><span style="font-family: &apos;Courier New&apos;;">729&nbsp;&nbsp;&nbsp; size_t capacity = bufferSize;</span></div><div><span style="font-family: &apos;Courier New&apos;;">730&nbsp;&nbsp;&nbsp; bool awoken = false;</span></div><div><span style="font-family: &apos;Courier New&apos;;">731&nbsp;&nbsp;&nbsp; for (;;) {</span></div><div><span style="font-family: &apos;Courier New&apos;;">732&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; nsecs_t now = systemTime(SYSTEM_TIME_MONOTONIC);</span></div><div><span style="font-family: &apos;Courier New&apos;;">733</span></div><div><span style="font-family: &apos;Courier New&apos;;">734&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Reopen input devices if needed.</span></div><div><span style="font-family: &apos;Courier New&apos;;">735&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (mNeedToReopenDevices) {</span></div><div><span style="font-family: &apos;Courier New&apos;;">736&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mNeedToReopenDevices = false;</span></div><div><span style="font-family: &apos;Courier New&apos;;">737</span></div><div><span style="font-family: &apos;Courier New&apos;;">738&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ALOGI(&quot;Reopening all input devices due to a configuration change.&quot;);</span></div><div><span style="font-family: &apos;Courier New&apos;;">739</span></div><div><span style="font-family: &apos;Courier New&apos;;">740&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; closeAllDevicesLocked();</span></div><div><span style="font-family: &apos;Courier New&apos;;">741&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mNeedToScanDevices = true;</span></div><div><span style="font-family: &apos;Courier New&apos;;">742&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break; // return to the caller before we actually rescan</span></div><div><span style="font-family: &apos;Courier New&apos;;">743&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></div><div><span style="font-family: &apos;Courier New&apos;;">744</span></div><div><span style="font-family: &apos;Courier New&apos;;">745&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Report any devices that had last been added/removed.</span></div><div><span style="font-family: &apos;Courier New&apos;;">746&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; while (mClosingDevices) {</span></div><div><span style="font-family: &apos;Courier New&apos;;">747&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Device* device = mClosingDevices;</span></div><div><span style="font-family: &apos;Courier New&apos;;">748&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ALOGV(&quot;Reporting device closed: id=%d, name=%s\n&quot;,</span></div><div><span style="font-family: &apos;Courier New&apos;;">749&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; device-&gt;id, device-&gt;path.string());</span></div><div><span style="font-family: &apos;Courier New&apos;;">750&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mClosingDevices = device-&gt;next;</span></div><div><span style="font-family: &apos;Courier New&apos;;">751&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; event-&gt;when = now;</span></div><div><span style="font-family: &apos;Courier New&apos;;">752&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; event-&gt;deviceId = device-&gt;id == mBuiltInKeyboardId ? BUILT_IN_KEYBOARD_ID : device-&gt;id;</span></div><div><span style="font-family: &apos;Courier New&apos;;">753&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; event-&gt;type = DEVICE_REMOVED;</span></div><div><span style="font-family: &apos;Courier New&apos;;">754&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; event += 1;</span></div><div><span style="font-family: &apos;Courier New&apos;;">755&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; delete device;</span></div><div><span style="font-family: &apos;Courier New&apos;;">756&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mNeedToSendFinishedDeviceScan = true;</span></div><div><span style="font-family: &apos;Courier New&apos;;">757&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (--capacity == 0) {</span></div><div><span style="font-family: &apos;Courier New&apos;;">758&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;</span></div><div><span style="font-family: &apos;Courier New&apos;;">759&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></div><div><span style="font-family: &apos;Courier New&apos;;">760&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></div><div><span style="font-family: &apos;Courier New&apos;;">761</span></div><div><span style="font-family: &apos;Courier New&apos;;">762&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (mNeedToScanDevices) {</span></div><div><span style="font-family: &apos;Courier New&apos;;">763&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mNeedToScanDevices = false;</span></div><div><span style="font-family: &apos;Courier New&apos;;">764&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; scanDevicesLocked();</span></div><div><span style="font-family: &apos;Courier New&apos;;">765&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mNeedToSendFinishedDeviceScan = true;</span></div><div><span style="font-family: &apos;Courier New&apos;;">766&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></div><div><span style="font-family: &apos;Courier New&apos;;">767</span></div><div><span style="font-family: &apos;Courier New&apos;;">768&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; while (mOpeningDevices != NULL) {</span></div><div><span style="font-family: &apos;Courier New&apos;;">769&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Device* device = mOpeningDevices;</span></div><div><span style="font-family: &apos;Courier New&apos;;">770&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ALOGV(&quot;Reporting device opened: id=%d, name=%s\n&quot;,</span></div><div><span style="font-family: &apos;Courier New&apos;;">771&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; device-&gt;id, device-&gt;path.string());</span></div><div><span style="font-family: &apos;Courier New&apos;;">772&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mOpeningDevices = device-&gt;next;</span></div><div><span style="font-family: &apos;Courier New&apos;;">773&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; event-&gt;when = now;</span></div><div><span style="font-family: &apos;Courier New&apos;;">774&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; event-&gt;deviceId = device-&gt;id == mBuiltInKeyboardId ? 0 : device-&gt;id;</span></div><div><span style="font-family: &apos;Courier New&apos;;">775&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; event-&gt;type = DEVICE_ADDED;</span></div><div><span style="font-family: &apos;Courier New&apos;;">776&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; event += 1;</span></div><div><span style="font-family: &apos;Courier New&apos;;">777&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mNeedToSendFinishedDeviceScan = true;</span></div><div><span style="font-family: &apos;Courier New&apos;;">778&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (--capacity == 0) {</span></div><div><span style="font-family: &apos;Courier New&apos;;">779&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;</span></div><div><span style="font-family: &apos;Courier New&apos;;">780&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></div><div><span style="font-family: &apos;Courier New&apos;;">781&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></div><div><span style="font-family: &apos;Courier New&apos;;">782</span></div><div><span style="font-family: &apos;Courier New&apos;;">783&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (mNeedToSendFinishedDeviceScan) {</span></div><div><span style="font-family: &apos;Courier New&apos;;">784&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mNeedToSendFinishedDeviceScan = false;</span></div><div><span style="font-family: &apos;Courier New&apos;;">785&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; event-&gt;when = now;</span></div><div><span style="font-family: &apos;Courier New&apos;;">786&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; event-&gt;type = FINISHED_DEVICE_SCAN;</span></div><div><span style="font-family: &apos;Courier New&apos;;">787&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; event += 1;</span></div><div><span style="font-family: &apos;Courier New&apos;;">788&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (--capacity == 0) {</span></div><div><span style="font-family: &apos;Courier New&apos;;">789&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;</span></div><div><span style="font-family: &apos;Courier New&apos;;">790&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></div><div><span style="font-family: &apos;Courier New&apos;;">791&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></div><div><span style="font-family: &apos;Courier New&apos;;">792</span></div><div><span style="font-family: &apos;Courier New&apos;;">793&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Grab the next input event.</span></div><div><span style="font-family: &apos;Courier New&apos;;">794&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bool deviceChanged = false;</span></div><div><span style="font-family: &apos;Courier New&apos;;">795&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; while (mPendingEventIndex &lt; mPendingEventCount) {</span></div><div><span style="font-family: &apos;Courier New&apos;;">796&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; const struct epoll_event&amp; eventItem = mPendingEventItems[mPendingEventIndex++];</span></div><div><span style="font-family: &apos;Courier New&apos;;">797&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (eventItem.data.u32 == EPOLL_ID_INOTIFY) {</span></div><div><span style="font-family: &apos;Courier New&apos;;">798&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (eventItem.events &amp; EPOLLIN) {</span></div><div><span style="font-family: &apos;Courier New&apos;;">799&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mPendingINotify = true;</span></div><div><span style="font-family: &apos;Courier New&apos;;">800&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } else {</span></div><div><span style="font-family: &apos;Courier New&apos;;">801&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ALOGW(&quot;Received unexpected epoll event 0x%08x for INotify.&quot;, eventItem.events);</span></div><div><span style="font-family: &apos;Courier New&apos;;">802&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></div><div><span style="font-family: &apos;Courier New&apos;;">803&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; continue;</span></div><div><span style="font-family: &apos;Courier New&apos;;">804&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></div><div><span style="font-family: &apos;Courier New&apos;;">805</span></div><div><span style="font-family: &apos;Courier New&apos;;">806&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (eventItem.data.u32 == EPOLL_ID_WAKE) {</span></div><div><span style="font-family: &apos;Courier New&apos;;">807&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (eventItem.events &amp; EPOLLIN) {</span></div><div><span style="font-family: &apos;Courier New&apos;;">808&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ALOGV(&quot;awoken after wake()&quot;);</span></div><div><span style="font-family: &apos;Courier New&apos;;">809&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; awoken = true;</span></div><div><span style="font-family: &apos;Courier New&apos;;">810&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; char buffer[16];</span></div><div><span style="font-family: &apos;Courier New&apos;;">811&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ssize_t nRead;</span></div><div><span style="font-family: &apos;Courier New&apos;;">812&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; do {</span></div><div><span style="font-family: &apos;Courier New&apos;;">813&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; nRead = read(mWakeReadPipeFd, buffer, sizeof(buffer));</span></div><div><span style="font-family: &apos;Courier New&apos;;">814&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } while ((nRead == -1 &amp;&amp; errno == EINTR) || nRead == sizeof(buffer));</span></div><div><span style="font-family: &apos;Courier New&apos;;">815&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } else {</span></div><div><span style="font-family: &apos;Courier New&apos;;">816&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ALOGW(&quot;Received unexpected epoll event 0x%08x for wake read pipe.&quot;,</span></div><div><span style="font-family: &apos;Courier New&apos;;">817&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; eventItem.events);</span></div><div><span style="font-family: &apos;Courier New&apos;;">818&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></div><div><span style="font-family: &apos;Courier New&apos;;">819&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; continue;</span></div><div><span style="font-family: &apos;Courier New&apos;;">820&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></div><div><span style="font-family: &apos;Courier New&apos;;">821</span></div><div><span style="font-family: &apos;Courier New&apos;;">822&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ssize_t deviceIndex = mDevices.indexOfKey(eventItem.data.u32);</span></div><div><span style="font-family: &apos;Courier New&apos;;">823&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (deviceIndex &lt; 0) {</span></div><div><span style="font-family: &apos;Courier New&apos;;">824&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ALOGW(&quot;Received unexpected epoll event 0x%08x for unknown device id %d.&quot;,</span></div><div><span style="font-family: &apos;Courier New&apos;;">825&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; eventItem.events, eventItem.data.u32);</span></div><div><span style="font-family: &apos;Courier New&apos;;">826&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; continue;</span></div><div><span style="font-family: &apos;Courier New&apos;;">827&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></div><div><span style="font-family: &apos;Courier New&apos;;">828</span></div><div><span style="font-family: &apos;Courier New&apos;;">829&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Device* device = mDevices.valueAt(deviceIndex);</span></div><div><span style="font-family: &apos;Courier New&apos;;">830&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (eventItem.events &amp; EPOLLIN) {</span></div><div><span style="font-family: &apos;Courier New&apos;;">831&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int32_t readSize = read(device-&gt;fd, readBuffer,</span></div><div><span style="font-family: &apos;Courier New&apos;;">832&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sizeof(struct input_event) * capacity);</span></div><div><span style="font-family: &apos;Courier New&apos;;">833&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (readSize == 0 || (readSize &lt; 0 &amp;&amp; errno == ENODEV)) {</span></div><div><span style="font-family: &apos;Courier New&apos;;">834&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Device was removed before INotify noticed.</span></div><div><span style="font-family: &apos;Courier New&apos;;">835&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ALOGW(&quot;could not get event, removed? (fd: %d size: %&quot; PRId32</span></div><div><span style="font-family: &apos;Courier New&apos;;">836&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot; bufferSize: %zu capacity: %zu errno: %d)\n&quot;,</span></div><div><span style="font-family: &apos;Courier New&apos;;">837&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; device-&gt;fd, readSize, bufferSize, capacity, errno);</span></div><div><span style="font-family: &apos;Courier New&apos;;">838&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; deviceChanged = true;</span></div><div><span style="font-family: &apos;Courier New&apos;;">839&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; closeDeviceLocked(device);</span></div><div><span style="font-family: &apos;Courier New&apos;;">840&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } else if (readSize &lt; 0) {</span></div><div><span style="font-family: &apos;Courier New&apos;;">841&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (errno != EAGAIN &amp;&amp; errno != EINTR) {</span></div><div><span style="font-family: &apos;Courier New&apos;;">842&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ALOGW(&quot;could not get event (errno=%d)&quot;, errno);</span></div><div><span style="font-family: &apos;Courier New&apos;;">843&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></div><div><span style="font-family: &apos;Courier New&apos;;">844&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } else if ((readSize % sizeof(struct input_event)) != 0) {</span></div><div><span style="font-family: &apos;Courier New&apos;;">845&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ALOGE(&quot;could not get event (wrong size: %d)&quot;, readSize);</span></div><div><span style="font-family: &apos;Courier New&apos;;">846&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } else {</span></div><div><span style="font-family: &apos;Courier New&apos;;">847&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int32_t deviceId = device-&gt;id == mBuiltInKeyboardId ? 0 : device-&gt;id;</span></div><div><span style="font-family: &apos;Courier New&apos;;">848</span></div><div><span style="font-family: &apos;Courier New&apos;;">849&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; size_t count = size_t(readSize) / sizeof(struct input_event);</span></div><div><span style="font-family: &apos;Courier New&apos;;">850&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (size_t i = 0; i &lt; count; i++) {</span></div><div><span style="font-family: &apos;Courier New&apos;;">851&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct input_event&amp; iev = readBuffer[i];</span></div><div><span style="font-family: &apos;Courier New&apos;;">852&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ALOGV(&quot;%s got: time=%d.%06d, type=%d, code=%d, value=%d&quot;,</span></div><div><span style="font-family: &apos;Courier New&apos;;">853&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; device-&gt;path.string(),</span></div><div><span style="font-family: &apos;Courier New&apos;;">854&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (int) iev.time.tv_sec, (int) iev.time.tv_usec,</span></div><div><span style="font-family: &apos;Courier New&apos;;">855&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; iev.type, iev.code, iev.value);</span></div><div><span style="font-family: &apos;Courier New&apos;;">856</span></div><div><span style="font-family: &apos;Courier New&apos;;">857&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Some input devices may have a better concept of the time</span></div><div><span style="font-family: &apos;Courier New&apos;;">858&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // when an input event was actually generated than the kernel</span></div><div><span style="font-family: &apos;Courier New&apos;;">859&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // which simply timestamps all events on entry to evdev.</span></div><div><span style="font-family: &apos;Courier New&apos;;">860&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // This is a custom Android extension of the input protocol</span></div><div><span style="font-family: &apos;Courier New&apos;;">861&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // mainly intended for use with uinput based device drivers.</span></div><div><span style="font-family: &apos;Courier New&apos;;">862&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (iev.type == EV_MSC) {</span></div><div><span style="font-family: &apos;Courier New&apos;;">863&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (iev.code == MSC_ANDROID_TIME_SEC) {</span></div><div><span style="font-family: &apos;Courier New&apos;;">864&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; device-&gt;timestampOverrideSec = iev.value;</span></div><div><span style="font-family: &apos;Courier New&apos;;">865&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; continue;</span></div><div><span style="font-family: &apos;Courier New&apos;;">866&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } else if (iev.code == MSC_ANDROID_TIME_USEC) {</span></div><div><span style="font-family: &apos;Courier New&apos;;">867&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; device-&gt;timestampOverrideUsec = iev.value;</span></div><div><span style="font-family: &apos;Courier New&apos;;">868&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; continue;</span></div><div><span style="font-family: &apos;Courier New&apos;;">869&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></div><div><span style="font-family: &apos;Courier New&apos;;">870&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></div><div><span style="font-family: &apos;Courier New&apos;;">871&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (device-&gt;timestampOverrideSec || device-&gt;timestampOverrideUsec) {</span></div><div><span style="font-family: &apos;Courier New&apos;;">872&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; iev.time.tv_sec = device-&gt;timestampOverrideSec;</span></div><div><span style="font-family: &apos;Courier New&apos;;">873&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; iev.time.tv_usec = device-&gt;timestampOverrideUsec;</span></div><div><span style="font-family: &apos;Courier New&apos;;">874&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (iev.type == EV_SYN &amp;&amp; iev.code == SYN_REPORT) {</span></div><div><span style="font-family: &apos;Courier New&apos;;">875&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; device-&gt;timestampOverrideSec = 0;</span></div><div><span style="font-family: &apos;Courier New&apos;;">876&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; device-&gt;timestampOverrideUsec = 0;</span></div><div><span style="font-family: &apos;Courier New&apos;;">877&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></div><div><span style="font-family: &apos;Courier New&apos;;">878&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ALOGV(&quot;applied override time %d.%06d&quot;,</span></div><div><span style="font-family: &apos;Courier New&apos;;">879&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int(iev.time.tv_sec), int(iev.time.tv_usec));</span></div><div><span style="font-family: &apos;Courier New&apos;;">880&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></div><div><span style="font-family: &apos;Courier New&apos;;">881</span></div><div><span style="font-family: &apos;Courier New&apos;;">882&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Use the time specified in the event instead of the current time</span></div><div><span style="font-family: &apos;Courier New&apos;;">883&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // so that downstream code can get more accurate estimates of</span></div><div><span style="font-family: &apos;Courier New&apos;;">884&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // event dispatch latency from the time the event is enqueued onto</span></div><div><span style="font-family: &apos;Courier New&apos;;">885&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // the evdev client buffer.</span></div><div><span style="font-family: &apos;Courier New&apos;;">886&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //</span></div><div><span style="font-family: &apos;Courier New&apos;;">887&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // The event&apos;s timestamp fortuitously uses the same monotonic clock</span></div><div><span style="font-family: &apos;Courier New&apos;;">888&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // time base as the rest of Android.&nbsp; The kernel event device driver</span></div><div><span style="font-family: &apos;Courier New&apos;;">889&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // (drivers/input/evdev.c) obtains timestamps using ktime_get_ts().</span></div><div><span style="font-family: &apos;Courier New&apos;;">890&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // The systemTime(SYSTEM_TIME_MONOTONIC) function we use everywhere</span></div><div><span style="font-family: &apos;Courier New&apos;;">891&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // calls clock_gettime(CLOCK_MONOTONIC) which is implemented as a</span></div><div><span style="font-family: &apos;Courier New&apos;;">892&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // system call that also queries ktime_get_ts().</span></div><div><span style="font-family: &apos;Courier New&apos;;">893&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; event-&gt;when = nsecs_t(iev.time.tv_sec) * 1000000000LL</span></div><div><span style="font-family: &apos;Courier New&apos;;">894&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; + nsecs_t(iev.time.tv_usec) * 1000LL;</span></div><div><span style="font-family: &apos;Courier New&apos;;">895&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ALOGV(&quot;event time %&quot; PRId64 &quot;, now %&quot; PRId64, event-&gt;when, now);</span></div><div><span style="font-family: &apos;Courier New&apos;;">896</span></div><div><span style="font-family: &apos;Courier New&apos;;">897&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Bug 7291243: Add a guard in case the kernel generates timestamps</span></div><div><span style="font-family: &apos;Courier New&apos;;">898&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // that appear to be far into the future because they were generated</span></div><div><span style="font-family: &apos;Courier New&apos;;">899&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // using the wrong clock source.</span></div><div><span style="font-family: &apos;Courier New&apos;;">900&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //</span></div><div><span style="font-family: &apos;Courier New&apos;;">901&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // This can happen because when the input device is initially opened</span></div><div><span style="font-family: &apos;Courier New&apos;;">902&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // it has a default clock source of CLOCK_REALTIME.&nbsp; Any input events</span></div><div><span style="font-family: &apos;Courier New&apos;;">903&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // enqueued right after the device is opened will have timestamps</span></div><div><span style="font-family: &apos;Courier New&apos;;">904&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // generated using CLOCK_REALTIME.&nbsp; We later set the clock source</span></div><div><span style="font-family: &apos;Courier New&apos;;">905&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // to CLOCK_MONOTONIC but it is already too late.</span></div><div><span style="font-family: &apos;Courier New&apos;;">906&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //</span></div><div><span style="font-family: &apos;Courier New&apos;;">907&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Invalid input event timestamps can result in ANRs, crashes and</span></div><div><span style="font-family: &apos;Courier New&apos;;">908&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // and other issues that are hard to track down.&nbsp; We must not let them</span></div><div><span style="font-family: &apos;Courier New&apos;;">909&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // propagate through the system.</span></div><div><span style="font-family: &apos;Courier New&apos;;">910&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //</span></div><div><span style="font-family: &apos;Courier New&apos;;">911&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Log a warning so that we notice the problem and recover gracefully.</span></div><div><span style="font-family: &apos;Courier New&apos;;">912&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (event-&gt;when &gt;= now + 10 * 1000000000LL) {</span></div><div><span style="font-family: &apos;Courier New&apos;;">913&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Double-check.&nbsp; Time may have moved on.</span></div><div><span style="font-family: &apos;Courier New&apos;;">914&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; nsecs_t time = systemTime(SYSTEM_TIME_MONOTONIC);</span></div><div><span style="font-family: &apos;Courier New&apos;;">915&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (event-&gt;when &gt; time) {</span></div><div><span style="font-family: &apos;Courier New&apos;;">916&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ALOGW(&quot;An input event from %s has a timestamp that appears to &quot;</span></div><div><span style="font-family: &apos;Courier New&apos;;">917&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;have been generated using the wrong clock source &quot;</span></div><div><span style="font-family: &apos;Courier New&apos;;">918&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;(expected CLOCK_MONOTONIC): &quot;</span></div><div><span style="font-family: &apos;Courier New&apos;;">919&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;event time %&quot; PRId64 &quot;, current time %&quot; PRId64</span></div><div><span style="font-family: &apos;Courier New&apos;;">920&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;, call time %&quot; PRId64 &quot;.&nbsp; &quot;</span></div><div><span style="font-family: &apos;Courier New&apos;;">921&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;Using current time instead.&quot;,</span></div><div><span style="font-family: &apos;Courier New&apos;;">922&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; device-&gt;path.string(), event-&gt;when, time, now);</span></div><div><span style="font-family: &apos;Courier New&apos;;">923&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; event-&gt;when = time;</span></div><div><span style="font-family: &apos;Courier New&apos;;">924&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } else {</span></div><div><span style="font-family: &apos;Courier New&apos;;">925&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ALOGV(&quot;Event time is ok but failed the fast path and required &quot;</span></div><div><span style="font-family: &apos;Courier New&apos;;">926&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;an extra call to systemTime: &quot;</span></div><div><span style="font-family: &apos;Courier New&apos;;">927&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;event time %&quot; PRId64 &quot;, current time %&quot; PRId64</span></div><div><span style="font-family: &apos;Courier New&apos;;">928&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;, call time %&quot; PRId64 &quot;.&quot;,</span></div><div><span style="font-family: &apos;Courier New&apos;;">929&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; event-&gt;when, time, now);</span></div><div><span style="font-family: &apos;Courier New&apos;;">930&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></div><div><span style="font-family: &apos;Courier New&apos;;">931&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></div><div><span style="font-family: &apos;Courier New&apos;;">932&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; event-&gt;deviceId = deviceId;</span></div><div><span style="font-family: &apos;Courier New&apos;;">933&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; event-&gt;type = iev.type;</span></div><div><span style="font-family: &apos;Courier New&apos;;">934&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; event-&gt;code = iev.code;</span></div><div><span style="font-family: &apos;Courier New&apos;;">935&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; event-&gt;value = iev.value;</span></div><div><span style="font-family: &apos;Courier New&apos;;">936&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; event += 1;</span></div><div><span style="font-family: &apos;Courier New&apos;;">937&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; capacity -= 1;</span></div><div><span style="font-family: &apos;Courier New&apos;;">938&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></div><div><span style="font-family: &apos;Courier New&apos;;">939&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (capacity == 0) {</span></div><div><span style="font-family: &apos;Courier New&apos;;">940&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // The result buffer is full.&nbsp; Reset the pending event index</span></div><div><span style="font-family: &apos;Courier New&apos;;">941&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // so we will try to read the device again on the next iteration.</span></div><div><span style="font-family: &apos;Courier New&apos;;">942&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mPendingEventIndex -= 1;</span></div><div><span style="font-family: &apos;Courier New&apos;;">943&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;</span></div><div><span style="font-family: &apos;Courier New&apos;;">944&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></div><div><span style="font-family: &apos;Courier New&apos;;">945&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></div><div><span style="font-family: &apos;Courier New&apos;;">946&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } else if (eventItem.events &amp; EPOLLHUP) {</span></div><div><span style="font-family: &apos;Courier New&apos;;">947&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ALOGI(&quot;Removing device %s due to epoll hang-up event.&quot;,</span></div><div><span style="font-family: &apos;Courier New&apos;;">948&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; device-&gt;identifier.name.string());</span></div><div><span style="font-family: &apos;Courier New&apos;;">949&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; deviceChanged = true;</span></div><div><span style="font-family: &apos;Courier New&apos;;">950&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; closeDeviceLocked(device);</span></div><div><span style="font-family: &apos;Courier New&apos;;">951&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } else {</span></div><div><span style="font-family: &apos;Courier New&apos;;">952&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ALOGW(&quot;Received unexpected epoll event 0x%08x for device %s.&quot;,</span></div><div><span style="font-family: &apos;Courier New&apos;;">953&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; eventItem.events, device-&gt;identifier.name.string());</span></div><div><span style="font-family: &apos;Courier New&apos;;">954&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></div><div><span style="font-family: &apos;Courier New&apos;;">955&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></div><div><span style="font-family: &apos;Courier New&apos;;">956</span></div><div><span style="font-family: &apos;Courier New&apos;;">957&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // readNotify() will modify the list of devices so this must be done after</span></div><div><span style="font-family: &apos;Courier New&apos;;">958&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // processing all other events to ensure that we read all remaining events</span></div><div><span style="font-family: &apos;Courier New&apos;;">959&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // before closing the devices.</span></div><div><span style="font-family: &apos;Courier New&apos;;">960&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (mPendingINotify &amp;&amp; mPendingEventIndex &gt;= mPendingEventCount) {</span></div><div><span style="font-family: &apos;Courier New&apos;;">961&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mPendingINotify = false;</span></div><div><span style="font-family: &apos;Courier New&apos;;">962&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; readNotifyLocked();</span></div><div><span style="font-family: &apos;Courier New&apos;;">963&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; deviceChanged = true;</span></div><div><span style="font-family: &apos;Courier New&apos;;">964&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></div><div><span style="font-family: &apos;Courier New&apos;;">965</span></div><div><span style="font-family: &apos;Courier New&apos;;">966&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Report added or removed devices immediately.</span></div><div><span style="font-family: &apos;Courier New&apos;;">967&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (deviceChanged) {</span></div><div><span style="font-family: &apos;Courier New&apos;;">968&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; continue;</span></div><div><span style="font-family: &apos;Courier New&apos;;">969&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></div><div><span style="font-family: &apos;Courier New&apos;;">970</span></div><div><span style="font-family: &apos;Courier New&apos;;">971&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Return now if we have collected any events or if we were explicitly awoken.</span></div><div><span style="font-family: &apos;Courier New&apos;;">972&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (event != buffer || awoken) {</span></div><div><span style="font-family: &apos;Courier New&apos;;">973&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;</span></div><div><span style="font-family: &apos;Courier New&apos;;">974&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></div><div><span style="font-family: &apos;Courier New&apos;;">975</span></div><div><span style="font-family: &apos;Courier New&apos;;">976&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Poll for events.&nbsp; Mind the wake lock dance!</span></div><div><span style="font-family: &apos;Courier New&apos;;">977&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // We hold a wake lock at all times except during epoll_wait().&nbsp; This works due to some</span></div><div><span style="font-family: &apos;Courier New&apos;;">978&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // subtle choreography.&nbsp; When a device driver has pending (unread) events, it acquires</span></div><div><span style="font-family: &apos;Courier New&apos;;">979&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // a kernel wake lock.&nbsp; However, once the last pending event has been read, the device</span></div><div><span style="font-family: &apos;Courier New&apos;;">980&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // driver will release the kernel wake lock.&nbsp; To prevent the system from going to sleep</span></div><div><span style="font-family: &apos;Courier New&apos;;">981&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // when this happens, the EventHub holds onto its own user wake lock while the client</span></div><div><span style="font-family: &apos;Courier New&apos;;">982&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // is processing events.&nbsp; Thus the system can only sleep if there are no events</span></div><div><span style="font-family: &apos;Courier New&apos;;">983&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // pending or currently being processed.</span></div><div><span style="font-family: &apos;Courier New&apos;;">984&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //</span></div><div><span style="font-family: &apos;Courier New&apos;;">985&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // The timeout is advisory only.&nbsp; If the device is asleep, it will not wake just to</span></div><div><span style="font-family: &apos;Courier New&apos;;">986&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // service the timeout.</span></div><div><span style="font-family: &apos;Courier New&apos;;">987&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mPendingEventIndex = 0;</span></div><div><span style="font-family: &apos;Courier New&apos;;">988</span></div><div><span style="font-family: &apos;Courier New&apos;;">989&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mLock.unlock(); // release lock before poll, must be before release_wake_lock</span></div><div><span style="font-family: &apos;Courier New&apos;;">990&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; release_wake_lock(WAKE_LOCK_ID);</span></div><div><span style="font-family: &apos;Courier New&apos;;">991</span></div><div><span style="font-family: &apos;Courier New&apos;;">992&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int pollResult = epoll_wait(mEpollFd, mPendingEventItems, EPOLL_MAX_EVENTS, timeoutMillis);</span></div><div><span style="font-family: &apos;Courier New&apos;;">993</span></div><div><span style="font-family: &apos;Courier New&apos;;">994&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; acquire_wake_lock(PARTIAL_WAKE_LOCK, WAKE_LOCK_ID);</span></div><div><span style="font-family: &apos;Courier New&apos;;">995&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mLock.lock(); // reacquire lock after poll, must be after acquire_wake_lock</span></div><div><span style="font-family: &apos;Courier New&apos;;">996</span></div><div><span style="font-family: &apos;Courier New&apos;;">997&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (pollResult == 0) {</span></div><div><span style="font-family: &apos;Courier New&apos;;">998&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Timed out.</span></div><div><span style="font-family: &apos;Courier New&apos;;">999&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mPendingEventCount = 0;</span></div><div><span style="font-family: &apos;Courier New&apos;;">1000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;</span></div><div><span style="font-family: &apos;Courier New&apos;;">1001&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></div><div><span style="font-family: &apos;Courier New&apos;;">1002</span></div><div><span style="font-family: &apos;Courier New&apos;;">1003&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (pollResult &lt; 0) {</span></div><div><span style="font-family: &apos;Courier New&apos;;">1004&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // An error occurred.</span></div><div><span style="font-family: &apos;Courier New&apos;;">1005&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mPendingEventCount = 0;</span></div><div><span style="font-family: &apos;Courier New&apos;;">1006</span></div><div><span style="font-family: &apos;Courier New&apos;;">1007&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Sleep after errors to avoid locking up the system.</span></div><div><span style="font-family: &apos;Courier New&apos;;">1008&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Hopefully the error is transient.</span></div><div><span style="font-family: &apos;Courier New&apos;;">1009&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (errno != EINTR) {</span></div><div><span style="font-family: &apos;Courier New&apos;;">1010&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ALOGW(&quot;poll failed (errno=%d)\n&quot;, errno);</span></div><div><span style="font-family: &apos;Courier New&apos;;">1011&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; usleep(100000);</span></div><div><span style="font-family: &apos;Courier New&apos;;">1012&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></div><div><span style="font-family: &apos;Courier New&apos;;">1013&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } else {</span></div><div><span style="font-family: &apos;Courier New&apos;;">1014&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Some events occurred.</span></div><div><span style="font-family: &apos;Courier New&apos;;">1015&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mPendingEventCount = size_t(pollResult);</span></div><div><span style="font-family: &apos;Courier New&apos;;">1016&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></div><div><span style="font-family: &apos;Courier New&apos;;">1017&nbsp;&nbsp;&nbsp; }</span></div><div><span style="font-family: &apos;Courier New&apos;;">1018</span></div><div><span style="font-family: &apos;Courier New&apos;;">1019&nbsp;&nbsp;&nbsp; // All done, return the number of events we read.</span></div><div><span style="font-family: &apos;Courier New&apos;;">1020&nbsp;&nbsp;&nbsp; return event - buffer;</span></div><div><span style="font-family: &apos;Courier New&apos;;">1021}</span></div></div><div><br/></div><div><span style="font-family: &apos;Courier New&apos;;">EventHub里面有三种设备对象 mOpeningDevices链表, mClosingDevices链表，mDevices Map&lt;DeviceId, Device&gt;，event RawEvent*</span></div><div><br/></div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;-en-codeblock:true;"><div>1.首先假如设备的配置更新的话，</div><div><br/></div><div>void EventHub::requestReopenDevices(){</div><div>&nbsp;&nbsp; &nbsp;&nbsp; &nbsp; AutoMutex_l(m_Lock);</div><div>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;mNeedToReopenDevices = true;</div><div>}</div><div><br/></div><div>那么就关闭所有的</div><div>2.closeAllDevicesLocked()//循环mDevices对象关闭所有的对象；</div><div><br/></div><div>3.这里面关闭device的releaseControllerNumberLocked(device);</div><div>4.然后mDevices移除device,mOpeningDevices链表中移除这个device；假如没在mOpeningDevices找到的话，就放到mClosingDevices链表里面；</div><div>5.循环删除mClosingDevices里面的对象，并将这些对象赋值给event链表中，直到读到一个EVENT_BUFFER_SIZE,这时候event的type是DEVICE_REMOVED，设置mNeedToSendFinishedDeviceScan=true</div><div>6.这时候判断是不是需要重新读入设备，openDeviceLocked那么就从/dev/input文件夹里面读入设备信息，并device文件进行添加文件读写的监视放到epoll中去，然后device放到mOpeningDevices和mDevices设备中去；</div><div>7.读取mOpeningDevices里面的变量，添加event事件（when，deviceId，type），type=DEVICE_ADD; 设置mNeedToSendFinishedDeviceScan=true;</div><div>8.mNeedToSendFinishedDeviceScan==true,添加event事件(type=FINISHED_DEVICE_SCAN)</div><div>9.循环读取上次的没有读完的mPendingEventItems事件信息，（假如发送设备热插拔事件或者mWakeRedPipedFd有变化，跳过读取下一个事件），根据事件的data.u32来找到设备的index，通过deviceId来获取设备的事件信息input_event，(设备信息==0 或者发送错误，设备发生变化，需要关闭此设备)，循环读取input_event里面的信息，然后添加event信息（when=不是当前的事件，而是使用是使用进入evdev客户端调度的事件）</div><div>10.设备发生了热插拔，那么在关闭之前，读取所有的设备信息出来。</div><div>11.设备发生改变了，就重新关闭设备，在读取设备信息。</div><div>12.epoll_wait读取所有的input信息到mPendingEventItems里面。而在读取设备信息的时候，获取系统休眠的锁，而在读取处理事件完毕，在epoll_wait里面的时候，就释放恢复系统休眠锁。</div></div><div><br/></div><div><br/></div><div><br/></div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;-en-codeblock:true;"><div><span style="font-weight: bold; color: rgb(255, 0, 0);">ps</span>:ioctl//获取设备的名称</div><div>epoll_ctl//假如设备合法的话，就注册该设备</div><div>mPendingEventCount:调用epoll_wait时的返回值，如果没有事件，则其值为0；</div><div>mPendingEventIndex:当前需要处理的事件索引；</div><div>mEpollFd:epoll实例，在EventHub::EventHub中调用epoll_create(EPOLL_SIZE_HINT)初始化此例，所有输入的事件通过epoll_wait来获取，每一个事件的数据结构：struct epoll_event.es:epoll_event只表明某个设备上有事件，并不包含事件内容，具体事件内容需要通过read来读取。等侍注册在epfd上的socket fd的事件的发生，如果发生则将发生的sokct fd和事件类型放入到events数组中。</div><div><br/></div><div><font color="#FF2600"><b>这里面有个bug，就是设备事件发生的时间远大于系统的某个固定点开始绝对逝去的时间，那么这个事件将不会被处理,无效的输入事件可能导致ANRs，Crashes 和其他事件等这些事件很难去定位，我们不能让他在系统内传递</b></font></div><div>Clock_realtime</div><div>代表机器上可以理解为当前的我们所常看的时间，其当time-of-day 被修改的时候而改变，这包括NTP对它的修改（NTP:Network Time Protocol（NTP）是用来使计算机时间同步化的一种协议，它可以使计算机对其服务器或时钟源（如石英钟，GPS等等)做同步化，它可以提供高精准度的时间校正（LAN上与标准间差小于1毫秒，WAN上几十毫秒），且可介由加密确认的方式来防止恶毒的协议攻击。）</div><div>CLOCK_MONOTONIC</div><div>代表从过去某个固定的时间点开始的绝对的逝去时间，它不受任何系统time-of-day时钟修改的影响，如果你想计算出在一台计算机上不受重启的影响，两个事件发生的间隔时间的话，那么它将是最好的选择。</div></div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><div>InputReader中的mDevices InputDevice链表</div><div>processEventsLocked(const RawEvent* mEventBufffer,size_t cout)；处理从/dev/input/的输入事件</div><div><br/></div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;-en-codeblock:true;"><div>1.循环的读取RawEvent，count -= batchSize;</div><div>2.判断RawEvent.Type，EventHubInterface::FIRST_SYNTHETIC_EVENT = DEVICE_ADD；</div><div>3.假如事件小于FIRST_SYTHETIC_EVENT，那么就读取事件到下一个Device或者type&gt;DEVICE_ADD，调用processEventsForDeviceLocked();</div><div>4.processEventsForDeviceLocked()；（假如在mDevices里面找不到，或者isIngnored的话，那么就return）， 不然就调用device_process(rawEvents, count)，这里process的调用会调整到mMapper[i]来处理事件；</div><div>5.这里以SingleTouchInputMapper举例，mCursorButtonAccumlator.prosss(rawEvents);mCursorScroollAccumulator.process(rawEvent);mTouchButtonAccumulator.process(rawEvent);这些累加器记录这些事件，rawEvent.type==EV_SYN &amp;&amp; rawEvent.code==SYN_REPORT的话，就调用syncTouch(when, RawState* state)通过各种累加器来处理这些事件,assignPointerIds,processRawTouched(false)</div><div>processEventsLocked()-&gt;processEventsForDeviceLocked()-&gt;InputDevice.process-&gt;InputMapper.process-&gt;TouchInputMapper.process()-&gt;SingleTouchInputMapper.process()-&gt;TouchInputMapper.sync()-&gt;TouchInputMapper.processRawTouches()-&gt;TouchInputMapper.cookAndDispatch()-&gt;TouchInputMapper.dispatchPointerUsage()-&gt;TouchInputMapper.dispatchPointerGestures()-&gt;InputDispatcher-&gt;notifyMotion();</div><div>6<span style="font-weight: bold; color: rgb(255, 0, 0);">.处理按键事件要进行映射，把设备读取的值转换成Android上层统一处理的值，触摸事件只是简单的赋值。notifyKey通知按键事件，notifyMotion通知触摸事件，</span></div><div>7.QueueInputListener将所有的事件都放到mArgsQueue队列里面去，flush的时候，将调用成员里的notify函数，将调用InputListenerInterface-&gt;notifyMotion()方法，将这个事件通知到InputDispatchThread</div></div><div><br/></div><div>CursorButtonAccmulater:是按键的点击事件，上下左右，向前向后</div><div>CursorMotionAccmulater:是鼠标移动的事件，记录事件的x、y坐标</div><div>CursorSrollAccmulater:是滑动的事件，记录事件的鼠标上下或左右滑动的距离</div><div>TouchButtonAccumulator：</div><div>SingleTouchMotionAccumulator：记录点击事件的坐标信息，及滑动的距离</div><div><br/></div><div><br/></div><div><br/></div><div><span style="font-family: Consolas;">通知InputDispatchThread来通知MotionEvent到上层,IputDispatcher内中有4个对象mInBoundQueu(接收来自InputReader的event事件)，InputDispatcher::Connection::outboundQueue(分发事件前会放到mOoutBoundQueue中),</span><span style="font-family: Consolas;">InputDispatcher::Connection::waitQueue(在事件处理完毕之后，将从这个waitQueue中移除)，CommandEntry对象，当出现分发发生异常，会将这些事件放到这个队列中去，下次分发前会优先处理这些事件。</span></div><div><span style="font-family: Consolas;"><br/></span></div><div>InputDispatcher::notifyMotion()-&gt;mInboundQueue.enqueueAtTail(entry);//放到这个mInBoundQueue队列中</div><div><br/></div><div>InputDispatcherThread是用来分发事件的线程，是InputDispatcher的实现的原理</div><div><br/></div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;-en-codeblock:true;"><div>bool InputDispatcherThread::threadLoop() {</div><div>&nbsp; &nbsp; mDispatcher-&gt;dispatchOnce();</div><div>&nbsp; &nbsp; return true;</div><div>}</div></div><div><br/></div><div>每次分发，都调用dispatchOnce，其内部调用的是dispatchOnceInnerLocked分发后，线程会调用pollOnce睡眠</div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;-en-codeblock:true;"><div>bool&nbsp;InputDispatcherThread::threadLoop() {</div><div>&nbsp; &nbsp; mDispatcher-&gt;dispatchOnce();</div><div>&nbsp; &nbsp; return&nbsp;true;</div><div>}</div></div><div><br/></div><div>分发的步骤主要是以下的几个步骤：</div><div>1.从mBoundQueue中取出事件;</div><div>2.特殊事件的处理:如POLICY_FLAG_PASS_TO_USER这些事件能够直接发给用户，类似电量不足的这类事件;当电量低于20%，而直接抛给上层，不需要知道当前是哪个Activity;</div><div>3.一般直接进行分发。</div><div><br/></div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;-en-codeblock:true;"><div>void&nbsp;InputDispatcher::dispatchOnceInnerLocked(nsecs_t* nextWakeupTime) {</div><div>&nbsp; &nbsp; mPendingEvent = mInboundQueue.dequeueAtHead();</div><div><br/></div><div>&nbsp; &nbsp; // Poke user activity for this event.</div><div>&nbsp; &nbsp; if&nbsp;(mPendingEvent-&gt;policyFlags &amp; POLICY_FLAG_PASS_TO_USER) {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; pokeUserActivityLocked(mPendingEvent);</div><div>&nbsp; &nbsp; }</div><div><br/></div><div>&nbsp; &nbsp; switch&nbsp;(mPendingEvent-&gt;type) {</div><div>&nbsp; &nbsp; case&nbsp;EventEntry::TYPE_KEY: {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; done = dispatchKeyLocked(currentTime, typedEntry, &amp;dropReason, nextWakeupTime);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; break;</div><div>&nbsp; &nbsp; }</div><div>&nbsp; &nbsp; }</div><div>}</div></div><div><br/></div><div>分发事件，肯定需要知道事件要分发到哪里，即分发的窗口，不过目标窗口不止一个</div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;-en-codeblock:true;"><div>bool&nbsp;InputDispatcher::dispatchKeyLocked(nsecs_t currentTime, KeyEntry* entry,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; DropReason* dropReason, nsecs_t* nextWakeupTime) {</div><div>&nbsp; &nbsp; int32_t injectionResult = findFocusedWindowTargetsLocked(currentTime,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; entry, inputTargets, nextWakeupTime);</div><div><br/></div><div><br/></div><div>&nbsp; &nbsp; // Dispatch the key.</div><div>&nbsp; &nbsp; dispatchEventLocked(currentTime, entry, inputTargets);</div><div>&nbsp; &nbsp; return&nbsp;true;</div><div>}</div></div><div><br/></div><div>在findFocusedWindowTargetsLocked有可能会失败，失败的原因如下</div><div>1.当前没有获得焦点的mFoucusedWindowHandle，但是有mFocusedApplicationHandle;</div><div>2.没有对应的权限;</div><div>3.对应的Window是否准备好，接收更多的事件，这里是检查Connection是否有阻塞，或者发送事件超时;</div><div>假如发送第三种情况的话，会跳转到handleTargetsNotReadyLocked()5s内连续两次都是INPUT_TARGET_WAIT_CAUSE_APPLICATION_NOT_READY这个原因的话，会调用onANRLocked产生ANR，具体发生的ANR事件会单独用一个章节来讲</div><div><br/></div><div><span style="color: rgb(255, 38, 0);">问题：假如5s在这个间隔中事件能够正常处理，而在5s这个间隔时间点handleTargetsNotReadyLocked ，刚好调用到这个函数就会发生ANR了，这个是Bug吗？</span></div><div><span style="color: rgb(255, 38, 0);">答:在dispatchOnceInnerLocked的时候会调用resetANRTimeoutsLocked将mInputTargetWaitCause状态恢复，这就避免了上面发生的情况。</span></div><div><br/></div><div>对所有的目标窗口进行事件分发：</div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;-en-codeblock:true;"><div>void&nbsp;InputDispatcher::dispatchEventLocked(nsecs_t currentTime,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; EventEntry* eventEntry, const&nbsp;Vector&lt;InputTarget&gt;&amp; inputTargets) {</div><div>&nbsp; &nbsp; for&nbsp;(size_t&nbsp;i = 0; i &lt; inputTargets.size(); i++) {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; prepareDispatchCycleLocked(currentTime, connection, eventEntry, &amp;inputTarget);</div><div>&nbsp; &nbsp; }</div><div>}</div></div><div><br/></div><div>在事件分发以前，就是把事件入outboundQueue队列，不过需要注意，这里的队列不同于inboundQueue,因为窗口跟InputDispatchThread间建立起一个连接(connection),该outboundQueue就是connection的成员。</div><div><br/></div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;-en-codeblock:true;"><div>void&nbsp;InputDispatcher::prepareDispatchCycleLocked(nsecs_t currentTime,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; const&nbsp;sp&lt;Connection&gt;&amp; connection, EventEntry* eventEntry, const&nbsp;InputTarget* inputTarget) {</div><div>&nbsp; &nbsp; // Not splitting.&nbsp; Enqueue dispatch entries for the event as is.</div><div>&nbsp; &nbsp; enqueueDispatchEntriesLocked(currentTime, connection, eventEntry, inputTarget);</div><div>}</div><div><br/></div><div><br/></div><div>void&nbsp;InputDispatcher::enqueueDispatchEntriesLocked(nsecs_t currentTime,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; const&nbsp;sp&lt;Connection&gt;&amp; connection, EventEntry* eventEntry, const&nbsp;InputTarget* inputTarget) {</div><div>&nbsp; &nbsp; bool&nbsp;wasEmpty = connection-&gt;outboundQueue.isEmpty();</div><div><br/></div><div>&nbsp; &nbsp; // Enqueue dispatch entries for the requested modes.</div><div>&nbsp; &nbsp; enqueueDispatchEntryLocked(connection, eventEntry, inputTarget,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; InputTarget::FLAG_DISPATCH_AS_HOVER_EXIT);</div><div>&nbsp; &nbsp; enqueueDispatchEntryLocked(connection, eventEntry, inputTarget,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; InputTarget::FLAG_DISPATCH_AS_OUTSIDE);</div><div>&nbsp; &nbsp; enqueueDispatchEntryLocked(connection, eventEntry, inputTarget,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; InputTarget::FLAG_DISPATCH_AS_HOVER_ENTER);</div><div>&nbsp; &nbsp; enqueueDispatchEntryLocked(connection, eventEntry, inputTarget,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; InputTarget::FLAG_DISPATCH_AS_IS);</div><div>&nbsp; &nbsp; enqueueDispatchEntryLocked(connection, eventEntry, inputTarget,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; InputTarget::FLAG_DISPATCH_AS_SLIPPERY_EXIT);</div><div>&nbsp; &nbsp; enqueueDispatchEntryLocked(connection, eventEntry, inputTarget,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; InputTarget::FLAG_DISPATCH_AS_SLIPPERY_ENTER);</div><div><br/></div><div>&nbsp; &nbsp; // If the outbound queue was previously empty, start the dispatch cycle going.</div><div>&nbsp; &nbsp; if&nbsp;(wasEmpty &amp;&amp; !connection-&gt;outboundQueue.isEmpty()) {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; startDispatchCycleLocked(currentTime, connection);</div><div>&nbsp; &nbsp; }</div><div>}</div><div><br/></div><div>void&nbsp;InputDispatcher::enqueueDispatchEntryLocked(</div><div>&nbsp; &nbsp; &nbsp; &nbsp; const&nbsp;sp&lt;Connection&gt;&amp; connection, EventEntry* eventEntry, const&nbsp;InputTarget* inputTarget,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; int32_t dispatchMode) {</div><div>&nbsp; &nbsp; // Enqueue the dispatch entry.</div><div>&nbsp; &nbsp; connection-&gt;outboundQueue.enqueueAtTail(dispatchEntry);</div><div>}</div></div><div><br/></div><div>在准备完成后就会调用startDispatchCycleLocked进行事件的分发，startDispatchCycleLocked这个函数的主题是一个while循环，循环体里面进行3个步骤：</div><div>1.调用connection的inputPublisher来发出事件</div><div>2.把事件从outboundQueue队列移除</div><div>3.把事件假如waitQueue队列，当事件处理完后返回，就会从waitQueue中删除该事件</div><div><br/></div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;-en-codeblock:true;"><div>int InputDispatcher::handleReceiveCallback(int fd, int events, void* data) {</div><div>&nbsp; &nbsp; InputDispatcher* d = static_cast&lt;InputDispatcher*&gt;(data);</div><div><br/></div><div>&nbsp; &nbsp; { // acquire lock</div><div>&nbsp; &nbsp; &nbsp; &nbsp; AutoMutex _l(d-&gt;mLock);</div><div><br/></div><div>&nbsp; &nbsp; &nbsp; &nbsp; ssize_t connectionIndex = d-&gt;mConnectionsByFd.indexOfKey(fd);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; if (connectionIndex &lt; 0) {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ALOGE(&quot;Received spurious receive callback for unknown input channel.&nbsp; &quot;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;fd=%d, events=0x%x&quot;, fd, events);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return 0; // remove the callback</div><div>&nbsp; &nbsp; &nbsp; &nbsp; }</div><div><br/></div><div>&nbsp; &nbsp; &nbsp; &nbsp; bool notify;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; sp&lt;Connection&gt; connection = d-&gt;mConnectionsByFd.valueAt(connectionIndex);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; if (!(events &amp; (ALOOPER_EVENT_ERROR | ALOOPER_EVENT_HANGUP))) {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (!(events &amp; ALOOPER_EVENT_INPUT)) {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ALOGW(&quot;channel &apos;%s&apos; ~ Received spurious callback for unhandled poll event.&nbsp; &quot;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;events=0x%x&quot;, connection-&gt;getInputChannelName(), events);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return 1;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</div><div><br/></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; nsecs_t currentTime = now();</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; bool gotOne = false;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; status_t status;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for (;;) {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; uint32_t seq;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; bool handled;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; status = connection-&gt;inputPublisher.receiveFinishedSignal(&amp;seq, &amp;handled);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (status) {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; break;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; d-&gt;finishDispatchCycleLocked(currentTime, connection, seq, handled);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; gotOne = true;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (gotOne) {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; d-&gt;runCommandsLockedInterruptible();</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (status == WOULD_BLOCK) {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return 1;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</div><div><br/></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; notify = status != DEAD_OBJECT || !connection-&gt;monitor;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (notify) {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ALOGE(&quot;channel &apos;%s&apos; ~ Failed to receive finished signal.&nbsp; status=%d&quot;,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; connection-&gt;getInputChannelName(), status);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; &nbsp; &nbsp; } else {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // Monitor channels are never explicitly unregistered.</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // We do it automatically when the remote endpoint is closed so don&apos;t warn</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // about them.</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; notify = !connection-&gt;monitor;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (notify) {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ALOGW(&quot;channel &apos;%s&apos; ~ Consumer closed input channel or an error occurred.&nbsp; &quot;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;events=0x%x&quot;, connection-&gt;getInputChannelName(), events);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; &nbsp; &nbsp; }</div><div><br/></div><div>&nbsp; &nbsp; &nbsp; &nbsp; // Unregister the channel.</div><div>&nbsp; &nbsp; &nbsp; &nbsp; d-&gt;unregisterInputChannelLocked(connection-&gt;inputChannel, notify);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; return 0; // remove the callback</div><div>&nbsp; &nbsp; } // release lock</div><div>}</div></div><div><br/></div><div>再来看下inputPublisher的publishKeyEvent的实现，调用的是InputChannel，InputChannel也是调用socket的send接口来实现的。</div><div><br/></div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;-en-codeblock:true;"><div>status_t InputPublisher::publishMotionEvent(</div><div>&nbsp; &nbsp; &nbsp; &nbsp; uint32_t seq,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; int32_t deviceId,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; int32_t source,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; int32_t action,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; int32_t actionButton,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; int32_t flags,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; int32_t edgeFlags,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; int32_t metaState,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; int32_t buttonState,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; float xOffset,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; float yOffset,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; float xPrecision,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; float yPrecision,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; nsecs_t downTime,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; nsecs_t eventTime,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; uint32_t pointerCount,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; const PointerProperties* pointerProperties,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; const PointerCoords* pointerCoords) {</div><div>#if DEBUG_TRANSPORT_ACTIONS</div><div>&nbsp; &nbsp; ALOGD(&quot;channel &apos;%s&apos; publisher ~ publishMotionEvent: seq=%u, deviceId=%d, source=0x%x, &quot;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;action=0x%x, actionButton=0x%08x, flags=0x%x, edgeFlags=0x%x, &quot;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;metaState=0x%x, buttonState=0x%x, xOffset=%f, yOffset=%f, &quot;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;xPrecision=%f, yPrecision=%f, downTime=%lld, eventTime=%lld, &quot;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;pointerCount=%&quot; PRIu32,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; mChannel-&gt;getName().string(), seq,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; deviceId, source, action, actionButton, flags, edgeFlags, metaState, buttonState,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; xOffset, yOffset, xPrecision, yPrecision, downTime, eventTime, pointerCount);</div><div>#endif</div><div><br/></div><div>&nbsp; &nbsp; if (!seq) {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; ALOGE(&quot;Attempted to publish a motion event with sequence number 0.&quot;);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; return BAD_VALUE;</div><div>&nbsp; &nbsp; }</div><div><br/></div><div>&nbsp; &nbsp; if (pointerCount &gt; MAX_POINTERS || pointerCount &lt; 1) {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; ALOGE(&quot;channel &apos;%s&apos; publisher ~ Invalid number of pointers provided: %&quot; PRIu32 &quot;.&quot;,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; mChannel-&gt;getName().string(), pointerCount);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; return BAD_VALUE;</div><div>&nbsp; &nbsp; }</div><div><br/></div><div>&nbsp; &nbsp; InputMessage msg;</div><div>&nbsp; &nbsp; msg.header.type = InputMessage::TYPE_MOTION;</div><div>&nbsp; &nbsp; msg.body.motion.seq = seq;</div><div>&nbsp; &nbsp; msg.body.motion.deviceId = deviceId;</div><div>&nbsp; &nbsp; msg.body.motion.source = source;</div><div>&nbsp; &nbsp; msg.body.motion.action = action;</div><div>&nbsp; &nbsp; msg.body.motion.actionButton = actionButton;</div><div>&nbsp; &nbsp; msg.body.motion.flags = flags;</div><div>&nbsp; &nbsp; msg.body.motion.edgeFlags = edgeFlags;</div><div>&nbsp; &nbsp; msg.body.motion.metaState = metaState;</div><div>&nbsp; &nbsp; msg.body.motion.buttonState = buttonState;</div><div>&nbsp; &nbsp; msg.body.motion.xOffset = xOffset;</div><div>&nbsp; &nbsp; msg.body.motion.yOffset = yOffset;</div><div>&nbsp; &nbsp; msg.body.motion.xPrecision = xPrecision;</div><div>&nbsp; &nbsp; msg.body.motion.yPrecision = yPrecision;</div><div>&nbsp; &nbsp; msg.body.motion.downTime = downTime;</div><div>&nbsp; &nbsp; msg.body.motion.eventTime = eventTime;</div><div>&nbsp; &nbsp; msg.body.motion.pointerCount = pointerCount;</div><div>&nbsp; &nbsp; for (uint32_t i = 0; i &lt; pointerCount; i++) {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; msg.body.motion.pointers[i].properties.copyFrom(pointerProperties[i]);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; msg.body.motion.pointers[i].coords.copyFrom(pointerCoords[i]);</div><div>&nbsp; &nbsp; }</div><div>&nbsp; &nbsp; return mChannel-&gt;sendMessage(&amp;msg);</div><div>}</div><div><br/></div><div>status_t InputChannel::sendMessage(const InputMessage* msg) {</div><div>&nbsp; &nbsp; size_t msgLength = msg-&gt;size();</div><div>&nbsp; &nbsp; ssize_t nWrite;</div><div>&nbsp; &nbsp; do {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; nWrite = ::send(mFd, msg, msgLength, MSG_DONTWAIT | MSG_NOSIGNAL);</div><div>&nbsp; &nbsp; } while (nWrite == -1 &amp;&amp; errno == EINTR);</div><div><br/></div><div>&nbsp; &nbsp; if (nWrite &lt; 0) {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; int error = errno;</div><div>#if DEBUG_CHANNEL_MESSAGES</div><div>&nbsp; &nbsp; &nbsp; &nbsp; ALOGD(&quot;channel &apos;%s&apos; ~ error sending message of type %d, errno=%d&quot;, mName.string(),</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; msg-&gt;header.type, error);</div><div>#endif</div><div>&nbsp; &nbsp; &nbsp; &nbsp; if (error == EAGAIN || error == EWOULDBLOCK) {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return WOULD_BLOCK;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; &nbsp; &nbsp; if (error == EPIPE || error == ENOTCONN || error == ECONNREFUSED || error == ECONNRESET) {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return DEAD_OBJECT;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; &nbsp; &nbsp; return -error;</div><div>&nbsp; &nbsp; }</div><div><br/></div><div>&nbsp; &nbsp; if (size_t(nWrite) != msgLength) {</div><div>#if DEBUG_CHANNEL_MESSAGES</div><div>&nbsp; &nbsp; &nbsp; &nbsp; ALOGD(&quot;channel &apos;%s&apos; ~ error sending message type %d, send was incomplete&quot;,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; mName.string(), msg-&gt;header.type);</div><div>#endif</div><div>&nbsp; &nbsp; &nbsp; &nbsp; return DEAD_OBJECT;</div><div>&nbsp; &nbsp; }</div><div><br/></div><div>#if DEBUG_CHANNEL_MESSAGES</div><div>&nbsp; &nbsp; ALOGD(&quot;channel &apos;%s&apos; ~ sent message of type %d&quot;, mName.string(), msg-&gt;header.type);</div><div>#endif</div><div>&nbsp; &nbsp; return OK;</div><div>}</div></div><div><br/></div><div><br/></div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;-en-codeblock:true;"><div>ps:InputMapper分好几种类型，SwitchInputMapper、VirbratorInputMapper、KeyboardInputMapper、CursorInputMapper、RotaryEnchorInputMapper、TouchInputMapper、SingleTouchInputMapper、MultiTouchInputMapper、ExternalStylusInputMapper、JoystickInputMapper</div></div><div><br/></div><div><br/></div><div><br/></div><div>那么ViewRootImpl是如何接收事件的呢?ViewRootImpl中的setView这个接口，将当前的成员变量InputChannel传递到mDispatchThread</div><div><br/></div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;-en-codeblock:true;"><div>&nbsp;/**</div><div>&nbsp; &nbsp; &nbsp;* We have one child</div><div>&nbsp; &nbsp; &nbsp;*/</div><div>&nbsp; &nbsp; public void setView(View view, WindowManager.LayoutParams attrs, View panelParentView) {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; synchronized (this) {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (mView == null) {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;...</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; try {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; mOrigWindowType = mWindowAttributes.type;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; mAttachInfo.mRecomputeGlobalAttributes = true;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; collectViewAttributes();</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; res = mWindowSession.addToDisplay(mWindow, mSeq, mWindowAttributes,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; getHostVisibility(), mDisplay.getDisplayId(),</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; mAttachInfo.mContentInsets, mAttachInfo.mStableInsets,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; mAttachInfo.mOutsets, mInputChannel);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; } catch (RemoteException e) {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; mAdded = false;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; mView = null;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; mAttachInfo.mRootView = null;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; mInputChannel = null;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; mFallbackEventHandler.setView(null);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; unscheduleTraversals();</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; setAccessibilityFocus(null, null);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; throw new RuntimeException(&quot;Adding window failed&quot;, e);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; } finally {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (restore) {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; attrs.restore();</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</div><div><br/></div><div><br/></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (mInputChannel != null) {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (mInputQueueCallback != null) {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; mInputQueue = new InputQueue();</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; mInputQueueCallback.onInputQueueCreated(mInputQueue);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; mInputEventReceiver = new WindowInputEventReceiver(mInputChannel,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Looper.myLooper());</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</div><div><br/></div><div><br/></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; }</div></div><div><br/></div><div><br/></div><div>而在WindowSession中调用的WindowManagerService的addWindow</div><div><br/></div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;-en-codeblock:true;"><div>&nbsp;@Override</div><div>&nbsp; &nbsp; public int addToDisplayWithoutInputChannel(IWindow window, int seq, WindowManager.LayoutParams attrs,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; int viewVisibility, int displayId, Rect outContentInsets, Rect outStableInsets) {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; return mService.addWindow(this, window, seq, attrs, viewVisibility, displayId,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; outContentInsets, outStableInsets, null);</div><div>&nbsp; &nbsp; }</div></div><div>而WindowManagerService中的addWindow中内部调用的是InputManagerService.registerInputChannel将InputChannel注册进去</div><div><br/></div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;-en-codeblock:true;"><div>if (outInputChannel != null &amp;&amp; (attrs.inputFeatures</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &amp; WindowManager.LayoutParams.INPUT_FEATURE_NO_INPUT_CHANNEL) == 0) {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; String name = win.makeInputChannelName();</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; InputChannel[] inputChannels = InputChannel.openInputChannelPair(name);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; win.setInputChannel(inputChannels[0]);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; inputChannels[1].transferTo(outInputChannel);</div><div><br/></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; mInputManager.registerInputChannel(win.mInputChannel, win.mInputWindowHandle);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</div></div><div><br/></div><div><br/></div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;-en-codeblock:true;"><div>&nbsp; &nbsp; public void registerInputChannel(InputChannel inputChannel,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; InputWindowHandle inputWindowHandle) {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; if (inputChannel == null) {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; throw new IllegalArgumentException(&quot;inputChannel must not be null.&quot;);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; }</div><div><br/></div><div>&nbsp; &nbsp; &nbsp; &nbsp; nativeRegisterInputChannel(mPtr, inputChannel, inputWindowHandle, false);</div><div>&nbsp; &nbsp; }</div></div><div><br/></div><div>这时候跳转到InputManagerService.cpp文件中nativeRegisterInputChannel，内部调用NativeInputManager来注册InputChannel和InputWindowHandle</div><div><br/></div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;-en-codeblock:true;"><div>status_t NativeInputManager::registerInputChannel(JNIEnv* env,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; const sp&lt;InputChannel&gt;&amp; inputChannel,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; const sp&lt;InputWindowHandle&gt;&amp; inputWindowHandle, bool monitor) {</div><div>&nbsp; &nbsp; return mInputManager-&gt;getDispatcher()-&gt;registerInputChannel(</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; inputChannel, inputWindowHandle, monitor);</div><div>}</div></div><div>再将注册到InputDispatcher中去了，放到mConnectionsByFd的键值对中去</div><div><br/></div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;-en-codeblock:true;"><div>status_t InputDispatcher::registerInputChannel(const sp&lt;InputChannel&gt;&amp; inputChannel,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; const sp&lt;InputWindowHandle&gt;&amp; inputWindowHandle, bool monitor) {</div><div>#if DEBUG_REGISTRATION</div><div>&nbsp; &nbsp; ALOGD(&quot;channel &apos;%s&apos; ~ registerInputChannel - monitor=%s&quot;, inputChannel-&gt;getName().string(),</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; toString(monitor));</div><div>#endif</div><div><br/></div><div>&nbsp; &nbsp; { // acquire lock</div><div>&nbsp; &nbsp; &nbsp; &nbsp; AutoMutex _l(mLock);</div><div><br/></div><div>&nbsp; &nbsp; &nbsp; &nbsp; if (getConnectionIndexLocked(inputChannel) &gt;= 0) {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ALOGW(&quot;Attempted to register already registered input channel &apos;%s&apos;&quot;,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; inputChannel-&gt;getName().string());</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return BAD_VALUE;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; }</div><div><br/></div><div>&nbsp; &nbsp; &nbsp; &nbsp; sp&lt;Connection&gt; connection = new Connection(inputChannel, inputWindowHandle, monitor);</div><div><br/></div><div>&nbsp; &nbsp; &nbsp; &nbsp; int fd = inputChannel-&gt;getFd();</div><div>&nbsp; &nbsp; &nbsp; &nbsp; mConnectionsByFd.add(fd, connection);</div><div><br/></div><div>&nbsp; &nbsp; &nbsp; &nbsp; if (monitor) {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; mMonitoringChannels.push(inputChannel);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; }</div><div><br/></div><div>&nbsp; &nbsp; &nbsp; &nbsp; mLooper-&gt;addFd(fd, 0, ALOOPER_EVENT_INPUT, handleReceiveCallback, this);</div><div>&nbsp; &nbsp; } // release lock</div><div><br/></div><div>&nbsp; &nbsp; // Wake the looper because some connections have changed.</div><div>&nbsp; &nbsp; mLooper-&gt;wake();</div><div>&nbsp; &nbsp; return OK;</div><div>}</div></div><div><br/></div><div><br/></div><div>在ViewRootImpl中定义内部类WindowInputEventReceiver extends InputEventReceiver,并在setView的时候把Looper.myLooper()和InputChannel传递给InputEventReceiver &nbsp;</div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;-en-codeblock:true;"><div>final class WindowInputEventReceiver extends InputEventReceiver {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public WindowInputEventReceiver(InputChannel inputChannel, Looper looper) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super(inputChannel, looper);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@Override</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void onInputEvent(InputEvent event) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;enqueueInputEvent(event, this, 0, true);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@Override</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void onBatchedInputEventPending() {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (mUnbufferedInputDispatch) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super.onBatchedInputEventPending();</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;scheduleConsumeBatchedInput();</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@Override</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void dispose() {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unscheduleConsumeBatchedInput();</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super.dispose();</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div>&nbsp;&nbsp;&nbsp;&nbsp;}</div></div><div><br/></div><div>而在InputEventReceiver中在cpp中初始化，从Looper中获取MessageQueue.</div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;-en-codeblock:true;"><div>public InputEventReceiver(InputChannel inputChannel, Looper looper) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (inputChannel == null) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new IllegalArgumentException(&quot;inputChannel must not be null&quot;);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (looper == null) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new IllegalArgumentException(&quot;looper must not be null&quot;);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mInputChannel = inputChannel;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mMessageQueue = looper.getQueue();</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mReceiverPtr = nativeInit(new WeakReference&lt;InputEventReceiver&gt;(this),</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inputChannel, mMessageQueue);</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mCloseGuard.open(&quot;dispose&quot;);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;}</div></div><div><br/></div><div>而在android_view_InputEventReceiver.cpp文件中native_init(),初始化NativeInputEventReceiver,并拿InputChannel初始化InputConsumer</div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;-en-codeblock:true;"><div>static jlong nativeInit(JNIEnv* env, jclass clazz, jobject receiverWeak,</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;jobject inputChannelObj, jobject messageQueueObj) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;sp&lt;InputChannel&gt; inputChannel = android_view_InputChannel_getInputChannel(env,</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inputChannelObj);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;if (inputChannel == NULL) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;jniThrowRuntimeException(env, &quot;InputChannel is not initialized.&quot;);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 0;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;}</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;sp&lt;MessageQueue&gt; messageQueue = android_os_MessageQueue_getMessageQueue(env, messageQueueObj);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;if (messageQueue == NULL) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;jniThrowRuntimeException(env, &quot;MessageQueue is not initialized.&quot;);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 0;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;}</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;sp&lt;NativeInputEventReceiver&gt; receiver = new NativeInputEventReceiver(env,</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;receiverWeak, inputChannel, messageQueue);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;status_t status = receiver-&gt;initialize();</div><div>&nbsp;&nbsp;&nbsp;&nbsp;if (status) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String8 message;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;message.appendFormat(&quot;Failed to initialize input event receiver.&nbsp;&nbsp;status=%d&quot;, status);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;jniThrowRuntimeException(env, message.string());</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 0;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;}</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;receiver-&gt;incStrong(gInputEventReceiverClassInfo.clazz); // retain a reference for the object</div><div>&nbsp;&nbsp;&nbsp;&nbsp;return reinterpret_cast&lt;jlong&gt;(receiver.get());</div><div>}</div></div><div><br/></div><div>初始化InputConsumer，并把mChannel初始化</div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;-en-codeblock:true;"><div>InputConsumer::InputConsumer(const sp&lt;InputChannel&gt;&amp; channel) :</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mResampleTouch(isTouchResamplingEnabled()),</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mChannel(channel), mMsgDeferred(false) {</div><div>}</div></div><div><br/></div><div><br/></div><div>初始化NativeInputEventReceiver的时候，而NativeInputEventReceiver中使用的是Native Looper ， NativeInputEventReceiver继承LooperCallback，</div><div>重写virtual int handleEvent(int receiveFd, int events, void* data);，然后通过获取到mMessageQueue-&gt;getLooper()-&gt;addFd(fd, 0, events, this, NULL);将这个回调和InputChannel的fd放到Looper线程里面，而Looper线程会通过不停的循环，通过Epoll来监听这个InputChannel的fd有事件可读，EPOLLIN == INPUT_EVENT == ALOOPER_EVENT_INPUT,其实就调用handleEvent()接口。</div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;-en-codeblock:true;"><div>class NativeInputEventReceiver : public LooperCallback {</div><div>public:</div><div>&nbsp;&nbsp;&nbsp;&nbsp;NativeInputEventReceiver(JNIEnv* env,</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;jobject receiverWeak, const sp&lt;InputChannel&gt;&amp; inputChannel,</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const sp&lt;MessageQueue&gt;&amp; messageQueue);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;...</div><div>&nbsp;&nbsp;&nbsp;&nbsp;void setFdEvents(int events);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;...</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;virtual int handleEvent(int receiveFd, int events, void* data);</div><div>};</div></div><div>到此为止，那么InputDispatcher的InputChannel就初始化完毕了<br/></div><div><br/></div><div><br/></div><div>接下来，Android端是接受数据并处理的呢？</div><div>而在handleEvent里面调用的就是InputConsumer.consume将会调用到InputChannel.receiveMessage，内部通过::recv，就能够读取到::send发送过来的消息。</div><div><span style="padding: 0px; list-style-type: none; list-style-image: none; text-indent: 2em; color: rgb(68, 68, 68); font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; font-variant-ligatures: normal; font-variant-caps: normal; letter-spacing: normal; orphans: 2; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px;">输入事件在consumeEvents内将会被处理完成，其中包含了四个主要步骤：</span></div><div style="padding: 0px; list-style-type: decimal; list-style-image: none;"><ol><li><font color="#FF40FF">获取输入事件//已经在上面获取到事件了</font><br/></li><li><font color="#FF9300">把输入事件转换成java也能处理的格式</font><br/></li><li><font color="#0433FF">输入事件分发到相应窗口去处理</font><br/></li><li><font color="#AA7942">处理结果反馈</font><br/></li></ol><div><br/></div></div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;-en-codeblock:true;"><div>status_t NativeInputEventReceiver::consumeEvents(JNIEnv* env,</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bool consumeBatches, nsecs_t frameTime, bool* outConsumedBatch) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;if (kDebugDispatchCycle) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ALOGD(&quot;channel &apos;%s&apos; ~ Consuming input events, consumeBatches=%s, frameTime=%lld.&quot;,</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getInputChannelName(), consumeBatches ? &quot;true&quot; : &quot;false&quot;, (long long)frameTime);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;}</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;if (consumeBatches) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mBatchedInputEventPending = false;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;}</div><div>&nbsp;&nbsp;&nbsp;&nbsp;if (outConsumedBatch) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*outConsumedBatch = false;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;}</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;ScopedLocalRef&lt;jobject&gt; receiverObj(env, NULL);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;bool skipCallbacks = false;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;for (;;) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;uint32_t seq;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;InputEvent* inputEvent;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;status_t status = mInputConsumer.consume(&amp;mInputEventFactory,</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;consumeBatches, frameTime, &amp;seq, &amp;inputEvent);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (status) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (status == WOULD_BLOCK) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!skipCallbacks &amp;&amp; !mBatchedInputEventPending</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; mInputConsumer.hasPendingBatch()) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// There is a pending batch.&nbsp;&nbsp;Come back later.</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!receiverObj.get()) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;receiverObj.reset(jniGetReferent(env, mReceiverWeakGlobal));</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!receiverObj.get()) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ALOGW(&quot;channel &apos;%s&apos; ~ Receiver object was finalized &quot;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;without being disposed.&quot;, getInputChannelName());</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return DEAD_OBJECT;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mBatchedInputEventPending = true;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (kDebugDispatchCycle) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ALOGD(&quot;channel &apos;%s&apos; ~ Dispatching batched input event pending notification.&quot;,</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getInputChannelName());</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;env-&gt;CallVoidMethod(receiverObj.get(),</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gInputEventReceiverClassInfo.dispatchBatchedInputEventPending);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (env-&gt;ExceptionCheck()) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ALOGE(&quot;Exception dispatching batched input events.&quot;);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mBatchedInputEventPending = false; // try again later</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return OK;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ALOGE(&quot;channel &apos;%s&apos; ~ Failed to consume input event.&nbsp;&nbsp;status=%d&quot;,</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getInputChannelName(), status);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return status;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(inputEvent);</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!skipCallbacks) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!receiverObj.get()) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;receiverObj.reset(jniGetReferent(env, mReceiverWeakGlobal));</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!receiverObj.get()) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ALOGW(&quot;channel &apos;%s&apos; ~ Receiver object was finalized &quot;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;without being disposed.&quot;, getInputChannelName());</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return DEAD_OBJECT;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;jobject inputEventObj;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#FF9300">switch (inputEvent-&gt;getType()) {</font></div><div><font color="#FF9300">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case AINPUT_EVENT_TYPE_KEY:</font></div><div><font color="#FF9300">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (kDebugDispatchCycle) {</font></div><div><font color="#FF9300">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ALOGD(&quot;channel &apos;%s&apos; ~ Received key event.&quot;, getInputChannelName());</font></div><div><font color="#FF9300">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</font></div><div><font color="#FF9300">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inputEventObj = android_view_KeyEvent_fromNative(env,</font></div><div><font color="#FF9300">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;static_cast&lt;KeyEvent*&gt;(inputEvent));</font></div><div><font color="#FF9300">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;</font></div><div><font color="#FF9300"><br/></font></div><div><font color="#FF9300">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case AINPUT_EVENT_TYPE_MOTION: {</font></div><div><font color="#FF9300">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (kDebugDispatchCycle) {</font></div><div><font color="#FF9300">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ALOGD(&quot;channel &apos;%s&apos; ~ Received motion event.&quot;, getInputChannelName());</font></div><div><font color="#FF9300">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</font></div><div><font color="#FF9300">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MotionEvent* motionEvent = static_cast&lt;MotionEvent*&gt;(inputEvent);</font></div><div><font color="#FF9300">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ((motionEvent-&gt;getAction() &amp; AMOTION_EVENT_ACTION_MOVE) &amp;&amp; outConsumedBatch) {</font></div><div><font color="#FF9300">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*outConsumedBatch = true;</font></div><div><font color="#FF9300">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</font></div><div><font color="#FF9300">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inputEventObj = android_view_MotionEvent_obtainAsCopy(env, motionEvent);</font></div><div><font color="#FF9300">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;</font></div><div><font color="#FF9300">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</font></div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;default:</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(false); // InputConsumer should prevent this from ever happening</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inputEventObj = NULL;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0433FF">&nbsp;if (inputEventObj) {</font></div><div><font color="#0433FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (kDebugDispatchCycle) {</font></div><div><font color="#0433FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ALOGD(&quot;channel &apos;%s&apos; ~ Dispatching input event.&quot;, getInputChannelName());</font></div><div><font color="#0433FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</font></div><div><font color="#0433FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;env-&gt;CallVoidMethod(receiverObj.get(),</font></div><div><font color="#0433FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gInputEventReceiverClassInfo.dispatchInputEvent, seq, inputEventObj);</font></div><div><font color="#0433FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (env-&gt;ExceptionCheck()) {</font></div><div><font color="#0433FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ALOGE(&quot;Exception dispatching input event.&quot;);</font></div><div><font color="#0433FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;skipCallbacks = true;</font></div><div><font color="#0433FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</font></div><div><font color="#0433FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;env-&gt;DeleteLocalRef(inputEventObj);</font></div><div><font color="#0433FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {</font></div><div><font color="#0433FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ALOGW(&quot;channel &apos;%s&apos; ~ Failed to obtain event object.&quot;, getInputChannelName());</font></div><div><font color="#0433FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;skipCallbacks = true;</font></div><div><font color="#0433FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</font></div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#AA7942">&nbsp;if (skipCallbacks) {</font></div><div><font color="#AA7942">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mInputConsumer.sendFinishedSignal(seq, false);</font></div><div><font color="#AA7942">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</font></div><div>&nbsp;&nbsp;&nbsp;&nbsp;}</div><div>}</div></div><div>1.获取输入事件</div><div><br/></div><div>2.输入事件转换</div><div>&nbsp; &nbsp; 以key为例，输入事件将通过JNI的方法调用到JAVA层的obtain()接口，生产intputEventObj;<br/></div><div>&nbsp;<br/></div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;-en-codeblock:true;"><div><font color="#FF9300">switch (inputEvent-&gt;getType()) {</font></div><div><font color="#FF9300">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case AINPUT_EVENT_TYPE_KEY:</font></div><div><font color="#FF9300">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (kDebugDispatchCycle) {</font></div><div><font color="#FF9300">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ALOGD(&quot;channel &apos;%s&apos; ~ Received key event.&quot;, getInputChannelName());</font></div><div><font color="#FF9300">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</font></div><div><font color="#FF9300">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inputEventObj = android_view_KeyEvent_fromNative(env,</font></div><div><font color="#FF9300">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;static_cast&lt;KeyEvent*&gt;(inputEvent));</font></div><div><font color="#FF9300">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;</font></div><div><font color="#FF9300"><br/></font></div><div><font color="#FF9300">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case AINPUT_EVENT_TYPE_MOTION: {</font></div><div><font color="#FF9300">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (kDebugDispatchCycle) {</font></div><div><font color="#FF9300">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ALOGD(&quot;channel &apos;%s&apos; ~ Received motion event.&quot;, getInputChannelName());</font></div><div><font color="#FF9300">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</font></div><div><font color="#FF9300">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MotionEvent* motionEvent = static_cast&lt;MotionEvent*&gt;(inputEvent);</font></div><div><font color="#FF9300">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ((motionEvent-&gt;getAction() &amp; AMOTION_EVENT_ACTION_MOVE) &amp;&amp; outConsumedBatch) {</font></div><div><font color="#FF9300">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*outConsumedBatch = true;</font></div><div><font color="#FF9300">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</font></div><div><font color="#FF9300">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inputEventObj = android_view_MotionEvent_obtainAsCopy(env, motionEvent);</font></div><div><font color="#FF9300">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;</font></div><div><font color="#FF9300">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</font></div></div><div><br/></div><div><br/></div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;-en-codeblock:true;"><div><font color="#FF9300">jobject android_view_KeyEvent_fromNative(JNIEnv* env, const KeyEvent* event) {</font></div><div><font color="#FF9300">&nbsp;&nbsp;&nbsp;&nbsp;jobject eventObj = env-&gt;CallStaticObjectMethod(gKeyEventClassInfo.clazz,</font></div><div><font color="#FF9300">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gKeyEventClassInfo.obtain,</font></div><div><font color="#FF9300">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nanoseconds_to_milliseconds(event-&gt;getDownTime()),</font></div><div><font color="#FF9300">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nanoseconds_to_milliseconds(event-&gt;getEventTime()),</font></div><div><font color="#FF9300">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;event-&gt;getAction(),</font></div><div><font color="#FF9300">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;event-&gt;getKeyCode(),</font></div><div><font color="#FF9300">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;event-&gt;getRepeatCount(),</font></div><div><font color="#FF9300">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;event-&gt;getMetaState(),</font></div><div><font color="#FF9300">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;event-&gt;getDeviceId(),</font></div><div><font color="#FF9300">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;event-&gt;getScanCode(),</font></div><div><font color="#FF9300">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;event-&gt;getFlags(),</font></div><div><font color="#FF9300">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;event-&gt;getSource(),</font></div><div><font color="#FF9300">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NULL);</font></div><div><font color="#FF9300">&nbsp;&nbsp;&nbsp;&nbsp;if (env-&gt;ExceptionCheck()) {</font></div><div><font color="#FF9300">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ALOGE(&quot;An exception occurred while obtaining a key event.&quot;);</font></div><div><font color="#FF9300">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LOGE_EX(env);</font></div><div><font color="#FF9300">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;env-&gt;ExceptionClear();</font></div><div><font color="#FF9300">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return NULL;</font></div><div><font color="#FF9300">&nbsp;&nbsp;&nbsp;&nbsp;}</font></div><div><font color="#FF9300">&nbsp;&nbsp;&nbsp;&nbsp;return eventObj;</font></div><div><font color="#FF9300">}</font></div></div><div><br/></div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;-en-codeblock:true;"><div><font color="#FF9300">&nbsp;&nbsp;&nbsp;&nbsp;public static KeyEvent obtain(KeyEvent other) {</font></div><div><font color="#FF9300">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;KeyEvent ev = obtain();</font></div><div><font color="#FF9300">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ev.mDownTime = other.mDownTime;</font></div><div><font color="#FF9300">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ev.mEventTime = other.mEventTime;</font></div><div><font color="#FF9300">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ev.mAction = other.mAction;</font></div><div><font color="#FF9300">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ev.mKeyCode = other.mKeyCode;</font></div><div><font color="#FF9300">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ev.mRepeatCount = other.mRepeatCount;</font></div><div><font color="#FF9300">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ev.mMetaState = other.mMetaState;</font></div><div><font color="#FF9300">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ev.mDeviceId = other.mDeviceId;</font></div><div><font color="#FF9300">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ev.mScanCode = other.mScanCode;</font></div><div><font color="#FF9300">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ev.mFlags = other.mFlags;</font></div><div><font color="#FF9300">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ev.mSource = other.mSource;</font></div><div><font color="#FF9300">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ev.mCharacters = other.mCharacters;</font></div><div><font color="#FF9300">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ev;</font></div><div><font color="#FF9300">&nbsp;&nbsp;&nbsp;&nbsp;}</font></div></div><div><br/></div><div><font color="#0433FF">3.输入事件的分发</font></div><div>&nbsp;<span style="color: rgb(4, 51, 255);">&nbsp;将获取到这些事件，将调用到WindowInputEventReceiver方法中的</span><span style="color: rgb(4, 51, 255);">dispatchInputEvent-&gt; onInputEvent(event);</span></div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;-en-codeblock:true;"><div><font color="#0433FF">if (inputEventObj) {</font></div><div><font color="#0433FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (kDebugDispatchCycle) {</font></div><div><font color="#0433FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ALOGD(&quot;channel &apos;%s&apos; ~ Dispatching input event.&quot;, getInputChannelName());</font></div><div><font color="#0433FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</font></div><div><font color="#0433FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;env-&gt;CallVoidMethod(receiverObj.get(),</font></div><div><font style="color: rgb(4, 51, 255);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gInputEventReceiverClassInfo.dispatchInputEvent, seq, inputEventObj);</font></div><div><font color="#0433FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (env-&gt;ExceptionCheck()) {</font></div><div><font color="#0433FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ALOGE(&quot;Exception dispatching input event.&quot;);</font></div><div><font color="#0433FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;skipCallbacks = true;</font></div><div><font color="#0433FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</font></div><div><font color="#0433FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;env-&gt;DeleteLocalRef(inputEventObj);</font></div><div><font color="#0433FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {</font></div><div><font color="#0433FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ALOGW(&quot;channel &apos;%s&apos; ~ Failed to obtain event object.&quot;, getInputChannelName());</font></div><div><font color="#0433FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;skipCallbacks = true;</font></div><div><font color="#0433FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</font></div></div><div><br/></div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;-en-codeblock:true;"><div>public void dispatchInputEvent(InputEvent event) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;onInputEvent(event);</div><div>}</div></div><div><span style="font-family: &apos;Courier New&apos;;"><br/></span></div><div><span style="font-family: &apos;Courier New&apos;;">而在WindowInputEventReceiver的onInputEvent内，会调用到ViewRootImpl.</span><span style="font-family: &apos;Courier New&apos;;">enqueueInputEvent()进行处理</span></div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;-en-codeblock:true;"><div>public void onInputEvent(InputEvent event) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;enqueueInputEvent(event, this, 0, true);</div><div>}</div><div>&nbsp;&nbsp;&nbsp;</div><div>void enqueueInputEvent(InputEvent event,</div><div>&nbsp;&nbsp;&nbsp;&nbsp;InputEventReceiver receiver, int flags, boolean processImmediately) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;doProcessInputEvents();</div><div>}</div></div><div><span style="font-family: &apos;Courier New&apos;;"><span style="font-family: &apos;Courier New&apos;;"><br/></span></span></div><div><span style="font-family: &apos;Courier New&apos;;">由于事件队列内包含多个事件，因此在</span><span style="font-family: &apos;Courier New&apos;;">doProcessInputEvents时，需要分别对所有的事件进行分发。</span></div><div><span style="font-family: &apos;Courier New&apos;;"><br/></span></div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;-en-codeblock:true;"><div>void doProcessInputEvents() {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;// Deliver all pending input events in the queue.</div><div>&nbsp;&nbsp;&nbsp;&nbsp;while (mPendingInputEventHead != null) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;QueuedInputEvent q = mPendingInputEventHead;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mPendingInputEventHead = q.mNext;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (mPendingInputEventHead == null) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mPendingInputEventTail = null;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;q.mNext = null;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mPendingInputEventCount -= 1;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;deliverInputEvent(q);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;}</div><div>}</div></div><div><span style="font-family: &apos;Courier New&apos;;"><span style="font-family: &apos;Courier New&apos;;"><br/></span></span></div><div><span style="font-family: &apos;Courier New&apos;;">deliverInputEvent会调用到InputState.deliver方法</span></div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;-en-codeblock:true;"><div>private void deliverInputEvent(QueuedInputEvent q) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Trace.asyncTraceBegin(Trace.TRACE_TAG_VIEW, &quot;deliverInputEvent&quot;,</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;q.mEvent.getSequenceNumber());</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (mInputEventConsistencyVerifier != null) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mInputEventConsistencyVerifier.onInputEvent(q.mEvent, 0);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;InputStage stage;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (q.shouldSendToSynthesizer()) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stage = mSyntheticInputStage;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stage = q.shouldSkipIme() ? mFirstPostImeInputStage : mFirstInputStage;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (stage != null) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stage.deliver(q);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finishInputEvent(q);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div>&nbsp;&nbsp;&nbsp;&nbsp;}</div></div><div><span style="font-family: &apos;Courier New&apos;;"><br/></span></div><div><span style="font-family: &apos;Courier New&apos;;">而在deliver里面，当前的事件还没有处理完，所以没有flags=</span><span style="font-family: &apos;Courier New&apos;; color: rgb(68, 68, 68); font-size: 14px; font-variant-ligatures: normal; font-variant-caps: normal; letter-spacing: normal; orphans: 2; text-indent: 28px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; float: none;">FLAG_FINISHED，而且不满足以下的条件</span><span style="font-family: &apos;Courier New&apos;; color: rgb(68, 68, 68); font-size: 14px; font-variant-ligatures: normal; font-variant-caps: normal; letter-spacing: normal; orphans: 2; text-indent: 28px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; float: none;">shouldDropInputEvent()，那么就处理</span><span style="font-family: &apos;Courier New&apos;; color: rgb(68, 68, 68); font-size: 14px; font-variant-ligatures: normal; font-variant-caps: normal; letter-spacing: normal; orphans: 2; text-indent: 28px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; float: none;">apply(q, onProcess(q));</span></div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;-en-codeblock:true;"><div>protected boolean shouldDropInputEvent(QueuedInputEvent q) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (mView == null || !mAdded) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Slog.w(mTag, &quot;Dropping event due to root view being removed: &quot; + q.mEvent);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else if ((!mAttachInfo.mHasWindowFocus</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; !q.mEvent.isFromSource(InputDevice.SOURCE_CLASS_POINTER)) || mStopped</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|| (mIsAmbientMode &amp;&amp; !q.mEvent.isFromSource(InputDevice.SOURCE_CLASS_BUTTON))</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|| (mPausedForTransition &amp;&amp; !isBack(q.mEvent))) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// This is a focus event and the window doesn&apos;t currently have input focus or</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// has stopped. This could be an event that came back from the previous stage</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// but the window has lost focus or stopped in the meantime.</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (isTerminalInputEvent(q.mEvent)) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Don&apos;t drop terminal input events, however mark them as canceled.</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;q.mEvent.cancel();</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Slog.w(mTag, &quot;Cancelling event due to no window focus: &quot; + q.mEvent);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Drop non-terminal input events.</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Slog.w(mTag, &quot;Dropping event due to no window focus: &quot; + q.mEvent);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div></div><div><span style="font-family: &apos;Courier New&apos;;"><br/></span></div><div><span style="font-family: &apos;Courier New&apos;;">先调</span><span style="font-family: &apos;Courier New&apos;;">ViewPostImeInputStage.</span><span style="font-family: &apos;Courier New&apos;;">onProcess中的处理</span></div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;-en-codeblock:true;"><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@Override</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;protected int onProcess(QueuedInputEvent q) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (q.mEvent instanceof KeyEvent) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return processKeyEvent(q);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;final int source = q.mEvent.getSource();</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ((source &amp; InputDevice.SOURCE_CLASS_POINTER) != 0) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return processPointerEvent(q);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else if ((source &amp; InputDevice.SOURCE_CLASS_TRACKBALL) != 0) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return processTrackballEvent(q);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return processGenericMotionEvent(q);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div></div><div><br/></div><div>这里的是以processPointerEvent为例，将会调用View.dispatchPointerEvent()</div><div>&nbsp; &nbsp; &nbsp;<br/></div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;-en-codeblock:true;"><div>&nbsp;&nbsp;&nbsp;private int processPointerEvent(QueuedInputEvent q) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;final MotionEvent event = (MotionEvent)q.mEvent;</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mAttachInfo.mUnbufferedDispatchRequested = false;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;final View eventTarget =</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(event.isFromSource(InputDevice.SOURCE_MOUSE) &amp;&amp; mCapturingView != null) ?</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mCapturingView : mView;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mAttachInfo.mHandlingPointerEvent = true;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boolean handled = eventTarget.dispatchPointerEvent(event);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;maybeUpdatePointerIcon(event);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mAttachInfo.mHandlingPointerEvent = false;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (mAttachInfo.mUnbufferedDispatchRequested &amp;&amp; !mUnbufferedInputDispatch) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mUnbufferedInputDispatch = true;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (mConsumeBatchedInputScheduled) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;scheduleConsumeBatchedInputImmediately();</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return handled ? FINISH_HANDLED : FORWARD;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div></div><div><br/></div><div><span style="font-family: &apos;Courier New&apos;;"><br/></span></div><div><span style="font-family: &apos;Courier New&apos;;">在</span><span style="font-family: &apos;Courier New&apos;;">View.</span><span style="font-family: &apos;Courier New&apos;;">dispatchPointerEvent()中，根据event类型来执行对应的dispatchTouchEvent()</span></div><div>&nbsp;</div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;-en-codeblock:true;"><div>public final boolean dispatchPointerEvent(MotionEvent event) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (event.isTouchEvent()) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return dispatchTouchEvent(event);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return dispatchGenericMotionEvent(event);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div>&nbsp;&nbsp;&nbsp;&nbsp;}</div></div><div><br/></div><div><br/></div><div><span style="font-family: &apos;Courier New&apos;;">而在Window的底层的View就是DecorView，这时候调用的就是DecorView的</span><span style="font-family: &apos;Courier New&apos;; color: rgb(47, 47, 47); font-size: 16px; letter-spacing: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; float: none;">dispatchTouchEvent方法</span></div><div><br/></div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;-en-codeblock:true;"><div>72 public boolean dispatchTouchEvent(MotionEvent ev) {</div><div>373 final Window.Callback cb = mWindow.getCallback();</div><div>374 return cb != null &amp;&amp; !mWindow.isDestroyed() &amp;&amp; mFeatureId &lt; 0</div><div>375&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ? cb.dispatchTouchEvent(ev) : super.dispatchTouchEvent(ev);</div><div>376&nbsp;&nbsp;&nbsp; }</div></div><div><br/></div><div><br/></div><div><span style="font-family: &apos;Courier New&apos;;">这个CallBack就是Activity</span></div><div><br/></div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;-en-codeblock:true;"><div>mWindow.setCallback(this);再去看Activity的dispatchTouchEvent()</div><div>&nbsp;&nbsp;&nbsp;&nbsp;public boolean dispatchTouchEvent(MotionEvent ev) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (ev.getAction() == MotionEvent.ACTION_DOWN) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;onUserInteraction();</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (getWindow().superDispatchTouchEvent(ev)) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return onTouchEvent(ev);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;}</div></div><div><br/></div><div><br/></div><div><br/></div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;-en-codeblock:true;"><div>这里的PhoneWindow..superDispatchTouchEvent(ev);-&gt;DecorView.superDispatchTouchEvent(event);-&gt;ViewGroup-&gt;dispatchTouchEvent();-&gt;child-&gt;dispatchTouchEvent();true的话，Activity就不消耗事件了，不然的话就调用Activity.onTouchEvent(ev);</div></div><div><br/></div><div><br/></div><div>4.处理结果反馈</div><div>&nbsp; &nbsp; 剩下的就是对apply这个方法的分析了。如果onProcess正常处理完成，会返回<span style="color: rgb(0, 0, 0); font-family: Consolas, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace; font-size: 12px; font-variant-ligatures: normal; font-variant-caps: normal; letter-spacing: normal; orphans: 2; text-indent: 0px; text-transform: none; white-space: pre-wrap; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; float: none;">FINISH_HANDLED</span></div><div><span style="color: rgb(0, 0, 0); font-family: Consolas, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace; font-size: 12px; font-variant-ligatures: normal; font-variant-caps: normal; letter-spacing: normal; orphans: 2; text-indent: 0px; text-transform: none; white-space: pre-wrap; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; float: none;">&nbsp;</span><br/></div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;-en-codeblock:true;"><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;protected void apply(QueuedInputEvent q, int result) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (result == FORWARD) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;forward(q);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else if (result == FINISH_HANDLED) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finish(q, true);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else if (result == FINISH_NOT_HANDLED) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finish(q, false);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new IllegalArgumentException(&quot;Invalid result: &quot; + result);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;protected void finish(QueuedInputEvent q, boolean handled) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;q.mFlags |= QueuedInputEvent.FLAG_FINISHED;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (handled) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;q.mFlags |= QueuedInputEvent.FLAG_FINISHED_HANDLED;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;forward(q);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;protected void forward(QueuedInputEvent q) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;onDeliverToNext(q);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;protected void onDeliverToNext(QueuedInputEvent q) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (DEBUG_INPUT_STAGES) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Log.v(mTag, &quot;Done with &quot; + getClass().getSimpleName() + &quot;. &quot; + q);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (mNext != null) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mNext.deliver(q);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finishInputEvent(q);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;private void finishInputEvent(QueuedInputEvent q) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Trace.asyncTraceEnd(Trace.TRACE_TAG_VIEW, &quot;deliverInputEvent&quot;,</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;q.mEvent.getSequenceNumber());</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (q.mReceiver != null) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boolean handled = (q.mFlags &amp; QueuedInputEvent.FLAG_FINISHED_HANDLED) != 0;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;q.mReceiver.finishInputEvent(q.mEvent, handled);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;q.mEvent.recycleIfNeededAfterDispatch();</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;recycleQueuedInputEvent(q);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;}</div></div><div><br/></div><div>mReceiver.finishInputEvent(q.mEvent, handled);内部其实调用的是NativeInputEventReceiver的finishInputEvent<br/></div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;-en-codeblock:true;"><div>status_t NativeInputEventReceiver::finishInputEvent(uint32_t seq, bool handled) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;if (kDebugDispatchCycle) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ALOGD(&quot;channel &apos;%s&apos; ~ Finished input event.&quot;, getInputChannelName());</div><div>&nbsp;&nbsp;&nbsp;&nbsp;}</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;status_t status = mInputConsumer.sendFinishedSignal(seq, handled);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;if (status) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (status == WOULD_BLOCK) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (kDebugDispatchCycle) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ALOGD(&quot;channel &apos;%s&apos; ~ Could not send finished signal immediately.&nbsp;&nbsp;&quot;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;Enqueued for later.&quot;, getInputChannelName());</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Finish finish;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finish.seq = seq;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finish.handled = handled;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFinishQueue.add(finish);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (mFinishQueue.size() == 1) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setFdEvents(ALOOPER_EVENT_INPUT | ALOOPER_EVENT_OUTPUT);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return OK;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ALOGW(&quot;Failed to send finished signal on channel &apos;%s&apos;.&nbsp;&nbsp;status=%d&quot;,</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getInputChannelName(), status);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;}</div><div>&nbsp;&nbsp;&nbsp;&nbsp;return status;</div><div>}</div><div><br/></div><div>status_t InputConsumer::sendFinishedSignal(uint32_t seq, bool handled) {</div><div>&nbsp;&nbsp; &nbsp;&nbsp; &nbsp; ...<br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;status_t status = OK;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (!status &amp;&amp; chainIndex &gt; 0) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;chainIndex--;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;status = sendUnchainedFinishedSignal(chainSeqs[chainIndex], handled);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div>&nbsp;&nbsp; &nbsp;&nbsp; &nbsp; ...&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</div><div><span style="font-size: 12px;">&nbsp; &nbsp; }</span></div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;// Send finished signal for the last message in the batch.</div><div>&nbsp;&nbsp;&nbsp;&nbsp;return sendUnchainedFinishedSignal(seq, handled);</div><div>}</div><div><br/></div><div>status_t InputConsumer::sendUnchainedFinishedSignal(uint32_t seq, bool handled) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;InputMessage msg;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;msg.header.type = InputMessage::TYPE_FINISHED;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;msg.body.finished.seq = seq;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;msg.body.finished.handled = handled;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;return mChannel-&gt;sendMessage(&amp;msg);</div><div>}</div></div><div><br/></div><div>至此为止，InputDispatcher通过Looper.addFD()，将handleReceiveCallBack注册到Looper中的epoll监听里面。</div><div><br/></div><div>InputDispatcher反馈处理</div><div>反馈处理在handleReceiveCallBack中进行，其中包含两个部分：</div><div>1.接收反馈消息</div><div>2.处理反馈消息</div><div><br/></div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;-en-codeblock:true;"><div>int InputDispatcher::handleReceiveCallback(int fd, int events, void* data) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (;;) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;uint32_t seq;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bool handled;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;status = connection-&gt;inputPublisher.receiveFinishedSignal(&amp;seq, &amp;handled);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (status) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d-&gt;finishDispatchCycleLocked(currentTime, connection, seq, handled);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gotOne = true;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div>}</div></div><div><br/></div><div>1.接收反馈消息</div><div>&nbsp; &nbsp; 接收反馈消息是调用的inputPublisher.receiveFinishedSignal方法，内部调用的是<span style="color: rgb(68, 68, 68); font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; font-variant-ligatures: normal; font-variant-caps: normal; letter-spacing: normal; orphans: 2; text-indent: 28px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; float: none;">mChannel-&gt;receiveMessage</span></div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;-en-codeblock:true;"><div>status_t InputPublisher::receiveFinishedSignal(uint32_t* outSeq, bool* outHandled) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;status_t result = mChannel-&gt;receiveMessage(&amp;msg);</div><div>}</div></div><div><br/></div><div>2.处理反馈消息</div><div>&nbsp; &nbsp; 处理反馈消息就在finishDispatchCycleLocked.</div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;-en-codeblock:true;"><div><br/></div><div>void InputDispatcher::finishDispatchCycleLocked(nsecs_t currentTime,</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const sp&lt;Connection&gt;&amp; connection, uint32_t seq, bool handled) {</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;onDispatchCycleFinishedLocked(currentTime, connection, seq, handled);</div><div>}</div></div><div>&nbsp; &nbsp;<br/></div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;-en-codeblock:true;"><div>void InputDispatcher::onDispatchCycleFinishedLocked(</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nsecs_t currentTime, const sp&lt;Connection&gt;&amp; connection, uint32_t seq, bool handled) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;CommandEntry* commandEntry = postCommandLocked(</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp; InputDispatcher::doDispatchCycleFinishedLockedInterruptible);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;commandEntry-&gt;connection = connection;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;commandEntry-&gt;eventTime = currentTime;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;commandEntry-&gt;seq = seq;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;commandEntry-&gt;handled = handled;</div><div>}</div><div><br/></div><div><br/></div></div><div><br/></div><div><br/></div><div>而在postCommandLocked其实也是发消息给InputDispatcherThread,那么在分发线程下一次处理消息时会首先处理doDispatchCycleFinishedLockedInterruptible</div><div>&nbsp; &nbsp; 1.从waitQueue中取出所反馈的事件;<br/></div><div>&nbsp; &nbsp; 2.事件是否处理超时，如果是则做超时处理;<br/></div><div>&nbsp; &nbsp; 3.从waitQueue中删除反馈的事件;<br/></div><div>&nbsp; &nbsp; 4.立刻展开下一次的outboundQueue事件监听<br/></div><div><br/></div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;-en-codeblock:true;"><div>void InputDispatcher::doDispatchCycleFinishedLockedInterruptible(</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CommandEntry* commandEntry) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;sp&lt;Connection&gt; connection = commandEntry-&gt;connection;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;nsecs_t finishTime = commandEntry-&gt;eventTime;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;uint32_t seq = commandEntry-&gt;seq;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;bool handled = commandEntry-&gt;handled;</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;// Handle post-event policy actions.</div><div>&nbsp;&nbsp;&nbsp;&nbsp;DispatchEntry* dispatchEntry = connection-&gt;findWaitQueueEntry(seq);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;if (dispatchEntry) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nsecs_t eventDuration = finishTime - dispatchEntry-&gt;deliveryTime;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (eventDuration &gt; SLOW_EVENT_PROCESSING_WARNING_TIMEOUT) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String8 msg;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;msg.appendFormat(&quot;Window &apos;%s&apos; spent %0.1fms processing the last input event: &quot;,</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;connection-&gt;getWindowName(), eventDuration * 0.000001f);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dispatchEntry-&gt;eventEntry-&gt;appendDescription(msg);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ALOGI(&quot;%s&quot;, msg.string());</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bool restartEvent;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (dispatchEntry-&gt;eventEntry-&gt;type == EventEntry::TYPE_KEY) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;KeyEntry* keyEntry = static_cast&lt;KeyEntry*&gt;(dispatchEntry-&gt;eventEntry);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;restartEvent = afterKeyEventLockedInterruptible(connection,</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dispatchEntry, keyEntry, handled);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else if (dispatchEntry-&gt;eventEntry-&gt;type == EventEntry::TYPE_MOTION) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MotionEntry* motionEntry = static_cast&lt;MotionEntry*&gt;(dispatchEntry-&gt;eventEntry);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;restartEvent = afterMotionEventLockedInterruptible(connection,</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dispatchEntry, motionEntry, handled);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;restartEvent = false;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Dequeue the event and start the next cycle.</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Note that because the lock might have been released, it is possible that the</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// contents of the wait queue to have been drained, so we need to double-check</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// a few things.</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (dispatchEntry == connection-&gt;findWaitQueueEntry(seq)) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;connection-&gt;waitQueue.dequeue(dispatchEntry);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;traceWaitQueueLengthLocked(connection);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (restartEvent &amp;&amp; connection-&gt;status == Connection::STATUS_NORMAL) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;connection-&gt;outboundQueue.enqueueAtHead(dispatchEntry);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;traceOutboundQueueLengthLocked(connection);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;releaseDispatchEntryLocked(dispatchEntry);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Start the next dispatch cycle for this connection.</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;startDispatchCycleLocked(now(), connection);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;}</div><div>}</div></div><div><br/></div><div><br/></div><div>到InputDispatcherThread将这个等待队列处理完毕之后，完成了Input系统的整体的处理流程。</div><div><br/></div><div>至此为止，整体的触摸事件从触摸到view的处理流程已经完成了，从总体来看，epoll这个IO多路复用贯穿到整个Input系统，用到的点有/dev/input/目录文件的监听、device文件的内容监听、Looper监听、InputChannel的消息传递的监听，在分析的过程中，还会牵涉到其他的知识点，有ANR的原理：即5s内InputDispatchThread分发消息的都失败、NativeLooper的实现原理，通过epoll来监听fd，来达到消息的监听与分发。</div><div><br/></div><div><span style="font-weight: bold; color: rgb(255, 0, 0);"><br/></span></div><div><span style="font-weight: bold; color: rgb(255, 0, 0);"><br/></span></div><div><span style="font-weight: bold; color: rgb(255, 0, 0);">总结：</span></div><div>1.通过这个源码的学习，比如一些android系统的设备有自己的一些特殊的按键，我们可以直接通过监听和读取/dev/input/目录下的设备信息，就可以进行一些按键的处理。</div><div><span style="font-family: &apos;Courier New&apos;;">参考地址;</span></div><div><a href="http://www.jianshu.com/p/8bd40df31d43" style="font-family: &apos;Courier New&apos;;">http://www.jianshu.com/p/8bd40df31d43</a></div><div><a href="http://androidxref.com/7.1.1_r6/xref/frameworks/native/services/inputflinger/EventHub.cpp#closeAllDevicesLocked" style="font-family: &apos;Courier New&apos;;">http://androidxref.com</a></div><div><a href="http://www.cnblogs.com/haiming/p/3318614.html">http://www.cnblogs.com/haiming/p/3318614.html</a></div><div><a href="http://blog.csdn.net/hongzg1982/article/details/54812359">http://blog.csdn.net/hongzg1982/article/details/54812359</a></div><div><a href="http://www.cnblogs.com/TaigaCon/p/4749450.html">http://www.cnblogs.com/TaigaCon/p/4749450.html</a></div><div><a href="http://gityuan.com/2016/12/17/input-dispatcher/">http://gityuan.com/2016/12/17/input-dispatcher/</a></div><div><a href="http://www.cnblogs.com/TaigaCon/p/4750349.html">http://www.cnblogs.com/TaigaCon/p/4750349.html</a></div><div><br/></div><div><en-media hash="e5e3d637c306ce2e98963b98f7d1bd25" type="application/x-compressed"/></div><div><br/></div></div></en-note>]]></content><created>20170817T073024Z</created><updated>20170822T151041Z</updated><note-attributes><latitude>22.536627726682</latitude><longitude>114.0505199862908</longitude><altitude>15.18459987640381</altitude><author>1009439210@qq.com</author><source>desktop.mac</source><source-url>http://blog.sina.com.cn/s/blog_6c46cb8601016gnk.html</source-url><reminder-order>0</reminder-order></note-attributes><resource><data encoding="base64">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
ALJTE0ucKHvhhg4AAPk+AAA5ACQAAAAAAAAAIAAAAJaAAwBBbmRyb2lktKXD/srCvP61xLSmwO0vYW5k
cm9pZF92aWV3X0lucHV0RXZlbnRSZWNlaXZlci5jcHAKACAAAAAAAAEAGADsC6L+khjTAeXf09aVGNMB
KFBl/pIY0wFQSwECPwAUAAAACACvUxNLiy/DFAAMAACpLQAANwAkAAAAAAAAACAAAABzjwMAQW5kcm9p
ZLSlw/7Kwrz+tcS0psDtL2FuZHJvaWRfdmlld19JbnB1dEV2ZW50U2VuZGVyLmNwcAoAIAAAAAAAAQAY
ACs8DPySGNMBSMrU1pUY0wH3BJz6khjTAVBLAQI/ABQAAAAIAJhSFEurL4Hnyy0AACj8AABGACQAAAAA
AAAAIAAAAMibAwBBbmRyb2lktKXD/srCvP61xLSmwO0vY29tX2FuZHJvaWRfc2VydmVyX2lucHV0X0lu
cHV0TWFuYWdlclNlcnZpY2UuY3BwCgAgAAAAAAABABgAyBOQ7loZ0wEUhKX6WhnTAdFHEu1aGdMBUEsB
Aj8AFAAAAAgAVrITS+lDSoOvAwAAxQwAACYAJAAAAAAAAAAgAAAA98kDAEFuZHJvaWS0pcP+ysK8/rXE
tKbA7S9lcG9sbF9jbGllbnQuY3BwCgAgAAAAAAABABgAiS/7D/YY0wHJsGI88RjTAQzhODzxGNMBUEsB
Aj8AFAAAAAgAd60TSwl0PtP/BgAAQBQAACYAJAAAAAAAAAAgAAAA6s0DAEFuZHJvaWS0pcP+ysK8/rXE
tKbA7S9lcG9sbF9zZXJ2ZXIuY3BwCgAgAAAAAAABABgAhA+kLfEY0wFd1hAC6RjTAVelAgLpGNMBUEsB
Aj8AFAAAAAgAVVcUS8vqtFvnBQAA0ywAAB8AJAAAAAAAAAAgAAAALdUDAEFuZHJvaWS0pcP+ysK8/rXE
tKbA7S9pbnB1dC5jcHAKACAAAAAAAAEAGAC/W+o6YBnTASgUpUJgGdMBn+iyOWAZ0wFQSwECPwAUAAAA
CAB8VxRLHT+AiCAnAACvxwAAHQAkAAAAAAAAACAAAABR2wMAQW5kcm9pZLSlw/7Kwrz+tcS0psDtL2lu
cHV0LmgKACAAAAAAAAEAGADGsJtmYBnTAUaed31gGdMBdchjZWAZ0wFQSwUGAAAAAB0AHQDhDQAArAIE
AAAA</data><mime>application/x-compressed</mime><duration>0</duration><resource-attributes><source-url>file://D:\android_framworksource\Android触摸事件的处理.zip</source-url><timestamp>19700101T000000Z</timestamp><file-name>Android触摸事件的处理.zip</file-name><attachment>true</attachment></resource-attributes></resource></note>
</en-export>
